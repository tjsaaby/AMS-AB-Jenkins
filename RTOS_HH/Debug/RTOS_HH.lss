
RTOS_HH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000007c0  00800200  00007430  000074c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007430  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a23  008009c0  008009c0  00007c84  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007c84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007ce0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000830  00000000  00000000  00007d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007fb6  00000000  00000000  00008550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000277a  00000000  00000000  00010506  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005ad6  00000000  00000000  00012c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ce8  00000000  00000000  00018758  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002873  00000000  00000000  0001a440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b8d  00000000  00000000  0001ccb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000700  00000000  00000000  00020840  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	82 c0       	rjmp	.+260    	; 0x106 <__ctors_end>
       2:	00 00       	nop
       4:	a1 c0       	rjmp	.+322    	; 0x148 <__bad_interrupt>
       6:	00 00       	nop
       8:	9f c0       	rjmp	.+318    	; 0x148 <__bad_interrupt>
       a:	00 00       	nop
       c:	9d c0       	rjmp	.+314    	; 0x148 <__bad_interrupt>
       e:	00 00       	nop
      10:	9b c0       	rjmp	.+310    	; 0x148 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 f4 31 	jmp	0x63e8	; 0x63e8 <__vector_5>
      18:	97 c0       	rjmp	.+302    	; 0x148 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	95 c0       	rjmp	.+298    	; 0x148 <__bad_interrupt>
      1e:	00 00       	nop
      20:	93 c0       	rjmp	.+294    	; 0x148 <__bad_interrupt>
      22:	00 00       	nop
      24:	91 c0       	rjmp	.+290    	; 0x148 <__bad_interrupt>
      26:	00 00       	nop
      28:	8f c0       	rjmp	.+286    	; 0x148 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8d c0       	rjmp	.+282    	; 0x148 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__vector_12>
      34:	89 c0       	rjmp	.+274    	; 0x148 <__bad_interrupt>
      36:	00 00       	nop
      38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	85 c0       	rjmp	.+266    	; 0x148 <__bad_interrupt>
      3e:	00 00       	nop
      40:	83 c0       	rjmp	.+262    	; 0x148 <__bad_interrupt>
      42:	00 00       	nop
      44:	81 c0       	rjmp	.+258    	; 0x148 <__bad_interrupt>
      46:	00 00       	nop
      48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7b c0       	rjmp	.+246    	; 0x148 <__bad_interrupt>
      52:	00 00       	nop
      54:	79 c0       	rjmp	.+242    	; 0x148 <__bad_interrupt>
      56:	00 00       	nop
      58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	75 c0       	rjmp	.+234    	; 0x148 <__bad_interrupt>
      5e:	00 00       	nop
      60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
      62:	00 00       	nop
      64:	1f c1       	rjmp	.+574    	; 0x2a4 <__vector_25>
      66:	00 00       	nop
      68:	6f c0       	rjmp	.+222    	; 0x148 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6b c0       	rjmp	.+214    	; 0x148 <__bad_interrupt>
      72:	00 00       	nop
      74:	69 c0       	rjmp	.+210    	; 0x148 <__bad_interrupt>
      76:	00 00       	nop
      78:	67 c0       	rjmp	.+206    	; 0x148 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	65 c0       	rjmp	.+202    	; 0x148 <__bad_interrupt>
      7e:	00 00       	nop
      80:	63 c0       	rjmp	.+198    	; 0x148 <__bad_interrupt>
      82:	00 00       	nop
      84:	61 c0       	rjmp	.+194    	; 0x148 <__bad_interrupt>
      86:	00 00       	nop
      88:	5f c0       	rjmp	.+190    	; 0x148 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5d c0       	rjmp	.+186    	; 0x148 <__bad_interrupt>
      8e:	00 00       	nop
      90:	5b c0       	rjmp	.+182    	; 0x148 <__bad_interrupt>
      92:	00 00       	nop
      94:	59 c0       	rjmp	.+178    	; 0x148 <__bad_interrupt>
      96:	00 00       	nop
      98:	57 c0       	rjmp	.+174    	; 0x148 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	55 c0       	rjmp	.+170    	; 0x148 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	53 c0       	rjmp	.+166    	; 0x148 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	51 c0       	rjmp	.+162    	; 0x148 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4f c0       	rjmp	.+158    	; 0x148 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4d c0       	rjmp	.+154    	; 0x148 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4b c0       	rjmp	.+150    	; 0x148 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	49 c0       	rjmp	.+146    	; 0x148 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	47 c0       	rjmp	.+142    	; 0x148 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	45 c0       	rjmp	.+138    	; 0x148 <__bad_interrupt>
      be:	00 00       	nop
      c0:	43 c0       	rjmp	.+134    	; 0x148 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	41 c0       	rjmp	.+130    	; 0x148 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3f c0       	rjmp	.+126    	; 0x148 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3d c0       	rjmp	.+122    	; 0x148 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3b c0       	rjmp	.+118    	; 0x148 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	39 c0       	rjmp	.+114    	; 0x148 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	37 c0       	rjmp	.+110    	; 0x148 <__bad_interrupt>
      da:	00 00       	nop
      dc:	35 c0       	rjmp	.+106    	; 0x148 <__bad_interrupt>
      de:	00 00       	nop
      e0:	33 c0       	rjmp	.+102    	; 0x148 <__bad_interrupt>
	...

000000e4 <prvIdleTask>:
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
        }
        taskEXIT_CRITICAL();

        return ulReturn;
    }
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
      e8:	1f 92       	push	r1
      ea:	1f 92       	push	r1
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
      f0:	9a 83       	std	Y+2, r25	; 0x02
      f2:	89 83       	std	Y+1, r24	; 0x01
      f4:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <prvCheckTasksWaitingTermination>
      f8:	80 91 8a 13 	lds	r24, 0x138A	; 0x80138a <pxReadyTasksLists>
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	d0 f3       	brcs	.-12     	; 0xf4 <prvIdleTask+0x10>
     100:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <vPortYield>
     104:	f7 cf       	rjmp	.-18     	; 0xf4 <prvIdleTask+0x10>

00000106 <__ctors_end>:
     106:	11 24       	eor	r1, r1
     108:	1f be       	out	0x3f, r1	; 63
     10a:	cf ef       	ldi	r28, 0xFF	; 255
     10c:	d1 e2       	ldi	r29, 0x21	; 33
     10e:	de bf       	out	0x3e, r29	; 62
     110:	cd bf       	out	0x3d, r28	; 61
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0c bf       	out	0x3c, r16	; 60

00000116 <__do_copy_data>:
     116:	19 e0       	ldi	r17, 0x09	; 9
     118:	a0 e0       	ldi	r26, 0x00	; 0
     11a:	b2 e0       	ldi	r27, 0x02	; 2
     11c:	e0 e3       	ldi	r30, 0x30	; 48
     11e:	f4 e7       	ldi	r31, 0x74	; 116
     120:	00 e0       	ldi	r16, 0x00	; 0
     122:	0b bf       	out	0x3b, r16	; 59
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x14>
     126:	07 90       	elpm	r0, Z+
     128:	0d 92       	st	X+, r0
     12a:	a0 3c       	cpi	r26, 0xC0	; 192
     12c:	b1 07       	cpc	r27, r17
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0x10>

00000130 <__do_clear_bss>:
     130:	23 e1       	ldi	r18, 0x13	; 19
     132:	a0 ec       	ldi	r26, 0xC0	; 192
     134:	b9 e0       	ldi	r27, 0x09	; 9
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
     13a:	a3 3e       	cpi	r26, 0xE3	; 227
     13c:	b2 07       	cpc	r27, r18
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
     140:	0e 94 11 32 	call	0x6422	; 0x6422 <main>
     144:	0c 94 16 3a 	jmp	0x742c	; 0x742c <_exit>

00000148 <__bad_interrupt>:
     148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <ESPBC_GetCommandQueueHandle>:

xQueueHandle g_espCommandQueue;
StreamBufferHandle_t g_uartStreamBuffer;

xQueueHandle ESPBC_GetCommandQueueHandle()
{
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	cd b7       	in	r28, 0x3d	; 61
     150:	de b7       	in	r29, 0x3e	; 62
	return g_espCommandQueue;
     152:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <g_espCommandQueue>
     156:	90 91 c6 13 	lds	r25, 0x13C6	; 0x8013c6 <g_espCommandQueue+0x1>
}
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <ESPBC_BuildCommandTask>:

void ESPBC_BuildCommandTask(void *pvParameters)
{
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
     168:	ea 97       	sbiw	r28, 0x3a	; 58
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	f8 94       	cli
     16e:	de bf       	out	0x3e, r29	; 62
     170:	0f be       	out	0x3f, r0	; 63
     172:	cd bf       	out	0x3d, r28	; 61
     174:	9a af       	std	Y+58, r25	; 0x3a
     176:	89 af       	std	Y+57, r24	; 0x39
	uint8_t ucRxData[ESP_COMMAND_LENGTH_IN_BYTES];

	size_t receivedBytes, bytesInBuffer;
	TickType_t xLastWakeTime = xTaskGetTickCount();
     178:	0e 94 4d 22 	call	0x449a	; 0x449a <xTaskGetTickCount>
     17c:	98 a3       	std	Y+32, r25	; 0x20
     17e:	8f 8f       	std	Y+31, r24	; 0x1f
	const TickType_t xFrequency = pdMS_TO_TICKS(5);
     180:	85 e0       	ldi	r24, 0x05	; 5
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	9a 83       	std	Y+2, r25	; 0x02
     186:	89 83       	std	Y+1, r24	; 0x01

	while (1)
	{
		bytesInBuffer = xStreamBufferBytesAvailable(g_uartStreamBuffer);
     188:	80 91 c7 13 	lds	r24, 0x13C7	; 0x8013c7 <g_uartStreamBuffer>
     18c:	90 91 c8 13 	lds	r25, 0x13C8	; 0x8013c8 <g_uartStreamBuffer+0x1>
     190:	0e 94 44 1b 	call	0x3688	; 0x3688 <xStreamBufferBytesAvailable>
     194:	9c 83       	std	Y+4, r25	; 0x04
     196:	8b 83       	std	Y+3, r24	; 0x03
		if (bytesInBuffer > 0 && bytesInBuffer < ESP_COMMAND_LENGTH_IN_BYTES)
     198:	8b 81       	ldd	r24, Y+3	; 0x03
     19a:	9c 81       	ldd	r25, Y+4	; 0x04
     19c:	89 2b       	or	r24, r25
     19e:	41 f0       	breq	.+16     	; 0x1b0 <ESPBC_BuildCommandTask+0x50>
     1a0:	8b 81       	ldd	r24, Y+3	; 0x03
     1a2:	9c 81       	ldd	r25, Y+4	; 0x04
     1a4:	48 97       	sbiw	r24, 0x18	; 24
     1a6:	20 f4       	brcc	.+8      	; 0x1b0 <ESPBC_BuildCommandTask+0x50>
		{
			//Wait 1 ms if there is data in the buffer, but it is not complete.
			vTaskDelay(pdMS_TO_TICKS(1));
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 4b 21 	call	0x4296	; 0x4296 <vTaskDelay>
		}
		receivedBytes = xStreamBufferReceive(g_uartStreamBuffer, (void *)ucRxData, ESP_COMMAND_LENGTH_IN_BYTES, 0);
     1b0:	80 91 c7 13 	lds	r24, 0x13C7	; 0x8013c7 <g_uartStreamBuffer>
     1b4:	90 91 c8 13 	lds	r25, 0x13C8	; 0x8013c8 <g_uartStreamBuffer+0x1>
     1b8:	be 01       	movw	r22, r28
     1ba:	69 5f       	subi	r22, 0xF9	; 249
     1bc:	7f 4f       	sbci	r23, 0xFF	; 255
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	48 e1       	ldi	r20, 0x18	; 24
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	0e 94 45 1c 	call	0x388a	; 0x388a <xStreamBufferReceive>
     1ca:	9e 83       	std	Y+6, r25	; 0x06
     1cc:	8d 83       	std	Y+5, r24	; 0x05
		if (receivedBytes == ESP_COMMAND_LENGTH_IN_BYTES)
     1ce:	8d 81       	ldd	r24, Y+5	; 0x05
     1d0:	9e 81       	ldd	r25, Y+6	; 0x06
     1d2:	48 97       	sbiw	r24, 0x18	; 24
     1d4:	b1 f4       	brne	.+44     	; 0x202 <ESPBC_BuildCommandTask+0xa2>
		{
			ESP_Command command;
			memcpy(&command.commandData, &ucRxData, ESP_COMMAND_LENGTH_IN_BYTES);
     1d6:	88 e1       	ldi	r24, 0x18	; 24
     1d8:	fe 01       	movw	r30, r28
     1da:	37 96       	adiw	r30, 0x07	; 7
     1dc:	de 01       	movw	r26, r28
     1de:	91 96       	adiw	r26, 0x21	; 33
     1e0:	01 90       	ld	r0, Z+
     1e2:	0d 92       	st	X+, r0
     1e4:	8a 95       	dec	r24
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <ESPBC_BuildCommandTask+0x80>
			//Send the command to the queue which for it to be handled elsewhere
			xQueueSendToBackFromISR(g_espCommandQueue, (void *)&command, pdFALSE);
     1e8:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <g_espCommandQueue>
     1ec:	90 91 c6 13 	lds	r25, 0x13C6	; 0x8013c6 <g_espCommandQueue+0x1>
     1f0:	be 01       	movw	r22, r28
     1f2:	6f 5d       	subi	r22, 0xDF	; 223
     1f4:	7f 4f       	sbci	r23, 0xFF	; 255
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	50 e0       	ldi	r21, 0x00	; 0
     1fc:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <xQueueGenericSendFromISR>
     200:	19 c0       	rjmp	.+50     	; 0x234 <ESPBC_BuildCommandTask+0xd4>
		}
		else if (receivedBytes > 0 && bytesInBuffer < ESP_COMMAND_LENGTH_IN_BYTES)
     202:	8d 81       	ldd	r24, Y+5	; 0x05
     204:	9e 81       	ldd	r25, Y+6	; 0x06
     206:	89 2b       	or	r24, r25
     208:	a9 f0       	breq	.+42     	; 0x234 <ESPBC_BuildCommandTask+0xd4>
     20a:	8b 81       	ldd	r24, Y+3	; 0x03
     20c:	9c 81       	ldd	r25, Y+4	; 0x04
     20e:	48 97       	sbiw	r24, 0x18	; 24
     210:	88 f4       	brcc	.+34     	; 0x234 <ESPBC_BuildCommandTask+0xd4>
		{
			printf("Received %zu bytes from UART which does not constitute a complete command, buffer has been cleared.\r\n", receivedBytes);
     212:	8e 81       	ldd	r24, Y+6	; 0x06
     214:	8f 93       	push	r24
     216:	8d 81       	ldd	r24, Y+5	; 0x05
     218:	8f 93       	push	r24
     21a:	85 e1       	ldi	r24, 0x15	; 21
     21c:	97 e0       	ldi	r25, 0x07	; 7
     21e:	89 2f       	mov	r24, r25
     220:	8f 93       	push	r24
     222:	85 e1       	ldi	r24, 0x15	; 21
     224:	97 e0       	ldi	r25, 0x07	; 7
     226:	8f 93       	push	r24
     228:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <printf>
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
     234:	29 81       	ldd	r18, Y+1	; 0x01
     236:	3a 81       	ldd	r19, Y+2	; 0x02
     238:	ce 01       	movw	r24, r28
     23a:	4f 96       	adiw	r24, 0x1f	; 31
     23c:	b9 01       	movw	r22, r18
     23e:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <xTaskDelayUntil>
	}
     242:	a2 cf       	rjmp	.-188    	; 0x188 <ESPBC_BuildCommandTask+0x28>

00000244 <ESPCB_Initialize>:
}

void ESPCB_Initialize()
{
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	00 d0       	rcall	.+0      	; 0x24a <ESPCB_Initialize+0x6>
     24a:	1f 92       	push	r1
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
	StreamBufferHandle_t uartStreamBuffer = xStreamBufferCreate(ESP_COMMAND_LENGTH_IN_BYTES * 3, ESP_COMMAND_LENGTH_IN_BYTES);
     250:	40 e0       	ldi	r20, 0x00	; 0
     252:	68 e1       	ldi	r22, 0x18	; 24
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	88 e4       	ldi	r24, 0x48	; 72
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 a2 1a 	call	0x3544	; 0x3544 <xStreamBufferGenericCreate>
     25e:	9a 83       	std	Y+2, r25	; 0x02
     260:	89 83       	std	Y+1, r24	; 0x01
	xQueueHandle espCommandQueueHandle = xQueueCreate(ESP_COMMAND_QUEUE_SIZE, sizeof(ESP_Command));
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	68 e1       	ldi	r22, 0x18	; 24
     266:	85 e0       	ldi	r24, 0x05	; 5
     268:	0e 94 41 17 	call	0x2e82	; 0x2e82 <xQueueGenericCreate>
     26c:	9c 83       	std	Y+4, r25	; 0x04
     26e:	8b 83       	std	Y+3, r24	; 0x03
	vQueueAddToRegistry(espCommandQueueHandle, "EspCommandQueue");
     270:	8b 81       	ldd	r24, Y+3	; 0x03
     272:	9c 81       	ldd	r25, Y+4	; 0x04
     274:	6b e7       	ldi	r22, 0x7B	; 123
     276:	77 e0       	ldi	r23, 0x07	; 7
     278:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <vQueueAddToRegistry>

	g_espCommandQueue = espCommandQueueHandle;
     27c:	8b 81       	ldd	r24, Y+3	; 0x03
     27e:	9c 81       	ldd	r25, Y+4	; 0x04
     280:	90 93 c6 13 	sts	0x13C6, r25	; 0x8013c6 <g_espCommandQueue+0x1>
     284:	80 93 c5 13 	sts	0x13C5, r24	; 0x8013c5 <g_espCommandQueue>
	g_uartStreamBuffer = uartStreamBuffer;
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	9a 81       	ldd	r25, Y+2	; 0x02
     28c:	90 93 c8 13 	sts	0x13C8, r25	; 0x8013c8 <g_uartStreamBuffer+0x1>
     290:	80 93 c7 13 	sts	0x13C7, r24	; 0x8013c7 <g_uartStreamBuffer>
}
     294:	00 00       	nop
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <__vector_25>:

ISR(USART0_RX_vect)
{
     2a4:	1f 92       	push	r1
     2a6:	0f 92       	push	r0
     2a8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     2ac:	0f 92       	push	r0
     2ae:	11 24       	eor	r1, r1
     2b0:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     2b4:	0f 92       	push	r0
     2b6:	2f 93       	push	r18
     2b8:	3f 93       	push	r19
     2ba:	4f 93       	push	r20
     2bc:	5f 93       	push	r21
     2be:	6f 93       	push	r22
     2c0:	7f 93       	push	r23
     2c2:	8f 93       	push	r24
     2c4:	9f 93       	push	r25
     2c6:	af 93       	push	r26
     2c8:	bf 93       	push	r27
     2ca:	ef 93       	push	r30
     2cc:	ff 93       	push	r31
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <__vector_25+0x30>
     2d4:	1f 92       	push	r1
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
	uint8_t receivedByte = UDR0;
     2da:	86 ec       	ldi	r24, 0xC6	; 198
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	fc 01       	movw	r30, r24
     2e0:	80 81       	ld	r24, Z
     2e2:	8b 83       	std	Y+3, r24	; 0x03
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     2e4:	1c 82       	std	Y+4, r1	; 0x04
	size_t xBytesSent = xStreamBufferSendFromISR(g_uartStreamBuffer,
     2e6:	80 91 c7 13 	lds	r24, 0x13C7	; 0x8013c7 <g_uartStreamBuffer>
     2ea:	90 91 c8 13 	lds	r25, 0x13C8	; 0x8013c8 <g_uartStreamBuffer+0x1>
     2ee:	9e 01       	movw	r18, r28
     2f0:	2c 5f       	subi	r18, 0xFC	; 252
     2f2:	3f 4f       	sbci	r19, 0xFF	; 255
     2f4:	be 01       	movw	r22, r28
     2f6:	6d 5f       	subi	r22, 0xFD	; 253
     2f8:	7f 4f       	sbci	r23, 0xFF	; 255
     2fa:	41 e0       	ldi	r20, 0x01	; 1
     2fc:	50 e0       	ldi	r21, 0x00	; 0
     2fe:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <xStreamBufferSendFromISR>
     302:	9a 83       	std	Y+2, r25	; 0x02
     304:	89 83       	std	Y+1, r24	; 0x01
												 (void *)&receivedByte,
												 sizeof(uint8_t),
												 &xHigherPriorityTaskWoken);
	if (xBytesSent != sizeof(uint8_t))
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	9a 81       	ldd	r25, Y+2	; 0x02
     30a:	01 97       	sbiw	r24, 0x01	; 1
     30c:	21 f0       	breq	.+8      	; 0x316 <__vector_25+0x72>
	{
		printf("Not enough space to write to buffer!\r\n");
     30e:	8b e8       	ldi	r24, 0x8B	; 139
     310:	97 e0       	ldi	r25, 0x07	; 7
     312:	0e 94 39 37 	call	0x6e72	; 0x6e72 <puts>
	}
}
     316:	00 00       	nop
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	ff 91       	pop	r31
     326:	ef 91       	pop	r30
     328:	bf 91       	pop	r27
     32a:	af 91       	pop	r26
     32c:	9f 91       	pop	r25
     32e:	8f 91       	pop	r24
     330:	7f 91       	pop	r23
     332:	6f 91       	pop	r22
     334:	5f 91       	pop	r21
     336:	4f 91       	pop	r20
     338:	3f 91       	pop	r19
     33a:	2f 91       	pop	r18
     33c:	0f 90       	pop	r0
     33e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     342:	0f 90       	pop	r0
     344:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     348:	0f 90       	pop	r0
     34a:	1f 90       	pop	r1
     34c:	18 95       	reti

0000034e <CheckCommandSyntax>:
} CommandType;


//Return -1 if command syntax is bad.
int CheckCommandSyntax(ESP_Command command)
{
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	00 d0       	rcall	.+0      	; 0x354 <CheckCommandSyntax+0x6>
     354:	1f 92       	push	r1
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
	int lastByteCheck = command.commandData[ESP_COMMAND_LENGTH_IN_BYTES - 1] == ESP_COMMAND_LAST_BYTE_VALUE;
     35a:	99 a1       	ldd	r25, Y+33	; 0x21
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	9d 3f       	cpi	r25, 0xFD	; 253
     360:	09 f0       	breq	.+2      	; 0x364 <CheckCommandSyntax+0x16>
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	88 2f       	mov	r24, r24
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	9a 83       	std	Y+2, r25	; 0x02
     36a:	89 83       	std	Y+1, r24	; 0x01
	int secondLastByteCheck = command.commandData[ESP_COMMAND_LENGTH_IN_BYTES - 2] == ESP_COMMAND_SECOND_LAST_BYTE_VALUE;
     36c:	98 a1       	ldd	r25, Y+32	; 0x20
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	9e 3f       	cpi	r25, 0xFE	; 254
     372:	09 f0       	breq	.+2      	; 0x376 <CheckCommandSyntax+0x28>
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	88 2f       	mov	r24, r24
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	9c 83       	std	Y+4, r25	; 0x04
     37c:	8b 83       	std	Y+3, r24	; 0x03
	if (!(lastByteCheck && secondLastByteCheck))
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	9a 81       	ldd	r25, Y+2	; 0x02
     382:	89 2b       	or	r24, r25
     384:	21 f0       	breq	.+8      	; 0x38e <CheckCommandSyntax+0x40>
     386:	8b 81       	ldd	r24, Y+3	; 0x03
     388:	9c 81       	ldd	r25, Y+4	; 0x04
     38a:	89 2b       	or	r24, r25
     38c:	19 f4       	brne	.+6      	; 0x394 <CheckCommandSyntax+0x46>
		return -1;
     38e:	8f ef       	ldi	r24, 0xFF	; 255
     390:	9f ef       	ldi	r25, 0xFF	; 255
     392:	02 c0       	rjmp	.+4      	; 0x398 <CheckCommandSyntax+0x4a>
	else
		return 0;
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	90 e0       	ldi	r25, 0x00	; 0
}
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	08 95       	ret

000003a6 <GetCommandType>:

CommandType GetCommandType(ESP_Command command)
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
	return (CommandType)command.commandData[0];
     3ae:	8e 81       	ldd	r24, Y+6	; 0x06
}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	08 95       	ret

000003b6 <HandleInitializePlayersCommand>:

void HandleInitializePlayersCommand(ESP_Command command, Game *p_game)
{
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <HandleInitializePlayersCommand+0x6>
     3bc:	1f 92       	push	r1
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
	IPC_InitializePlayerCommandParameters initParams = ECTGCP_ToInitializePlayersParams(command, p_game);
     3c2:	8b a1       	ldd	r24, Y+35	; 0x23
     3c4:	8f 93       	push	r24
     3c6:	8a a1       	ldd	r24, Y+34	; 0x22
     3c8:	8f 93       	push	r24
     3ca:	2d b7       	in	r18, 0x3d	; 61
     3cc:	3e b7       	in	r19, 0x3e	; 62
     3ce:	28 51       	subi	r18, 0x18	; 24
     3d0:	31 09       	sbc	r19, r1
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	3e bf       	out	0x3e, r19	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	2d bf       	out	0x3d, r18	; 61
     3dc:	8d b7       	in	r24, 0x3d	; 61
     3de:	9e b7       	in	r25, 0x3e	; 62
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	28 e1       	ldi	r18, 0x18	; 24
     3e4:	fe 01       	movw	r30, r28
     3e6:	3a 96       	adiw	r30, 0x0a	; 10
     3e8:	dc 01       	movw	r26, r24
     3ea:	01 90       	ld	r0, Z+
     3ec:	0d 92       	st	X+, r0
     3ee:	2a 95       	dec	r18
     3f0:	e1 f7       	brne	.-8      	; 0x3ea <HandleInitializePlayersCommand+0x34>
     3f2:	b2 d2       	rcall	.+1380   	; 0x958 <ECTGCP_ToInitializePlayersParams>
     3f4:	2d b7       	in	r18, 0x3d	; 61
     3f6:	3e b7       	in	r19, 0x3e	; 62
     3f8:	26 5e       	subi	r18, 0xE6	; 230
     3fa:	3f 4f       	sbci	r19, 0xFF	; 255
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	dc 01       	movw	r26, r24
     408:	cb 01       	movw	r24, r22
     40a:	89 83       	std	Y+1, r24	; 0x01
     40c:	9a 83       	std	Y+2, r25	; 0x02
     40e:	ab 83       	std	Y+3, r26	; 0x03
     410:	bc 83       	std	Y+4, r27	; 0x04
	IPC_Execute(initParams);
     412:	89 81       	ldd	r24, Y+1	; 0x01
     414:	9a 81       	ldd	r25, Y+2	; 0x02
     416:	ab 81       	ldd	r26, Y+3	; 0x03
     418:	bc 81       	ldd	r27, Y+4	; 0x04
     41a:	bc 01       	movw	r22, r24
     41c:	cd 01       	movw	r24, r26
     41e:	0e 94 4d 2a 	call	0x549a	; 0x549a <IPC_Execute>
	printf("Initialize players command executed\r\n");
     422:	81 eb       	ldi	r24, 0xB1	; 177
     424:	97 e0       	ldi	r25, 0x07	; 7
     426:	0e 94 39 37 	call	0x6e72	; 0x6e72 <puts>
}
     42a:	00 00       	nop
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <HandleCommandServerPlayerStatusUpdate>:

void HandleCommandServerPlayerStatusUpdate(ESP_Command command, Game* p_game)
{
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	a2 97       	sbiw	r28, 0x22	; 34
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
	MSPC_MoveServerPlayerCommandParameters mspcp[4];
	ECTGCP_ToMoveServerPlayerParams(command, p_game, mspcp);
     44e:	ce 01       	movw	r24, r28
     450:	03 96       	adiw	r24, 0x03	; 3
     452:	29 2f       	mov	r18, r25
     454:	2f 93       	push	r18
     456:	8f 93       	push	r24
     458:	22 96       	adiw	r28, 0x02	; 2
     45a:	8f ad       	ldd	r24, Y+63	; 0x3f
     45c:	22 97       	sbiw	r28, 0x02	; 2
     45e:	8f 93       	push	r24
     460:	21 96       	adiw	r28, 0x01	; 1
     462:	8f ad       	ldd	r24, Y+63	; 0x3f
     464:	21 97       	sbiw	r28, 0x01	; 1
     466:	8f 93       	push	r24
     468:	8d b7       	in	r24, 0x3d	; 61
     46a:	9e b7       	in	r25, 0x3e	; 62
     46c:	48 97       	sbiw	r24, 0x18	; 24
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	9e bf       	out	0x3e, r25	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	8d bf       	out	0x3d, r24	; 61
     478:	8d b7       	in	r24, 0x3d	; 61
     47a:	9e b7       	in	r25, 0x3e	; 62
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	28 e1       	ldi	r18, 0x18	; 24
     480:	fe 01       	movw	r30, r28
     482:	b8 96       	adiw	r30, 0x28	; 40
     484:	dc 01       	movw	r26, r24
     486:	01 90       	ld	r0, Z+
     488:	0d 92       	st	X+, r0
     48a:	2a 95       	dec	r18
     48c:	e1 f7       	brne	.-8      	; 0x486 <HandleCommandServerPlayerStatusUpdate+0x4c>
     48e:	87 d1       	rcall	.+782    	; 0x79e <ECTGCP_ToMoveServerPlayerParams>
     490:	8d b7       	in	r24, 0x3d	; 61
     492:	9e b7       	in	r25, 0x3e	; 62
     494:	4c 96       	adiw	r24, 0x1c	; 28
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61
	
	for(int i = 0; i<GAME_NO_OF_PLAYERS; i++)
     4a0:	1a 82       	std	Y+2, r1	; 0x02
     4a2:	19 82       	std	Y+1, r1	; 0x01
     4a4:	1e c0       	rjmp	.+60     	; 0x4e2 <HandleCommandServerPlayerStatusUpdate+0xa8>
		MSPCMD_Execute(mspcp[i]);
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	88 0f       	add	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	9e 01       	movw	r18, r28
     4b8:	2f 5f       	subi	r18, 0xFF	; 255
     4ba:	3f 4f       	sbci	r19, 0xFF	; 255
     4bc:	82 0f       	add	r24, r18
     4be:	93 1f       	adc	r25, r19
     4c0:	fc 01       	movw	r30, r24
     4c2:	32 96       	adiw	r30, 0x02	; 2
     4c4:	20 81       	ld	r18, Z
     4c6:	31 81       	ldd	r19, Z+1	; 0x01
     4c8:	42 81       	ldd	r20, Z+2	; 0x02
     4ca:	53 81       	ldd	r21, Z+3	; 0x03
     4cc:	64 81       	ldd	r22, Z+4	; 0x04
     4ce:	75 81       	ldd	r23, Z+5	; 0x05
     4d0:	86 81       	ldd	r24, Z+6	; 0x06
     4d2:	97 81       	ldd	r25, Z+7	; 0x07
     4d4:	0e 94 8e 2a 	call	0x551c	; 0x551c <MSPCMD_Execute>
void HandleCommandServerPlayerStatusUpdate(ESP_Command command, Game* p_game)
{
	MSPC_MoveServerPlayerCommandParameters mspcp[4];
	ECTGCP_ToMoveServerPlayerParams(command, p_game, mspcp);
	
	for(int i = 0; i<GAME_NO_OF_PLAYERS; i++)
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	9a 81       	ldd	r25, Y+2	; 0x02
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	9a 83       	std	Y+2, r25	; 0x02
     4e0:	89 83       	std	Y+1, r24	; 0x01
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	04 97       	sbiw	r24, 0x04	; 4
     4e8:	f4 f2       	brlt	.-68     	; 0x4a6 <HandleCommandServerPlayerStatusUpdate+0x6c>
		MSPCMD_Execute(mspcp[i]);
	
	printf("HandleCommandServerPlayerStatusUpdate executed\r\n");	
     4ea:	86 ed       	ldi	r24, 0xD6	; 214
     4ec:	97 e0       	ldi	r25, 0x07	; 7
     4ee:	0e 94 39 37 	call	0x6e72	; 0x6e72 <puts>
}
     4f2:	00 00       	nop
     4f4:	a2 96       	adiw	r28, 0x22	; 34
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <HandleEspCommand>:

void HandleEspCommand(ESP_Command command, Game* p_game)
{
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	00 d0       	rcall	.+0      	; 0x50c <HandleEspCommand+0x6>
     50c:	1f 92       	push	r1
     50e:	1f 92       	push	r1
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
	int ret = CheckCommandSyntax(command);
     514:	2d b7       	in	r18, 0x3d	; 61
     516:	3e b7       	in	r19, 0x3e	; 62
     518:	28 51       	subi	r18, 0x18	; 24
     51a:	31 09       	sbc	r19, r1
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	f8 94       	cli
     520:	3e bf       	out	0x3e, r19	; 62
     522:	0f be       	out	0x3f, r0	; 63
     524:	2d bf       	out	0x3d, r18	; 61
     526:	8d b7       	in	r24, 0x3d	; 61
     528:	9e b7       	in	r25, 0x3e	; 62
     52a:	01 96       	adiw	r24, 0x01	; 1
     52c:	28 e1       	ldi	r18, 0x18	; 24
     52e:	fe 01       	movw	r30, r28
     530:	3b 96       	adiw	r30, 0x0b	; 11
     532:	dc 01       	movw	r26, r24
     534:	01 90       	ld	r0, Z+
     536:	0d 92       	st	X+, r0
     538:	2a 95       	dec	r18
     53a:	e1 f7       	brne	.-8      	; 0x534 <HandleEspCommand+0x2e>
     53c:	08 df       	rcall	.-496    	; 0x34e <CheckCommandSyntax>
     53e:	ed b7       	in	r30, 0x3d	; 61
     540:	fe b7       	in	r31, 0x3e	; 62
     542:	78 96       	adiw	r30, 0x18	; 24
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
     54e:	9c 83       	std	Y+4, r25	; 0x04
     550:	8b 83       	std	Y+3, r24	; 0x03
	if (ret < 0)
     552:	8b 81       	ldd	r24, Y+3	; 0x03
     554:	9c 81       	ldd	r25, Y+4	; 0x04
     556:	99 23       	and	r25, r25
     558:	e4 f5       	brge	.+120    	; 0x5d2 <HandleEspCommand+0xcc>
	{
		printf("Received command with incorrect syntax. Command will not be handled.\r\n");
     55a:	86 e0       	ldi	r24, 0x06	; 6
     55c:	98 e0       	ldi	r25, 0x08	; 8
     55e:	0e 94 39 37 	call	0x6e72	; 0x6e72 <puts>
		printf("Command: [");
     562:	8c e4       	ldi	r24, 0x4C	; 76
     564:	98 e0       	ldi	r25, 0x08	; 8
     566:	89 2f       	mov	r24, r25
     568:	8f 93       	push	r24
     56a:	8c e4       	ldi	r24, 0x4C	; 76
     56c:	98 e0       	ldi	r25, 0x08	; 8
     56e:	8f 93       	push	r24
     570:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <printf>
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
		for (int i = 0; i < ESP_COMMAND_LENGTH_IN_BYTES; i++)
     578:	1a 82       	std	Y+2, r1	; 0x02
     57a:	19 82       	std	Y+1, r1	; 0x01
     57c:	21 c0       	rjmp	.+66     	; 0x5c0 <HandleEspCommand+0xba>
			printf("%d, ", command.commandData[i]);
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	9a 81       	ldd	r25, Y+2	; 0x02
     582:	2b e0       	ldi	r18, 0x0B	; 11
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	2c 0f       	add	r18, r28
     588:	3d 1f       	adc	r19, r29
     58a:	82 0f       	add	r24, r18
     58c:	93 1f       	adc	r25, r19
     58e:	fc 01       	movw	r30, r24
     590:	80 81       	ld	r24, Z
     592:	88 2f       	mov	r24, r24
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	29 2f       	mov	r18, r25
     598:	2f 93       	push	r18
     59a:	8f 93       	push	r24
     59c:	87 e5       	ldi	r24, 0x57	; 87
     59e:	98 e0       	ldi	r25, 0x08	; 8
     5a0:	89 2f       	mov	r24, r25
     5a2:	8f 93       	push	r24
     5a4:	87 e5       	ldi	r24, 0x57	; 87
     5a6:	98 e0       	ldi	r25, 0x08	; 8
     5a8:	8f 93       	push	r24
     5aa:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <printf>
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
	int ret = CheckCommandSyntax(command);
	if (ret < 0)
	{
		printf("Received command with incorrect syntax. Command will not be handled.\r\n");
		printf("Command: [");
		for (int i = 0; i < ESP_COMMAND_LENGTH_IN_BYTES; i++)
     5b6:	89 81       	ldd	r24, Y+1	; 0x01
     5b8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	9a 83       	std	Y+2, r25	; 0x02
     5be:	89 83       	std	Y+1, r24	; 0x01
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	9a 81       	ldd	r25, Y+2	; 0x02
     5c4:	48 97       	sbiw	r24, 0x18	; 24
     5c6:	dc f2       	brlt	.-74     	; 0x57e <HandleEspCommand+0x78>
			printf("%d, ", command.commandData[i]);
		printf("]\r\n");
     5c8:	8c e5       	ldi	r24, 0x5C	; 92
     5ca:	98 e0       	ldi	r25, 0x08	; 8
     5cc:	0e 94 39 37 	call	0x6e72	; 0x6e72 <puts>
		return;
     5d0:	87 c0       	rjmp	.+270    	; 0x6e0 <HandleEspCommand+0x1da>
	}
	CommandType type = GetCommandType(command);
     5d2:	2d b7       	in	r18, 0x3d	; 61
     5d4:	3e b7       	in	r19, 0x3e	; 62
     5d6:	28 51       	subi	r18, 0x18	; 24
     5d8:	31 09       	sbc	r19, r1
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	3e bf       	out	0x3e, r19	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	2d bf       	out	0x3d, r18	; 61
     5e4:	8d b7       	in	r24, 0x3d	; 61
     5e6:	9e b7       	in	r25, 0x3e	; 62
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	28 e1       	ldi	r18, 0x18	; 24
     5ec:	fe 01       	movw	r30, r28
     5ee:	3b 96       	adiw	r30, 0x0b	; 11
     5f0:	dc 01       	movw	r26, r24
     5f2:	01 90       	ld	r0, Z+
     5f4:	0d 92       	st	X+, r0
     5f6:	2a 95       	dec	r18
     5f8:	e1 f7       	brne	.-8      	; 0x5f2 <HandleEspCommand+0xec>
     5fa:	d5 de       	rcall	.-598    	; 0x3a6 <GetCommandType>
     5fc:	ed b7       	in	r30, 0x3d	; 61
     5fe:	fe b7       	in	r31, 0x3e	; 62
     600:	78 96       	adiw	r30, 0x18	; 24
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	de bf       	out	0x3e, r29	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	cd bf       	out	0x3d, r28	; 61
     60c:	8d 83       	std	Y+5, r24	; 0x05

	switch (type)
     60e:	8d 81       	ldd	r24, Y+5	; 0x05
     610:	88 2f       	mov	r24, r24
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	82 30       	cpi	r24, 0x02	; 2
     616:	91 05       	cpc	r25, r1
     618:	31 f0       	breq	.+12     	; 0x626 <HandleEspCommand+0x120>
     61a:	83 30       	cpi	r24, 0x03	; 3
     61c:	91 05       	cpc	r25, r1
     61e:	29 f1       	breq	.+74     	; 0x66a <HandleEspCommand+0x164>
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	41 f1       	breq	.+80     	; 0x674 <HandleEspCommand+0x16e>
     624:	49 c0       	rjmp	.+146    	; 0x6b8 <HandleEspCommand+0x1b2>
	{
	case ESP_COMMAND_SERVER_PLAYERS_STATUS_UPDATE:
		HandleCommandServerPlayerStatusUpdate(command, p_game);
     626:	8c a1       	ldd	r24, Y+36	; 0x24
     628:	8f 93       	push	r24
     62a:	8b a1       	ldd	r24, Y+35	; 0x23
     62c:	8f 93       	push	r24
     62e:	2d b7       	in	r18, 0x3d	; 61
     630:	3e b7       	in	r19, 0x3e	; 62
     632:	28 51       	subi	r18, 0x18	; 24
     634:	31 09       	sbc	r19, r1
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	3e bf       	out	0x3e, r19	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	2d bf       	out	0x3d, r18	; 61
     640:	8d b7       	in	r24, 0x3d	; 61
     642:	9e b7       	in	r25, 0x3e	; 62
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	28 e1       	ldi	r18, 0x18	; 24
     648:	fe 01       	movw	r30, r28
     64a:	3b 96       	adiw	r30, 0x0b	; 11
     64c:	dc 01       	movw	r26, r24
     64e:	01 90       	ld	r0, Z+
     650:	0d 92       	st	X+, r0
     652:	2a 95       	dec	r18
     654:	e1 f7       	brne	.-8      	; 0x64e <HandleEspCommand+0x148>
     656:	f1 de       	rcall	.-542    	; 0x43a <HandleCommandServerPlayerStatusUpdate>
     658:	8d b7       	in	r24, 0x3d	; 61
     65a:	9e b7       	in	r25, 0x3e	; 62
     65c:	4a 96       	adiw	r24, 0x1a	; 26
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
		break;
     668:	3b c0       	rjmp	.+118    	; 0x6e0 <HandleEspCommand+0x1da>
	case ESP_COMMAND_BALL_STATUS_UPDATE:
		printf("Handle Ball Command (not implemented)\r\n");
     66a:	8f e5       	ldi	r24, 0x5F	; 95
     66c:	98 e0       	ldi	r25, 0x08	; 8
     66e:	0e 94 39 37 	call	0x6e72	; 0x6e72 <puts>
		break;
     672:	36 c0       	rjmp	.+108    	; 0x6e0 <HandleEspCommand+0x1da>
	case ESP_COMMAND_INITIALIZE_PLAYERS:
		HandleInitializePlayersCommand(command, p_game);
     674:	8c a1       	ldd	r24, Y+36	; 0x24
     676:	8f 93       	push	r24
     678:	8b a1       	ldd	r24, Y+35	; 0x23
     67a:	8f 93       	push	r24
     67c:	ed b7       	in	r30, 0x3d	; 61
     67e:	fe b7       	in	r31, 0x3e	; 62
     680:	78 97       	sbiw	r30, 0x18	; 24
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	fe bf       	out	0x3e, r31	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	ed bf       	out	0x3d, r30	; 61
     68c:	8d b7       	in	r24, 0x3d	; 61
     68e:	9e b7       	in	r25, 0x3e	; 62
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	28 e1       	ldi	r18, 0x18	; 24
     694:	fe 01       	movw	r30, r28
     696:	3b 96       	adiw	r30, 0x0b	; 11
     698:	dc 01       	movw	r26, r24
     69a:	01 90       	ld	r0, Z+
     69c:	0d 92       	st	X+, r0
     69e:	2a 95       	dec	r18
     6a0:	e1 f7       	brne	.-8      	; 0x69a <HandleEspCommand+0x194>
     6a2:	89 de       	rcall	.-750    	; 0x3b6 <HandleInitializePlayersCommand>
     6a4:	2d b7       	in	r18, 0x3d	; 61
     6a6:	3e b7       	in	r19, 0x3e	; 62
     6a8:	26 5e       	subi	r18, 0xE6	; 230
     6aa:	3f 4f       	sbci	r19, 0xFF	; 255
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	f8 94       	cli
     6b0:	de bf       	out	0x3e, r29	; 62
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	cd bf       	out	0x3d, r28	; 61
		break;
     6b6:	14 c0       	rjmp	.+40     	; 0x6e0 <HandleEspCommand+0x1da>
	default:
		printf("Unknown command ID %d\r\n", (int)type);
     6b8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ba:	88 2f       	mov	r24, r24
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	29 2f       	mov	r18, r25
     6c0:	2f 93       	push	r18
     6c2:	8f 93       	push	r24
     6c4:	86 e8       	ldi	r24, 0x86	; 134
     6c6:	98 e0       	ldi	r25, 0x08	; 8
     6c8:	89 2f       	mov	r24, r25
     6ca:	8f 93       	push	r24
     6cc:	86 e8       	ldi	r24, 0x86	; 134
     6ce:	98 e0       	ldi	r25, 0x08	; 8
     6d0:	8f 93       	push	r24
     6d2:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <printf>
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
		break;
     6de:	00 00       	nop
	}
}
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <ESPCH_HandleCommandsTask>:

void ESPCH_HandleCommandsTask(void *pvParameters)
{
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	a2 97       	sbiw	r28, 0x22	; 34
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	f8 94       	cli
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	0f be       	out	0x3f, r0	; 63
     702:	cd bf       	out	0x3d, r28	; 61
     704:	9a a3       	std	Y+34, r25	; 0x22
     706:	89 a3       	std	Y+33, r24	; 0x21
	TickType_t xLastWakeTime= xTaskGetTickCount();
     708:	0e 94 4d 22 	call	0x449a	; 0x449a <xTaskGetTickCount>
     70c:	98 87       	std	Y+8, r25	; 0x08
     70e:	8f 83       	std	Y+7, r24	; 0x07
	const TickType_t xFrequency = 10;
     710:	8a e0       	ldi	r24, 0x0A	; 10
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	9a 83       	std	Y+2, r25	; 0x02
     716:	89 83       	std	Y+1, r24	; 0x01
	 
	ESPCH_TaskParams* taskParams = ((ESPCH_TaskParams*)pvParameters);
     718:	89 a1       	ldd	r24, Y+33	; 0x21
     71a:	9a a1       	ldd	r25, Y+34	; 0x22
     71c:	9c 83       	std	Y+4, r25	; 0x04
     71e:	8b 83       	std	Y+3, r24	; 0x03
	xQueueHandle espCommandQueueHndl = taskParams->espCommandQueueHandle;
     720:	8b 81       	ldd	r24, Y+3	; 0x03
     722:	9c 81       	ldd	r25, Y+4	; 0x04
     724:	fc 01       	movw	r30, r24
     726:	82 81       	ldd	r24, Z+2	; 0x02
     728:	93 81       	ldd	r25, Z+3	; 0x03
     72a:	9e 83       	std	Y+6, r25	; 0x06
     72c:	8d 83       	std	Y+5, r24	; 0x05
	

	while (1)
	{
		ESP_Command rxedCommand;
		if (xQueueReceive(espCommandQueueHndl, &rxedCommand, (portTickType)10) == pdTRUE)
     72e:	9e 01       	movw	r18, r28
     730:	27 5f       	subi	r18, 0xF7	; 247
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	8d 81       	ldd	r24, Y+5	; 0x05
     736:	9e 81       	ldd	r25, Y+6	; 0x06
     738:	4a e0       	ldi	r20, 0x0A	; 10
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	b9 01       	movw	r22, r18
     73e:	0e 94 2b 18 	call	0x3056	; 0x3056 <xQueueReceive>
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	21 f5       	brne	.+72     	; 0x78e <ESPCH_HandleCommandsTask+0x9e>
		{
			//Command has been received from queue
			HandleEspCommand(rxedCommand, taskParams->game);
     746:	8b 81       	ldd	r24, Y+3	; 0x03
     748:	9c 81       	ldd	r25, Y+4	; 0x04
     74a:	fc 01       	movw	r30, r24
     74c:	80 81       	ld	r24, Z
     74e:	91 81       	ldd	r25, Z+1	; 0x01
     750:	29 2f       	mov	r18, r25
     752:	2f 93       	push	r18
     754:	8f 93       	push	r24
     756:	8d b7       	in	r24, 0x3d	; 61
     758:	9e b7       	in	r25, 0x3e	; 62
     75a:	48 97       	sbiw	r24, 0x18	; 24
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	9e bf       	out	0x3e, r25	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	8d bf       	out	0x3d, r24	; 61
     766:	8d b7       	in	r24, 0x3d	; 61
     768:	9e b7       	in	r25, 0x3e	; 62
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	28 e1       	ldi	r18, 0x18	; 24
     76e:	fe 01       	movw	r30, r28
     770:	39 96       	adiw	r30, 0x09	; 9
     772:	dc 01       	movw	r26, r24
     774:	01 90       	ld	r0, Z+
     776:	0d 92       	st	X+, r0
     778:	2a 95       	dec	r18
     77a:	e1 f7       	brne	.-8      	; 0x774 <ESPCH_HandleCommandsTask+0x84>
     77c:	c4 de       	rcall	.-632    	; 0x506 <HandleEspCommand>
     77e:	ed b7       	in	r30, 0x3d	; 61
     780:	fe b7       	in	r31, 0x3e	; 62
     782:	7a 96       	adiw	r30, 0x1a	; 26
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
		}
		
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
     78e:	29 81       	ldd	r18, Y+1	; 0x01
     790:	3a 81       	ldd	r19, Y+2	; 0x02
     792:	ce 01       	movw	r24, r28
     794:	07 96       	adiw	r24, 0x07	; 7
     796:	b9 01       	movw	r22, r18
     798:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <xTaskDelayUntil>
	}
     79c:	c8 cf       	rjmp	.-112    	; 0x72e <ESPCH_HandleCommandsTask+0x3e>

0000079e <ECTGCP_ToMoveServerPlayerParams>:
 *  Author: victo
 */ 
#include "esp_command_to_game_command_params.h"

void ECTGCP_ToMoveServerPlayerParams(ESP_Command cmd, Game* p_game, MSPC_MoveServerPlayerCommandParameters mspcp[])
{
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	62 97       	sbiw	r28, 0x12	; 18
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
	uint16_t playerNXPosition[GAME_NO_OF_PLAYERS];
	uint16_t playerNYPosition[GAME_NO_OF_PLAYERS];
	
	playerNXPosition[0] =  cmd.commandData[1] << 8 | cmd.commandData[2];
     7b2:	89 8d       	ldd	r24, Y+25	; 0x19
     7b4:	88 2f       	mov	r24, r24
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	38 2f       	mov	r19, r24
     7ba:	22 27       	eor	r18, r18
     7bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     7be:	88 2f       	mov	r24, r24
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	82 2b       	or	r24, r18
     7c4:	93 2b       	or	r25, r19
     7c6:	9c 83       	std	Y+4, r25	; 0x04
     7c8:	8b 83       	std	Y+3, r24	; 0x03
	playerNYPosition[0] =  cmd.commandData[3] << 8 | cmd.commandData[4];
     7ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7cc:	88 2f       	mov	r24, r24
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	38 2f       	mov	r19, r24
     7d2:	22 27       	eor	r18, r18
     7d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7d6:	88 2f       	mov	r24, r24
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	82 2b       	or	r24, r18
     7dc:	93 2b       	or	r25, r19
     7de:	9c 87       	std	Y+12, r25	; 0x0c
     7e0:	8b 87       	std	Y+11, r24	; 0x0b
	playerNXPosition[1] =  cmd.commandData[5] << 8 | cmd.commandData[6];
     7e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     7e4:	88 2f       	mov	r24, r24
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	38 2f       	mov	r19, r24
     7ea:	22 27       	eor	r18, r18
     7ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
     7ee:	88 2f       	mov	r24, r24
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	82 2b       	or	r24, r18
     7f4:	93 2b       	or	r25, r19
     7f6:	9e 83       	std	Y+6, r25	; 0x06
     7f8:	8d 83       	std	Y+5, r24	; 0x05
	playerNYPosition[1] =  cmd.commandData[7] << 8 | cmd.commandData[8];
     7fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7fc:	88 2f       	mov	r24, r24
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	38 2f       	mov	r19, r24
     802:	22 27       	eor	r18, r18
     804:	88 a1       	ldd	r24, Y+32	; 0x20
     806:	88 2f       	mov	r24, r24
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	82 2b       	or	r24, r18
     80c:	93 2b       	or	r25, r19
     80e:	9e 87       	std	Y+14, r25	; 0x0e
     810:	8d 87       	std	Y+13, r24	; 0x0d
	playerNXPosition[2] =  cmd.commandData[9] << 8 | cmd.commandData[10];
     812:	89 a1       	ldd	r24, Y+33	; 0x21
     814:	88 2f       	mov	r24, r24
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	38 2f       	mov	r19, r24
     81a:	22 27       	eor	r18, r18
     81c:	8a a1       	ldd	r24, Y+34	; 0x22
     81e:	88 2f       	mov	r24, r24
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	82 2b       	or	r24, r18
     824:	93 2b       	or	r25, r19
     826:	98 87       	std	Y+8, r25	; 0x08
     828:	8f 83       	std	Y+7, r24	; 0x07
	playerNYPosition[2] =  cmd.commandData[11] << 8 | cmd.commandData[12];
     82a:	8b a1       	ldd	r24, Y+35	; 0x23
     82c:	88 2f       	mov	r24, r24
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	38 2f       	mov	r19, r24
     832:	22 27       	eor	r18, r18
     834:	8c a1       	ldd	r24, Y+36	; 0x24
     836:	88 2f       	mov	r24, r24
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	82 2b       	or	r24, r18
     83c:	93 2b       	or	r25, r19
     83e:	98 8b       	std	Y+16, r25	; 0x10
     840:	8f 87       	std	Y+15, r24	; 0x0f
	playerNXPosition[3] =  cmd.commandData[13] << 8 | cmd.commandData[14];
     842:	8d a1       	ldd	r24, Y+37	; 0x25
     844:	88 2f       	mov	r24, r24
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	38 2f       	mov	r19, r24
     84a:	22 27       	eor	r18, r18
     84c:	8e a1       	ldd	r24, Y+38	; 0x26
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	82 2b       	or	r24, r18
     854:	93 2b       	or	r25, r19
     856:	9a 87       	std	Y+10, r25	; 0x0a
     858:	89 87       	std	Y+9, r24	; 0x09
	playerNYPosition[3] =  cmd.commandData[15] << 8 | cmd.commandData[16];
     85a:	8f a1       	ldd	r24, Y+39	; 0x27
     85c:	88 2f       	mov	r24, r24
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	38 2f       	mov	r19, r24
     862:	22 27       	eor	r18, r18
     864:	88 a5       	ldd	r24, Y+40	; 0x28
     866:	88 2f       	mov	r24, r24
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	82 2b       	or	r24, r18
     86c:	93 2b       	or	r25, r19
     86e:	9a 8b       	std	Y+18, r25	; 0x12
     870:	89 8b       	std	Y+17, r24	; 0x11
	for(int i= 0; i< GAME_NO_OF_PLAYERS;i++)
     872:	1a 82       	std	Y+2, r1	; 0x02
     874:	19 82       	std	Y+1, r1	; 0x01
     876:	61 c0       	rjmp	.+194    	; 0x93a <ECTGCP_ToMoveServerPlayerParams+0x19c>
	{
		mspcp[i].playerServerId = i;
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	88 0f       	add	r24, r24
     87e:	99 1f       	adc	r25, r25
     880:	88 0f       	add	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	88 0f       	add	r24, r24
     886:	99 1f       	adc	r25, r25
     888:	2a a9       	ldd	r18, Y+50	; 0x32
     88a:	3b a9       	ldd	r19, Y+51	; 0x33
     88c:	82 0f       	add	r24, r18
     88e:	93 1f       	adc	r25, r19
     890:	29 81       	ldd	r18, Y+1	; 0x01
     892:	3a 81       	ldd	r19, Y+2	; 0x02
     894:	fc 01       	movw	r30, r24
     896:	33 83       	std	Z+3, r19	; 0x03
     898:	22 83       	std	Z+2, r18	; 0x02
		mspcp[i].coordinates.XPosition = playerNXPosition[i];
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	9a 81       	ldd	r25, Y+2	; 0x02
     89e:	88 0f       	add	r24, r24
     8a0:	99 1f       	adc	r25, r25
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	88 0f       	add	r24, r24
     8a8:	99 1f       	adc	r25, r25
     8aa:	2a a9       	ldd	r18, Y+50	; 0x32
     8ac:	3b a9       	ldd	r19, Y+51	; 0x33
     8ae:	82 0f       	add	r24, r18
     8b0:	93 1f       	adc	r25, r19
     8b2:	29 81       	ldd	r18, Y+1	; 0x01
     8b4:	3a 81       	ldd	r19, Y+2	; 0x02
     8b6:	22 0f       	add	r18, r18
     8b8:	33 1f       	adc	r19, r19
     8ba:	ae 01       	movw	r20, r28
     8bc:	4f 5f       	subi	r20, 0xFF	; 255
     8be:	5f 4f       	sbci	r21, 0xFF	; 255
     8c0:	24 0f       	add	r18, r20
     8c2:	35 1f       	adc	r19, r21
     8c4:	2e 5f       	subi	r18, 0xFE	; 254
     8c6:	3f 4f       	sbci	r19, 0xFF	; 255
     8c8:	f9 01       	movw	r30, r18
     8ca:	20 81       	ld	r18, Z
     8cc:	31 81       	ldd	r19, Z+1	; 0x01
     8ce:	fc 01       	movw	r30, r24
     8d0:	35 83       	std	Z+5, r19	; 0x05
     8d2:	24 83       	std	Z+4, r18	; 0x04
		mspcp[i].coordinates.YPosition = playerNYPosition[i];
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	9a 81       	ldd	r25, Y+2	; 0x02
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	2a a9       	ldd	r18, Y+50	; 0x32
     8e6:	3b a9       	ldd	r19, Y+51	; 0x33
     8e8:	82 0f       	add	r24, r18
     8ea:	93 1f       	adc	r25, r19
     8ec:	29 81       	ldd	r18, Y+1	; 0x01
     8ee:	3a 81       	ldd	r19, Y+2	; 0x02
     8f0:	22 0f       	add	r18, r18
     8f2:	33 1f       	adc	r19, r19
     8f4:	ae 01       	movw	r20, r28
     8f6:	4f 5f       	subi	r20, 0xFF	; 255
     8f8:	5f 4f       	sbci	r21, 0xFF	; 255
     8fa:	24 0f       	add	r18, r20
     8fc:	35 1f       	adc	r19, r21
     8fe:	26 5f       	subi	r18, 0xF6	; 246
     900:	3f 4f       	sbci	r19, 0xFF	; 255
     902:	f9 01       	movw	r30, r18
     904:	20 81       	ld	r18, Z
     906:	31 81       	ldd	r19, Z+1	; 0x01
     908:	fc 01       	movw	r30, r24
     90a:	37 83       	std	Z+7, r19	; 0x07
     90c:	26 83       	std	Z+6, r18	; 0x06
		mspcp[i].p_game = p_game;
     90e:	89 81       	ldd	r24, Y+1	; 0x01
     910:	9a 81       	ldd	r25, Y+2	; 0x02
     912:	88 0f       	add	r24, r24
     914:	99 1f       	adc	r25, r25
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	88 0f       	add	r24, r24
     91c:	99 1f       	adc	r25, r25
     91e:	2a a9       	ldd	r18, Y+50	; 0x32
     920:	3b a9       	ldd	r19, Y+51	; 0x33
     922:	82 0f       	add	r24, r18
     924:	93 1f       	adc	r25, r19
     926:	28 a9       	ldd	r18, Y+48	; 0x30
     928:	39 a9       	ldd	r19, Y+49	; 0x31
     92a:	fc 01       	movw	r30, r24
     92c:	31 83       	std	Z+1, r19	; 0x01
     92e:	20 83       	st	Z, r18
	playerNYPosition[1] =  cmd.commandData[7] << 8 | cmd.commandData[8];
	playerNXPosition[2] =  cmd.commandData[9] << 8 | cmd.commandData[10];
	playerNYPosition[2] =  cmd.commandData[11] << 8 | cmd.commandData[12];
	playerNXPosition[3] =  cmd.commandData[13] << 8 | cmd.commandData[14];
	playerNYPosition[3] =  cmd.commandData[15] << 8 | cmd.commandData[16];
	for(int i= 0; i< GAME_NO_OF_PLAYERS;i++)
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	9a 81       	ldd	r25, Y+2	; 0x02
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	9a 83       	std	Y+2, r25	; 0x02
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	89 81       	ldd	r24, Y+1	; 0x01
     93c:	9a 81       	ldd	r25, Y+2	; 0x02
     93e:	04 97       	sbiw	r24, 0x04	; 4
     940:	0c f4       	brge	.+2      	; 0x944 <ECTGCP_ToMoveServerPlayerParams+0x1a6>
     942:	9a cf       	rjmp	.-204    	; 0x878 <ECTGCP_ToMoveServerPlayerParams+0xda>
		mspcp[i].playerServerId = i;
		mspcp[i].coordinates.XPosition = playerNXPosition[i];
		mspcp[i].coordinates.YPosition = playerNYPosition[i];
		mspcp[i].p_game = p_game;
	}
}
     944:	00 00       	nop
     946:	62 96       	adiw	r28, 0x12	; 18
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	de bf       	out	0x3e, r29	; 62
     94e:	0f be       	out	0x3f, r0	; 63
     950:	cd bf       	out	0x3d, r28	; 61
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <ECTGCP_ToInitializePlayersParams>:

IPC_InitializePlayerCommandParameters ECTGCP_ToInitializePlayersParams(ESP_Command cmd, Game* p_game)
{
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	00 d0       	rcall	.+0      	; 0x95e <ECTGCP_ToInitializePlayersParams+0x6>
     95e:	1f 92       	push	r1
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
	IPC_InitializePlayerCommandParameters params;
	
	params.p_game = p_game;
     964:	8a a1       	ldd	r24, Y+34	; 0x22
     966:	9b a1       	ldd	r25, Y+35	; 0x23
     968:	9a 83       	std	Y+2, r25	; 0x02
     96a:	89 83       	std	Y+1, r24	; 0x01
	params.localPlayerServerAssignedId = cmd.commandData[1];
     96c:	8b 85       	ldd	r24, Y+11	; 0x0b
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	9c 83       	std	Y+4, r25	; 0x04
     974:	8b 83       	std	Y+3, r24	; 0x03
	
	return params;
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	9a 81       	ldd	r25, Y+2	; 0x02
     97a:	ab 81       	ldd	r26, Y+3	; 0x03
     97c:	bc 81       	ldd	r27, Y+4	; 0x04
}
     97e:	bc 01       	movw	r22, r24
     980:	cd 01       	movw	r24, r26
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <WriteCommand>:
}

void TFT_DisplayOff()
{
    WriteCommand(0x28);
}
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	1f 92       	push	r1
     996:	1f 92       	push	r1
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
     99c:	9a 83       	std	Y+2, r25	; 0x02
     99e:	89 83       	std	Y+1, r24	; 0x01
     9a0:	88 e2       	ldi	r24, 0x28	; 40
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	29 81       	ldd	r18, Y+1	; 0x01
     9a6:	fc 01       	movw	r30, r24
     9a8:	20 83       	st	Z, r18
     9aa:	8b e2       	ldi	r24, 0x2B	; 43
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	2b e2       	ldi	r18, 0x2B	; 43
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	f9 01       	movw	r30, r18
     9b4:	20 81       	ld	r18, Z
     9b6:	2f 77       	andi	r18, 0x7F	; 127
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
     9bc:	84 e3       	ldi	r24, 0x34	; 52
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	24 e3       	ldi	r18, 0x34	; 52
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	f9 01       	movw	r30, r18
     9c6:	20 81       	ld	r18, Z
     9c8:	2d 7f       	andi	r18, 0xFD	; 253
     9ca:	fc 01       	movw	r30, r24
     9cc:	20 83       	st	Z, r18
     9ce:	84 e3       	ldi	r24, 0x34	; 52
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	24 e3       	ldi	r18, 0x34	; 52
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	f9 01       	movw	r30, r18
     9d8:	20 81       	ld	r18, Z
     9da:	2b 7f       	andi	r18, 0xFB	; 251
     9dc:	fc 01       	movw	r30, r24
     9de:	20 83       	st	Z, r18
     9e0:	00 00       	nop
     9e2:	84 e3       	ldi	r24, 0x34	; 52
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	24 e3       	ldi	r18, 0x34	; 52
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	f9 01       	movw	r30, r18
     9ec:	20 81       	ld	r18, Z
     9ee:	24 60       	ori	r18, 0x04	; 4
     9f0:	fc 01       	movw	r30, r24
     9f2:	20 83       	st	Z, r18
     9f4:	00 00       	nop
     9f6:	00 00       	nop
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <SleepOut>:
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
     a0a:	81 e1       	ldi	r24, 0x11	; 17
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	c0 df       	rcall	.-128    	; 0x990 <WriteCommand>
     a10:	00 00       	nop
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <WriteData>:
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	1f 92       	push	r1
     a1e:	1f 92       	push	r1
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	9a 83       	std	Y+2, r25	; 0x02
     a26:	89 83       	std	Y+1, r24	; 0x01
     a28:	82 e2       	ldi	r24, 0x22	; 34
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	29 81       	ldd	r18, Y+1	; 0x01
     a2e:	3a 81       	ldd	r19, Y+2	; 0x02
     a30:	23 2f       	mov	r18, r19
     a32:	33 27       	eor	r19, r19
     a34:	fc 01       	movw	r30, r24
     a36:	20 83       	st	Z, r18
     a38:	88 e2       	ldi	r24, 0x28	; 40
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	29 81       	ldd	r18, Y+1	; 0x01
     a3e:	fc 01       	movw	r30, r24
     a40:	20 83       	st	Z, r18
     a42:	8b e2       	ldi	r24, 0x2B	; 43
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	2b e2       	ldi	r18, 0x2B	; 43
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	f9 01       	movw	r30, r18
     a4c:	20 81       	ld	r18, Z
     a4e:	20 68       	ori	r18, 0x80	; 128
     a50:	fc 01       	movw	r30, r24
     a52:	20 83       	st	Z, r18
     a54:	84 e3       	ldi	r24, 0x34	; 52
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	24 e3       	ldi	r18, 0x34	; 52
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	f9 01       	movw	r30, r18
     a5e:	20 81       	ld	r18, Z
     a60:	2d 7f       	andi	r18, 0xFD	; 253
     a62:	fc 01       	movw	r30, r24
     a64:	20 83       	st	Z, r18
     a66:	84 e3       	ldi	r24, 0x34	; 52
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	24 e3       	ldi	r18, 0x34	; 52
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	f9 01       	movw	r30, r18
     a70:	20 81       	ld	r18, Z
     a72:	2b 7f       	andi	r18, 0xFB	; 251
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
     a78:	00 00       	nop
     a7a:	84 e3       	ldi	r24, 0x34	; 52
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	24 e3       	ldi	r18, 0x34	; 52
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	f9 01       	movw	r30, r18
     a84:	20 81       	ld	r18, Z
     a86:	24 60       	ori	r18, 0x04	; 4
     a88:	fc 01       	movw	r30, r24
     a8a:	20 83       	st	Z, r18
     a8c:	00 00       	nop
     a8e:	00 00       	nop
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	08 95       	ret

00000a9a <MemoryAccessControl>:
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	1f 92       	push	r1
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	89 83       	std	Y+1, r24	; 0x01
     aa6:	86 e3       	ldi	r24, 0x36	; 54
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	72 df       	rcall	.-284    	; 0x990 <WriteCommand>
     aac:	89 81       	ldd	r24, Y+1	; 0x01
     aae:	88 2f       	mov	r24, r24
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	b2 df       	rcall	.-156    	; 0xa18 <WriteData>
     ab4:	00 00       	nop
     ab6:	0f 90       	pop	r0
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <InterfacePixelFormat>:
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	1f 92       	push	r1
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	8a e3       	ldi	r24, 0x3A	; 58
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	60 df       	rcall	.-320    	; 0x990 <WriteCommand>
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	88 2f       	mov	r24, r24
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	a0 df       	rcall	.-192    	; 0xa18 <WriteData>
     ad8:	00 00       	nop
     ada:	0f 90       	pop	r0
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <MemoryWrite>:
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
     aea:	8c e2       	ldi	r24, 0x2C	; 44
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	50 df       	rcall	.-352    	; 0x990 <WriteCommand>
     af0:	00 00       	nop
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <TFT_DisplayInit>:
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	6c 97       	sbiw	r28, 0x1c	; 28
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	83 e3       	ldi	r24, 0x33	; 51
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	23 e3       	ldi	r18, 0x33	; 51
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	f9 01       	movw	r30, r18
     b16:	20 81       	ld	r18, Z
     b18:	27 60       	ori	r18, 0x07	; 7
     b1a:	fc 01       	movw	r30, r24
     b1c:	20 83       	st	Z, r18
     b1e:	8a e2       	ldi	r24, 0x2A	; 42
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	2a e2       	ldi	r18, 0x2A	; 42
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	f9 01       	movw	r30, r18
     b28:	20 81       	ld	r18, Z
     b2a:	20 68       	ori	r18, 0x80	; 128
     b2c:	fc 01       	movw	r30, r24
     b2e:	20 83       	st	Z, r18
     b30:	81 e2       	ldi	r24, 0x21	; 33
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	fc 01       	movw	r30, r24
     b36:	80 81       	ld	r24, Z
     b38:	81 e2       	ldi	r24, 0x21	; 33
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	2f ef       	ldi	r18, 0xFF	; 255
     b3e:	fc 01       	movw	r30, r24
     b40:	20 83       	st	Z, r18
     b42:	87 e2       	ldi	r24, 0x27	; 39
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	fc 01       	movw	r30, r24
     b48:	80 81       	ld	r24, Z
     b4a:	87 e2       	ldi	r24, 0x27	; 39
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	2f ef       	ldi	r18, 0xFF	; 255
     b50:	fc 01       	movw	r30, r24
     b52:	20 83       	st	Z, r18
     b54:	84 e3       	ldi	r24, 0x34	; 52
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	24 e3       	ldi	r18, 0x34	; 52
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	f9 01       	movw	r30, r18
     b5e:	20 81       	ld	r18, Z
     b60:	27 60       	ori	r18, 0x07	; 7
     b62:	fc 01       	movw	r30, r24
     b64:	20 83       	st	Z, r18
     b66:	8b e2       	ldi	r24, 0x2B	; 43
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	2b e2       	ldi	r18, 0x2B	; 43
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	f9 01       	movw	r30, r18
     b70:	20 81       	ld	r18, Z
     b72:	20 68       	ori	r18, 0x80	; 128
     b74:	fc 01       	movw	r30, r24
     b76:	20 83       	st	Z, r18
     b78:	84 e3       	ldi	r24, 0x34	; 52
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	24 e3       	ldi	r18, 0x34	; 52
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	f9 01       	movw	r30, r18
     b82:	20 81       	ld	r18, Z
     b84:	2e 7f       	andi	r18, 0xFE	; 254
     b86:	fc 01       	movw	r30, r24
     b88:	20 83       	st	Z, r18
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	aa ef       	ldi	r26, 0xFA	; 250
     b90:	b3 e4       	ldi	r27, 0x43	; 67
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	9a 83       	std	Y+2, r25	; 0x02
     b96:	ab 83       	std	Y+3, r26	; 0x03
     b98:	bc 83       	std	Y+4, r27	; 0x04
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a e7       	ldi	r20, 0x7A	; 122
     ba0:	55 e4       	ldi	r21, 0x45	; 69
     ba2:	69 81       	ldd	r22, Y+1	; 0x01
     ba4:	7a 81       	ldd	r23, Y+2	; 0x02
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	9c 81       	ldd	r25, Y+4	; 0x04
     baa:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	8b 8b       	std	Y+19, r24	; 0x13
     bb4:	9c 8b       	std	Y+20, r25	; 0x14
     bb6:	ad 8b       	std	Y+21, r26	; 0x15
     bb8:	be 8b       	std	Y+22, r27	; 0x16
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	6b 89       	ldd	r22, Y+19	; 0x13
     bc4:	7c 89       	ldd	r23, Y+20	; 0x14
     bc6:	8d 89       	ldd	r24, Y+21	; 0x15
     bc8:	9e 89       	ldd	r25, Y+22	; 0x16
     bca:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <__cmpsf2>
     bce:	88 23       	and	r24, r24
     bd0:	2c f4       	brge	.+10     	; 0xbdc <TFT_DisplayInit+0xe4>
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	98 8f       	std	Y+24, r25	; 0x18
     bd8:	8f 8b       	std	Y+23, r24	; 0x17
     bda:	3f c0       	rjmp	.+126    	; 0xc5a <TFT_DisplayInit+0x162>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	6b 89       	ldd	r22, Y+19	; 0x13
     be6:	7c 89       	ldd	r23, Y+20	; 0x14
     be8:	8d 89       	ldd	r24, Y+21	; 0x15
     bea:	9e 89       	ldd	r25, Y+22	; 0x16
     bec:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
     bf0:	18 16       	cp	r1, r24
     bf2:	4c f5       	brge	.+82     	; 0xc46 <TFT_DisplayInit+0x14e>
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	69 81       	ldd	r22, Y+1	; 0x01
     bfe:	7a 81       	ldd	r23, Y+2	; 0x02
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	bc 01       	movw	r22, r24
     c0e:	cd 01       	movw	r24, r26
     c10:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	98 8f       	std	Y+24, r25	; 0x18
     c1a:	8f 8b       	std	Y+23, r24	; 0x17
     c1c:	0f c0       	rjmp	.+30     	; 0xc3c <TFT_DisplayInit+0x144>
     c1e:	80 e9       	ldi	r24, 0x90	; 144
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	9a 8f       	std	Y+26, r25	; 0x1a
     c24:	89 8f       	std	Y+25, r24	; 0x19
     c26:	89 8d       	ldd	r24, Y+25	; 0x19
     c28:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <TFT_DisplayInit+0x132>
     c2e:	9a 8f       	std	Y+26, r25	; 0x1a
     c30:	89 8f       	std	Y+25, r24	; 0x19
     c32:	8f 89       	ldd	r24, Y+23	; 0x17
     c34:	98 8d       	ldd	r25, Y+24	; 0x18
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	98 8f       	std	Y+24, r25	; 0x18
     c3a:	8f 8b       	std	Y+23, r24	; 0x17
     c3c:	8f 89       	ldd	r24, Y+23	; 0x17
     c3e:	98 8d       	ldd	r25, Y+24	; 0x18
     c40:	89 2b       	or	r24, r25
     c42:	69 f7       	brne	.-38     	; 0xc1e <TFT_DisplayInit+0x126>
     c44:	14 c0       	rjmp	.+40     	; 0xc6e <TFT_DisplayInit+0x176>
     c46:	6b 89       	ldd	r22, Y+19	; 0x13
     c48:	7c 89       	ldd	r23, Y+20	; 0x14
     c4a:	8d 89       	ldd	r24, Y+21	; 0x15
     c4c:	9e 89       	ldd	r25, Y+22	; 0x16
     c4e:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	98 8f       	std	Y+24, r25	; 0x18
     c58:	8f 8b       	std	Y+23, r24	; 0x17
     c5a:	8f 89       	ldd	r24, Y+23	; 0x17
     c5c:	98 8d       	ldd	r25, Y+24	; 0x18
     c5e:	9c 8f       	std	Y+28, r25	; 0x1c
     c60:	8b 8f       	std	Y+27, r24	; 0x1b
     c62:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c64:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <TFT_DisplayInit+0x16e>
     c6a:	9c 8f       	std	Y+28, r25	; 0x1c
     c6c:	8b 8f       	std	Y+27, r24	; 0x1b
     c6e:	84 e3       	ldi	r24, 0x34	; 52
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	24 e3       	ldi	r18, 0x34	; 52
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	f9 01       	movw	r30, r18
     c78:	20 81       	ld	r18, Z
     c7a:	21 60       	ori	r18, 0x01	; 1
     c7c:	fc 01       	movw	r30, r24
     c7e:	20 83       	st	Z, r18
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	a2 e0       	ldi	r26, 0x02	; 2
     c86:	b3 e4       	ldi	r27, 0x43	; 67
     c88:	8d 83       	std	Y+5, r24	; 0x05
     c8a:	9e 83       	std	Y+6, r25	; 0x06
     c8c:	af 83       	std	Y+7, r26	; 0x07
     c8e:	b8 87       	std	Y+8, r27	; 0x08
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	4a e7       	ldi	r20, 0x7A	; 122
     c96:	55 e4       	ldi	r21, 0x45	; 69
     c98:	6d 81       	ldd	r22, Y+5	; 0x05
     c9a:	7e 81       	ldd	r23, Y+6	; 0x06
     c9c:	8f 81       	ldd	r24, Y+7	; 0x07
     c9e:	98 85       	ldd	r25, Y+8	; 0x08
     ca0:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	89 87       	std	Y+9, r24	; 0x09
     caa:	9a 87       	std	Y+10, r25	; 0x0a
     cac:	ab 87       	std	Y+11, r26	; 0x0b
     cae:	bc 87       	std	Y+12, r27	; 0x0c
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e8       	ldi	r20, 0x80	; 128
     cb6:	5f e3       	ldi	r21, 0x3F	; 63
     cb8:	69 85       	ldd	r22, Y+9	; 0x09
     cba:	7a 85       	ldd	r23, Y+10	; 0x0a
     cbc:	8b 85       	ldd	r24, Y+11	; 0x0b
     cbe:	9c 85       	ldd	r25, Y+12	; 0x0c
     cc0:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <__cmpsf2>
     cc4:	88 23       	and	r24, r24
     cc6:	2c f4       	brge	.+10     	; 0xcd2 <TFT_DisplayInit+0x1da>
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	9e 87       	std	Y+14, r25	; 0x0e
     cce:	8d 87       	std	Y+13, r24	; 0x0d
     cd0:	3f c0       	rjmp	.+126    	; 0xd50 <TFT_DisplayInit+0x258>
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	3f ef       	ldi	r19, 0xFF	; 255
     cd6:	4f e7       	ldi	r20, 0x7F	; 127
     cd8:	57 e4       	ldi	r21, 0x47	; 71
     cda:	69 85       	ldd	r22, Y+9	; 0x09
     cdc:	7a 85       	ldd	r23, Y+10	; 0x0a
     cde:	8b 85       	ldd	r24, Y+11	; 0x0b
     ce0:	9c 85       	ldd	r25, Y+12	; 0x0c
     ce2:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
     ce6:	18 16       	cp	r1, r24
     ce8:	4c f5       	brge	.+82     	; 0xd3c <TFT_DisplayInit+0x244>
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	40 e2       	ldi	r20, 0x20	; 32
     cf0:	51 e4       	ldi	r21, 0x41	; 65
     cf2:	6d 81       	ldd	r22, Y+5	; 0x05
     cf4:	7e 81       	ldd	r23, Y+6	; 0x06
     cf6:	8f 81       	ldd	r24, Y+7	; 0x07
     cf8:	98 85       	ldd	r25, Y+8	; 0x08
     cfa:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	bc 01       	movw	r22, r24
     d04:	cd 01       	movw	r24, r26
     d06:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	9e 87       	std	Y+14, r25	; 0x0e
     d10:	8d 87       	std	Y+13, r24	; 0x0d
     d12:	0f c0       	rjmp	.+30     	; 0xd32 <TFT_DisplayInit+0x23a>
     d14:	80 e9       	ldi	r24, 0x90	; 144
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	98 8b       	std	Y+16, r25	; 0x10
     d1a:	8f 87       	std	Y+15, r24	; 0x0f
     d1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d1e:	98 89       	ldd	r25, Y+16	; 0x10
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <TFT_DisplayInit+0x228>
     d24:	98 8b       	std	Y+16, r25	; 0x10
     d26:	8f 87       	std	Y+15, r24	; 0x0f
     d28:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	9e 87       	std	Y+14, r25	; 0x0e
     d30:	8d 87       	std	Y+13, r24	; 0x0d
     d32:	8d 85       	ldd	r24, Y+13	; 0x0d
     d34:	9e 85       	ldd	r25, Y+14	; 0x0e
     d36:	89 2b       	or	r24, r25
     d38:	69 f7       	brne	.-38     	; 0xd14 <TFT_DisplayInit+0x21c>
     d3a:	14 c0       	rjmp	.+40     	; 0xd64 <TFT_DisplayInit+0x26c>
     d3c:	69 85       	ldd	r22, Y+9	; 0x09
     d3e:	7a 85       	ldd	r23, Y+10	; 0x0a
     d40:	8b 85       	ldd	r24, Y+11	; 0x0b
     d42:	9c 85       	ldd	r25, Y+12	; 0x0c
     d44:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 87       	std	Y+14, r25	; 0x0e
     d4e:	8d 87       	std	Y+13, r24	; 0x0d
     d50:	8d 85       	ldd	r24, Y+13	; 0x0d
     d52:	9e 85       	ldd	r25, Y+14	; 0x0e
     d54:	9a 8b       	std	Y+18, r25	; 0x12
     d56:	89 8b       	std	Y+17, r24	; 0x11
     d58:	89 89       	ldd	r24, Y+17	; 0x11
     d5a:	9a 89       	ldd	r25, Y+18	; 0x12
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <TFT_DisplayInit+0x264>
     d60:	9a 8b       	std	Y+18, r25	; 0x12
     d62:	89 8b       	std	Y+17, r24	; 0x11
     d64:	4e de       	rcall	.-868    	; 0xa02 <SleepOut>
     d66:	32 d1       	rcall	.+612    	; 0xfcc <TFT_DisplayOn>
     d68:	88 e0       	ldi	r24, 0x08	; 8
     d6a:	97 de       	rcall	.-722    	; 0xa9a <MemoryAccessControl>
     d6c:	85 e0       	ldi	r24, 0x05	; 5
     d6e:	a7 de       	rcall	.-690    	; 0xabe <InterfacePixelFormat>
     d70:	00 00       	nop
     d72:	6c 96       	adiw	r28, 0x1c	; 28
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	08 95       	ret

00000d84 <SetColumnAddress>:
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	00 d0       	rcall	.+0      	; 0xd8a <SetColumnAddress+0x6>
     d8a:	1f 92       	push	r1
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	7c 83       	std	Y+4, r23	; 0x04
     d96:	6b 83       	std	Y+3, r22	; 0x03
     d98:	8a e2       	ldi	r24, 0x2A	; 42
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	f9 dd       	rcall	.-1038   	; 0x990 <WriteCommand>
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	89 2f       	mov	r24, r25
     da4:	99 27       	eor	r25, r25
     da6:	38 de       	rcall	.-912    	; 0xa18 <WriteData>
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	35 de       	rcall	.-918    	; 0xa18 <WriteData>
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	9c 81       	ldd	r25, Y+4	; 0x04
     db2:	89 2f       	mov	r24, r25
     db4:	99 27       	eor	r25, r25
     db6:	30 de       	rcall	.-928    	; 0xa18 <WriteData>
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	9c 81       	ldd	r25, Y+4	; 0x04
     dbc:	2d de       	rcall	.-934    	; 0xa18 <WriteData>
     dbe:	00 00       	nop
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	08 95       	ret

00000dce <SetPageAddress>:
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <SetPageAddress+0x6>
     dd4:	1f 92       	push	r1
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	9a 83       	std	Y+2, r25	; 0x02
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	7c 83       	std	Y+4, r23	; 0x04
     de0:	6b 83       	std	Y+3, r22	; 0x03
     de2:	8b e2       	ldi	r24, 0x2B	; 43
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	d4 dd       	rcall	.-1112   	; 0x990 <WriteCommand>
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	9a 81       	ldd	r25, Y+2	; 0x02
     dec:	89 2f       	mov	r24, r25
     dee:	99 27       	eor	r25, r25
     df0:	13 de       	rcall	.-986    	; 0xa18 <WriteData>
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	10 de       	rcall	.-992    	; 0xa18 <WriteData>
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	9c 81       	ldd	r25, Y+4	; 0x04
     dfc:	89 2f       	mov	r24, r25
     dfe:	99 27       	eor	r25, r25
     e00:	0b de       	rcall	.-1002   	; 0xa18 <WriteData>
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	9c 81       	ldd	r25, Y+4	; 0x04
     e06:	08 de       	rcall	.-1008   	; 0xa18 <WriteData>
     e08:	00 00       	nop
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <WritePixel>:
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	27 97       	sbiw	r28, 0x07	; 7
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	7c 83       	std	Y+4, r23	; 0x04
     e32:	6b 83       	std	Y+3, r22	; 0x03
     e34:	2d 83       	std	Y+5, r18	; 0x05
     e36:	3e 83       	std	Y+6, r19	; 0x06
     e38:	4f 83       	std	Y+7, r20	; 0x07
     e3a:	29 81       	ldd	r18, Y+1	; 0x01
     e3c:	3a 81       	ldd	r19, Y+2	; 0x02
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	9a 81       	ldd	r25, Y+2	; 0x02
     e42:	b9 01       	movw	r22, r18
     e44:	c4 df       	rcall	.-120    	; 0xdce <SetPageAddress>
     e46:	2b 81       	ldd	r18, Y+3	; 0x03
     e48:	3c 81       	ldd	r19, Y+4	; 0x04
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	b9 01       	movw	r22, r18
     e50:	99 df       	rcall	.-206    	; 0xd84 <SetColumnAddress>
     e52:	47 de       	rcall	.-882    	; 0xae2 <MemoryWrite>
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	9c 01       	movw	r18, r24
     e5c:	32 2f       	mov	r19, r18
     e5e:	22 27       	eor	r18, r18
     e60:	33 0f       	add	r19, r19
     e62:	33 0f       	add	r19, r19
     e64:	33 0f       	add	r19, r19
     e66:	8e 81       	ldd	r24, Y+6	; 0x06
     e68:	88 2f       	mov	r24, r24
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	82 95       	swap	r24
     e72:	92 95       	swap	r25
     e74:	90 7f       	andi	r25, 0xF0	; 240
     e76:	98 27       	eor	r25, r24
     e78:	80 7f       	andi	r24, 0xF0	; 240
     e7a:	98 27       	eor	r25, r24
     e7c:	28 2b       	or	r18, r24
     e7e:	39 2b       	or	r19, r25
     e80:	8f 81       	ldd	r24, Y+7	; 0x07
     e82:	88 2f       	mov	r24, r24
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	82 2b       	or	r24, r18
     e88:	93 2b       	or	r25, r19
     e8a:	c6 dd       	rcall	.-1140   	; 0xa18 <WriteData>
     e8c:	00 00       	nop
     e8e:	27 96       	adiw	r28, 0x07	; 7
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <WritePixelAtCurrentColumnPageAddress>:
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <WritePixelAtCurrentColumnPageAddress+0x6>
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	69 83       	std	Y+1, r22	; 0x01
     eac:	7a 83       	std	Y+2, r23	; 0x02
     eae:	8b 83       	std	Y+3, r24	; 0x03
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	88 2f       	mov	r24, r24
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	9c 01       	movw	r18, r24
     eb8:	32 2f       	mov	r19, r18
     eba:	22 27       	eor	r18, r18
     ebc:	33 0f       	add	r19, r19
     ebe:	33 0f       	add	r19, r19
     ec0:	33 0f       	add	r19, r19
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	82 95       	swap	r24
     ece:	92 95       	swap	r25
     ed0:	90 7f       	andi	r25, 0xF0	; 240
     ed2:	98 27       	eor	r25, r24
     ed4:	80 7f       	andi	r24, 0xF0	; 240
     ed6:	98 27       	eor	r25, r24
     ed8:	28 2b       	or	r18, r24
     eda:	39 2b       	or	r19, r25
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	88 2f       	mov	r24, r24
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	82 2b       	or	r24, r18
     ee4:	93 2b       	or	r25, r19
     ee6:	98 dd       	rcall	.-1232   	; 0xa18 <WriteData>
     ee8:	00 00       	nop
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <TFT_FillRectangle>:
     ef6:	ef 92       	push	r14
     ef8:	ff 92       	push	r15
     efa:	0f 93       	push	r16
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	2f 97       	sbiw	r28, 0x0f	; 15
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	9e 83       	std	Y+6, r25	; 0x06
     f12:	8d 83       	std	Y+5, r24	; 0x05
     f14:	78 87       	std	Y+8, r23	; 0x08
     f16:	6f 83       	std	Y+7, r22	; 0x07
     f18:	5a 87       	std	Y+10, r21	; 0x0a
     f1a:	49 87       	std	Y+9, r20	; 0x09
     f1c:	3c 87       	std	Y+12, r19	; 0x0c
     f1e:	2b 87       	std	Y+11, r18	; 0x0b
     f20:	ed 86       	std	Y+13, r14	; 0x0d
     f22:	fe 86       	std	Y+14, r15	; 0x0e
     f24:	0f 87       	std	Y+15, r16	; 0x0f
     f26:	2d 81       	ldd	r18, Y+5	; 0x05
     f28:	3e 81       	ldd	r19, Y+6	; 0x06
     f2a:	89 85       	ldd	r24, Y+9	; 0x09
     f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2e:	28 0f       	add	r18, r24
     f30:	39 1f       	adc	r19, r25
     f32:	8d 81       	ldd	r24, Y+5	; 0x05
     f34:	9e 81       	ldd	r25, Y+6	; 0x06
     f36:	b9 01       	movw	r22, r18
     f38:	4a df       	rcall	.-364    	; 0xdce <SetPageAddress>
     f3a:	2f 81       	ldd	r18, Y+7	; 0x07
     f3c:	38 85       	ldd	r19, Y+8	; 0x08
     f3e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f40:	9c 85       	ldd	r25, Y+12	; 0x0c
     f42:	28 0f       	add	r18, r24
     f44:	39 1f       	adc	r19, r25
     f46:	8f 81       	ldd	r24, Y+7	; 0x07
     f48:	98 85       	ldd	r25, Y+8	; 0x08
     f4a:	b9 01       	movw	r22, r18
     f4c:	1b df       	rcall	.-458    	; 0xd84 <SetColumnAddress>
     f4e:	c9 dd       	rcall	.-1134   	; 0xae2 <MemoryWrite>
     f50:	19 82       	std	Y+1, r1	; 0x01
     f52:	1a 82       	std	Y+2, r1	; 0x02
     f54:	1b 82       	std	Y+3, r1	; 0x03
     f56:	1c 82       	std	Y+4, r1	; 0x04
     f58:	11 c0       	rjmp	.+34     	; 0xf7c <TFT_FillRectangle+0x86>
     f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5e:	af 85       	ldd	r26, Y+15	; 0x0f
     f60:	bc 01       	movw	r22, r24
     f62:	8a 2f       	mov	r24, r26
     f64:	9d df       	rcall	.-198    	; 0xea0 <WritePixelAtCurrentColumnPageAddress>
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	ab 81       	ldd	r26, Y+3	; 0x03
     f6c:	bc 81       	ldd	r27, Y+4	; 0x04
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	a1 1d       	adc	r26, r1
     f72:	b1 1d       	adc	r27, r1
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	9a 83       	std	Y+2, r25	; 0x02
     f78:	ab 83       	std	Y+3, r26	; 0x03
     f7a:	bc 83       	std	Y+4, r27	; 0x04
     f7c:	89 85       	ldd	r24, Y+9	; 0x09
     f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	9c 01       	movw	r18, r24
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	8b 85       	ldd	r24, Y+11	; 0x0b
     f8a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	cc 01       	movw	r24, r24
     f90:	a0 e0       	ldi	r26, 0x00	; 0
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	bc 01       	movw	r22, r24
     f96:	cd 01       	movw	r24, r26
     f98:	0e 94 cc 36 	call	0x6d98	; 0x6d98 <__mulsi3>
     f9c:	9b 01       	movw	r18, r22
     f9e:	ac 01       	movw	r20, r24
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	ab 81       	ldd	r26, Y+3	; 0x03
     fa6:	bc 81       	ldd	r27, Y+4	; 0x04
     fa8:	82 17       	cp	r24, r18
     faa:	93 07       	cpc	r25, r19
     fac:	a4 07       	cpc	r26, r20
     fae:	b5 07       	cpc	r27, r21
     fb0:	a0 f2       	brcs	.-88     	; 0xf5a <TFT_FillRectangle+0x64>
     fb2:	00 00       	nop
     fb4:	2f 96       	adiw	r28, 0x0f	; 15
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	08 95       	ret

00000fcc <TFT_DisplayOn>:

void TFT_DisplayOn()
{
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
    WriteCommand(0x29);
     fd4:	89 e2       	ldi	r24, 0x29	; 41
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	db dc       	rcall	.-1610   	; 0x990 <WriteCommand>
}
     fda:	00 00       	nop
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <TFT_DrawVLine>:

void TFT_DrawVLine(unsigned int x, unsigned int y, unsigned int h, RGB color)
{
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	29 97       	sbiw	r28, 0x09	; 9
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	9a 83       	std	Y+2, r25	; 0x02
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	7c 83       	std	Y+4, r23	; 0x04
    1004:	6b 83       	std	Y+3, r22	; 0x03
    1006:	5e 83       	std	Y+6, r21	; 0x06
    1008:	4d 83       	std	Y+5, r20	; 0x05
    100a:	0f 83       	std	Y+7, r16	; 0x07
    100c:	18 87       	std	Y+8, r17	; 0x08
    100e:	29 87       	std	Y+9, r18	; 0x09
    TFT_FillRectangle(x, y, 1, h, color);
    1010:	8f 81       	ldd	r24, Y+7	; 0x07
    1012:	98 85       	ldd	r25, Y+8	; 0x08
    1014:	a9 85       	ldd	r26, Y+9	; 0x09
    1016:	2d 81       	ldd	r18, Y+5	; 0x05
    1018:	3e 81       	ldd	r19, Y+6	; 0x06
    101a:	6b 81       	ldd	r22, Y+3	; 0x03
    101c:	7c 81       	ldd	r23, Y+4	; 0x04
    101e:	e9 81       	ldd	r30, Y+1	; 0x01
    1020:	fa 81       	ldd	r31, Y+2	; 0x02
    1022:	7c 01       	movw	r14, r24
    1024:	0a 2f       	mov	r16, r26
    1026:	41 e0       	ldi	r20, 0x01	; 1
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	cf 01       	movw	r24, r30
    102c:	64 df       	rcall	.-312    	; 0xef6 <TFT_FillRectangle>
}
    102e:	00 00       	nop
    1030:	29 96       	adiw	r28, 0x09	; 9
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	08 95       	ret

0000104a <TFT_DrawCharacter>:

void TFT_DrawCharacter(unsigned int x, unsigned int y, unsigned char c, RGB color, RGB bgcolor, unsigned int size_x, unsigned int size_y)
{
    104a:	8f 92       	push	r8
    104c:	9f 92       	push	r9
    104e:	af 92       	push	r10
    1050:	bf 92       	push	r11
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	63 97       	sbiw	r28, 0x13	; 19
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	9e 83       	std	Y+6, r25	; 0x06
    1074:	8d 83       	std	Y+5, r24	; 0x05
    1076:	78 87       	std	Y+8, r23	; 0x08
    1078:	6f 83       	std	Y+7, r22	; 0x07
    107a:	49 87       	std	Y+9, r20	; 0x09
    107c:	0a 87       	std	Y+10, r16	; 0x0a
    107e:	1b 87       	std	Y+11, r17	; 0x0b
    1080:	2c 87       	std	Y+12, r18	; 0x0c
    1082:	cd 86       	std	Y+13, r12	; 0x0d
    1084:	de 86       	std	Y+14, r13	; 0x0e
    1086:	ef 86       	std	Y+15, r14	; 0x0f
    1088:	b9 8a       	std	Y+17, r11	; 0x11
    108a:	a8 8a       	std	Y+16, r10	; 0x10
    108c:	9b 8a       	std	Y+19, r9	; 0x13
    108e:	8a 8a       	std	Y+18, r8	; 0x12
    for (int8_t i = 0; i < 5; i++)
    1090:	19 82       	std	Y+1, r1	; 0x01
    1092:	e1 c0       	rjmp	.+450    	; 0x1256 <TFT_DrawCharacter+0x20c>
    { // Char bitmap = 5 columns
        unsigned int line = g_font[c * 5 + i];
    1094:	89 85       	ldd	r24, Y+9	; 0x09
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	c9 01       	movw	r24, r18
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	28 0f       	add	r18, r24
    10a6:	39 1f       	adc	r19, r25
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	08 2e       	mov	r0, r24
    10ac:	00 0c       	add	r0, r0
    10ae:	99 0b       	sbc	r25, r25
    10b0:	82 0f       	add	r24, r18
    10b2:	93 1f       	adc	r25, r19
    10b4:	80 50       	subi	r24, 0x00	; 0
    10b6:	9e 4f       	sbci	r25, 0xFE	; 254
    10b8:	fc 01       	movw	r30, r24
    10ba:	80 81       	ld	r24, Z
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	9b 83       	std	Y+3, r25	; 0x03
    10c2:	8a 83       	std	Y+2, r24	; 0x02
        for (int8_t j = 0; j < 8; j++, line >>= 1)
    10c4:	1c 82       	std	Y+4, r1	; 0x04
    10c6:	c0 c0       	rjmp	.+384    	; 0x1248 <TFT_DrawCharacter+0x1fe>
        {
            if (line & 1)
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	9b 81       	ldd	r25, Y+3	; 0x03
    10cc:	81 70       	andi	r24, 0x01	; 1
    10ce:	99 27       	eor	r25, r25
    10d0:	89 2b       	or	r24, r25
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <TFT_DrawCharacter+0x8c>
    10d4:	52 c0       	rjmp	.+164    	; 0x117a <TFT_DrawCharacter+0x130>
            {
                if (size_x == 1 && size_y == 1)
    10d6:	88 89       	ldd	r24, Y+16	; 0x10
    10d8:	99 89       	ldd	r25, Y+17	; 0x11
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	f1 f4       	brne	.+60     	; 0x111a <TFT_DrawCharacter+0xd0>
    10de:	8a 89       	ldd	r24, Y+18	; 0x12
    10e0:	9b 89       	ldd	r25, Y+19	; 0x13
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	d1 f4       	brne	.+52     	; 0x111a <TFT_DrawCharacter+0xd0>
                    WritePixel(x + i, y + j, color);
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	28 2f       	mov	r18, r24
    10ea:	88 0f       	add	r24, r24
    10ec:	33 0b       	sbc	r19, r19
    10ee:	8f 81       	ldd	r24, Y+7	; 0x07
    10f0:	98 85       	ldd	r25, Y+8	; 0x08
    10f2:	b9 01       	movw	r22, r18
    10f4:	68 0f       	add	r22, r24
    10f6:	79 1f       	adc	r23, r25
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	28 2f       	mov	r18, r24
    10fc:	88 0f       	add	r24, r24
    10fe:	33 0b       	sbc	r19, r19
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	f9 01       	movw	r30, r18
    1106:	e8 0f       	add	r30, r24
    1108:	f9 1f       	adc	r31, r25
    110a:	8a 85       	ldd	r24, Y+10	; 0x0a
    110c:	9b 85       	ldd	r25, Y+11	; 0x0b
    110e:	ac 85       	ldd	r26, Y+12	; 0x0c
    1110:	9c 01       	movw	r18, r24
    1112:	4a 2f       	mov	r20, r26
    1114:	cf 01       	movw	r24, r30
    1116:	80 de       	rcall	.-768    	; 0xe18 <WritePixel>
    1118:	8e c0       	rjmp	.+284    	; 0x1236 <TFT_DrawCharacter+0x1ec>
                else
                    TFT_FillRectangle(x + i * size_x, y + j * size_y, size_x, size_y,
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	48 2f       	mov	r20, r24
    111e:	88 0f       	add	r24, r24
    1120:	55 0b       	sbc	r21, r21
    1122:	8a 89       	ldd	r24, Y+18	; 0x12
    1124:	9b 89       	ldd	r25, Y+19	; 0x13
    1126:	48 9f       	mul	r20, r24
    1128:	90 01       	movw	r18, r0
    112a:	49 9f       	mul	r20, r25
    112c:	30 0d       	add	r19, r0
    112e:	58 9f       	mul	r21, r24
    1130:	30 0d       	add	r19, r0
    1132:	11 24       	eor	r1, r1
    1134:	8f 81       	ldd	r24, Y+7	; 0x07
    1136:	98 85       	ldd	r25, Y+8	; 0x08
    1138:	b9 01       	movw	r22, r18
    113a:	68 0f       	add	r22, r24
    113c:	79 1f       	adc	r23, r25
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	48 2f       	mov	r20, r24
    1142:	88 0f       	add	r24, r24
    1144:	55 0b       	sbc	r21, r21
    1146:	88 89       	ldd	r24, Y+16	; 0x10
    1148:	99 89       	ldd	r25, Y+17	; 0x11
    114a:	48 9f       	mul	r20, r24
    114c:	90 01       	movw	r18, r0
    114e:	49 9f       	mul	r20, r25
    1150:	30 0d       	add	r19, r0
    1152:	58 9f       	mul	r21, r24
    1154:	30 0d       	add	r19, r0
    1156:	11 24       	eor	r1, r1
    1158:	8d 81       	ldd	r24, Y+5	; 0x05
    115a:	9e 81       	ldd	r25, Y+6	; 0x06
    115c:	f9 01       	movw	r30, r18
    115e:	e8 0f       	add	r30, r24
    1160:	f9 1f       	adc	r31, r25
    1162:	8a 85       	ldd	r24, Y+10	; 0x0a
    1164:	9b 85       	ldd	r25, Y+11	; 0x0b
    1166:	ac 85       	ldd	r26, Y+12	; 0x0c
    1168:	2a 89       	ldd	r18, Y+18	; 0x12
    116a:	3b 89       	ldd	r19, Y+19	; 0x13
    116c:	48 89       	ldd	r20, Y+16	; 0x10
    116e:	59 89       	ldd	r21, Y+17	; 0x11
    1170:	7c 01       	movw	r14, r24
    1172:	0a 2f       	mov	r16, r26
    1174:	cf 01       	movw	r24, r30
    1176:	bf de       	rcall	.-642    	; 0xef6 <TFT_FillRectangle>
    1178:	5e c0       	rjmp	.+188    	; 0x1236 <TFT_DrawCharacter+0x1ec>
                                      color);
            }
            else if (bgcolor.Blue != color.Blue || bgcolor.Green != color.Green || bgcolor.Red != color.Red)
    117a:	9f 85       	ldd	r25, Y+15	; 0x0f
    117c:	8c 85       	ldd	r24, Y+12	; 0x0c
    117e:	98 17       	cp	r25, r24
    1180:	49 f4       	brne	.+18     	; 0x1194 <TFT_DrawCharacter+0x14a>
    1182:	9e 85       	ldd	r25, Y+14	; 0x0e
    1184:	8b 85       	ldd	r24, Y+11	; 0x0b
    1186:	98 17       	cp	r25, r24
    1188:	29 f4       	brne	.+10     	; 0x1194 <TFT_DrawCharacter+0x14a>
    118a:	9d 85       	ldd	r25, Y+13	; 0x0d
    118c:	8a 85       	ldd	r24, Y+10	; 0x0a
    118e:	98 17       	cp	r25, r24
    1190:	09 f4       	brne	.+2      	; 0x1194 <TFT_DrawCharacter+0x14a>
    1192:	51 c0       	rjmp	.+162    	; 0x1236 <TFT_DrawCharacter+0x1ec>
            {
                if (size_x == 1 && size_y == 1)
    1194:	88 89       	ldd	r24, Y+16	; 0x10
    1196:	99 89       	ldd	r25, Y+17	; 0x11
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f4       	brne	.+60     	; 0x11d8 <TFT_DrawCharacter+0x18e>
    119c:	8a 89       	ldd	r24, Y+18	; 0x12
    119e:	9b 89       	ldd	r25, Y+19	; 0x13
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	d1 f4       	brne	.+52     	; 0x11d8 <TFT_DrawCharacter+0x18e>
                    WritePixel(x + i, y + j, bgcolor);
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	28 2f       	mov	r18, r24
    11a8:	88 0f       	add	r24, r24
    11aa:	33 0b       	sbc	r19, r19
    11ac:	8f 81       	ldd	r24, Y+7	; 0x07
    11ae:	98 85       	ldd	r25, Y+8	; 0x08
    11b0:	b9 01       	movw	r22, r18
    11b2:	68 0f       	add	r22, r24
    11b4:	79 1f       	adc	r23, r25
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	28 2f       	mov	r18, r24
    11ba:	88 0f       	add	r24, r24
    11bc:	33 0b       	sbc	r19, r19
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	9e 81       	ldd	r25, Y+6	; 0x06
    11c2:	f9 01       	movw	r30, r18
    11c4:	e8 0f       	add	r30, r24
    11c6:	f9 1f       	adc	r31, r25
    11c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    11cc:	af 85       	ldd	r26, Y+15	; 0x0f
    11ce:	9c 01       	movw	r18, r24
    11d0:	4a 2f       	mov	r20, r26
    11d2:	cf 01       	movw	r24, r30
    11d4:	21 de       	rcall	.-958    	; 0xe18 <WritePixel>
    11d6:	2f c0       	rjmp	.+94     	; 0x1236 <TFT_DrawCharacter+0x1ec>
                else
                    TFT_FillRectangle(x + i * size_x, y + j * size_y, size_x, size_y, bgcolor);
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	48 2f       	mov	r20, r24
    11dc:	88 0f       	add	r24, r24
    11de:	55 0b       	sbc	r21, r21
    11e0:	8a 89       	ldd	r24, Y+18	; 0x12
    11e2:	9b 89       	ldd	r25, Y+19	; 0x13
    11e4:	48 9f       	mul	r20, r24
    11e6:	90 01       	movw	r18, r0
    11e8:	49 9f       	mul	r20, r25
    11ea:	30 0d       	add	r19, r0
    11ec:	58 9f       	mul	r21, r24
    11ee:	30 0d       	add	r19, r0
    11f0:	11 24       	eor	r1, r1
    11f2:	8f 81       	ldd	r24, Y+7	; 0x07
    11f4:	98 85       	ldd	r25, Y+8	; 0x08
    11f6:	b9 01       	movw	r22, r18
    11f8:	68 0f       	add	r22, r24
    11fa:	79 1f       	adc	r23, r25
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	48 2f       	mov	r20, r24
    1200:	88 0f       	add	r24, r24
    1202:	55 0b       	sbc	r21, r21
    1204:	88 89       	ldd	r24, Y+16	; 0x10
    1206:	99 89       	ldd	r25, Y+17	; 0x11
    1208:	48 9f       	mul	r20, r24
    120a:	90 01       	movw	r18, r0
    120c:	49 9f       	mul	r20, r25
    120e:	30 0d       	add	r19, r0
    1210:	58 9f       	mul	r21, r24
    1212:	30 0d       	add	r19, r0
    1214:	11 24       	eor	r1, r1
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
    1218:	9e 81       	ldd	r25, Y+6	; 0x06
    121a:	f9 01       	movw	r30, r18
    121c:	e8 0f       	add	r30, r24
    121e:	f9 1f       	adc	r31, r25
    1220:	8d 85       	ldd	r24, Y+13	; 0x0d
    1222:	9e 85       	ldd	r25, Y+14	; 0x0e
    1224:	af 85       	ldd	r26, Y+15	; 0x0f
    1226:	2a 89       	ldd	r18, Y+18	; 0x12
    1228:	3b 89       	ldd	r19, Y+19	; 0x13
    122a:	48 89       	ldd	r20, Y+16	; 0x10
    122c:	59 89       	ldd	r21, Y+17	; 0x11
    122e:	7c 01       	movw	r14, r24
    1230:	0a 2f       	mov	r16, r26
    1232:	cf 01       	movw	r24, r30
    1234:	60 de       	rcall	.-832    	; 0xef6 <TFT_FillRectangle>
void TFT_DrawCharacter(unsigned int x, unsigned int y, unsigned char c, RGB color, RGB bgcolor, unsigned int size_x, unsigned int size_y)
{
    for (int8_t i = 0; i < 5; i++)
    { // Char bitmap = 5 columns
        unsigned int line = g_font[c * 5 + i];
        for (int8_t j = 0; j < 8; j++, line >>= 1)
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	8c 83       	std	Y+4, r24	; 0x04
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	9b 81       	ldd	r25, Y+3	; 0x03
    1240:	96 95       	lsr	r25
    1242:	87 95       	ror	r24
    1244:	9b 83       	std	Y+3, r25	; 0x03
    1246:	8a 83       	std	Y+2, r24	; 0x02
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	88 30       	cpi	r24, 0x08	; 8
    124c:	0c f4       	brge	.+2      	; 0x1250 <TFT_DrawCharacter+0x206>
    124e:	3c cf       	rjmp	.-392    	; 0x10c8 <TFT_DrawCharacter+0x7e>
    TFT_FillRectangle(x, y, 1, h, color);
}

void TFT_DrawCharacter(unsigned int x, unsigned int y, unsigned char c, RGB color, RGB bgcolor, unsigned int size_x, unsigned int size_y)
{
    for (int8_t i = 0; i < 5; i++)
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	8f 5f       	subi	r24, 0xFF	; 255
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	85 30       	cpi	r24, 0x05	; 5
    125a:	0c f4       	brge	.+2      	; 0x125e <TFT_DrawCharacter+0x214>
    125c:	1b cf       	rjmp	.-458    	; 0x1094 <TFT_DrawCharacter+0x4a>
                else
                    TFT_FillRectangle(x + i * size_x, y + j * size_y, size_x, size_y, bgcolor);
            }
        }
    }
    if (bgcolor.Blue != color.Blue || bgcolor.Green != color.Green || bgcolor.Red != color.Red)
    125e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1260:	8c 85       	ldd	r24, Y+12	; 0x0c
    1262:	98 17       	cp	r25, r24
    1264:	41 f4       	brne	.+16     	; 0x1276 <TFT_DrawCharacter+0x22c>
    1266:	9e 85       	ldd	r25, Y+14	; 0x0e
    1268:	8b 85       	ldd	r24, Y+11	; 0x0b
    126a:	98 17       	cp	r25, r24
    126c:	21 f4       	brne	.+8      	; 0x1276 <TFT_DrawCharacter+0x22c>
    126e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1270:	8a 85       	ldd	r24, Y+10	; 0x0a
    1272:	98 17       	cp	r25, r24
    1274:	d9 f1       	breq	.+118    	; 0x12ec <TFT_DrawCharacter+0x2a2>
    { // If opaque, draw vertical line for last column
        if (size_x == 1 && size_y == 1)
    1276:	88 89       	ldd	r24, Y+16	; 0x10
    1278:	99 89       	ldd	r25, Y+17	; 0x11
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	a1 f4       	brne	.+40     	; 0x12a6 <TFT_DrawCharacter+0x25c>
    127e:	8a 89       	ldd	r24, Y+18	; 0x12
    1280:	9b 89       	ldd	r25, Y+19	; 0x13
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	81 f4       	brne	.+32     	; 0x12a6 <TFT_DrawCharacter+0x25c>
            TFT_DrawVLine(x + 5, y, 8, bgcolor);
    1286:	8d 81       	ldd	r24, Y+5	; 0x05
    1288:	9e 81       	ldd	r25, Y+6	; 0x06
    128a:	fc 01       	movw	r30, r24
    128c:	35 96       	adiw	r30, 0x05	; 5
    128e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1290:	9e 85       	ldd	r25, Y+14	; 0x0e
    1292:	af 85       	ldd	r26, Y+15	; 0x0f
    1294:	6f 81       	ldd	r22, Y+7	; 0x07
    1296:	78 85       	ldd	r23, Y+8	; 0x08
    1298:	8c 01       	movw	r16, r24
    129a:	2a 2f       	mov	r18, r26
    129c:	48 e0       	ldi	r20, 0x08	; 8
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	cf 01       	movw	r24, r30
    12a2:	9f de       	rcall	.-706    	; 0xfe2 <TFT_DrawVLine>
        else
            TFT_FillRectangle(x + 5 * size_x, y, size_x, 8 * size_y, bgcolor);
    }
}
    12a4:	23 c0       	rjmp	.+70     	; 0x12ec <TFT_DrawCharacter+0x2a2>
    if (bgcolor.Blue != color.Blue || bgcolor.Green != color.Green || bgcolor.Red != color.Red)
    { // If opaque, draw vertical line for last column
        if (size_x == 1 && size_y == 1)
            TFT_DrawVLine(x + 5, y, 8, bgcolor);
        else
            TFT_FillRectangle(x + 5 * size_x, y, size_x, 8 * size_y, bgcolor);
    12a6:	8a 89       	ldd	r24, Y+18	; 0x12
    12a8:	9b 89       	ldd	r25, Y+19	; 0x13
    12aa:	6c 01       	movw	r12, r24
    12ac:	cc 0c       	add	r12, r12
    12ae:	dd 1c       	adc	r13, r13
    12b0:	cc 0c       	add	r12, r12
    12b2:	dd 1c       	adc	r13, r13
    12b4:	cc 0c       	add	r12, r12
    12b6:	dd 1c       	adc	r13, r13
    12b8:	28 89       	ldd	r18, Y+16	; 0x10
    12ba:	39 89       	ldd	r19, Y+17	; 0x11
    12bc:	c9 01       	movw	r24, r18
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	28 0f       	add	r18, r24
    12c8:	39 1f       	adc	r19, r25
    12ca:	8d 81       	ldd	r24, Y+5	; 0x05
    12cc:	9e 81       	ldd	r25, Y+6	; 0x06
    12ce:	f9 01       	movw	r30, r18
    12d0:	e8 0f       	add	r30, r24
    12d2:	f9 1f       	adc	r31, r25
    12d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d8:	af 85       	ldd	r26, Y+15	; 0x0f
    12da:	48 89       	ldd	r20, Y+16	; 0x10
    12dc:	59 89       	ldd	r21, Y+17	; 0x11
    12de:	6f 81       	ldd	r22, Y+7	; 0x07
    12e0:	78 85       	ldd	r23, Y+8	; 0x08
    12e2:	7c 01       	movw	r14, r24
    12e4:	0a 2f       	mov	r16, r26
    12e6:	96 01       	movw	r18, r12
    12e8:	cf 01       	movw	r24, r30
    12ea:	05 de       	rcall	.-1014   	; 0xef6 <TFT_FillRectangle>
    }
}
    12ec:	00 00       	nop
    12ee:	63 96       	adiw	r28, 0x13	; 19
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	ff 90       	pop	r15
    1304:	ef 90       	pop	r14
    1306:	df 90       	pop	r13
    1308:	cf 90       	pop	r12
    130a:	bf 90       	pop	r11
    130c:	af 90       	pop	r10
    130e:	9f 90       	pop	r9
    1310:	8f 90       	pop	r8
    1312:	08 95       	ret

00001314 <bitBang_Init>:
#define DOUT PE5
#define IRQ_TOUCH PE4


void bitBang_Init()
{
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	1f 92       	push	r1
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
	DDRH  |= 0b00001000;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	21 e0       	ldi	r18, 0x01	; 1
    1324:	31 e0       	ldi	r19, 0x01	; 1
    1326:	f9 01       	movw	r30, r18
    1328:	20 81       	ld	r18, Z
    132a:	28 60       	ori	r18, 0x08	; 8
    132c:	fc 01       	movw	r30, r24
    132e:	20 83       	st	Z, r18
	DDRE  |= 0b00011000;
    1330:	8d e2       	ldi	r24, 0x2D	; 45
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	2d e2       	ldi	r18, 0x2D	; 45
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	f9 01       	movw	r30, r18
    133a:	20 81       	ld	r18, Z
    133c:	28 61       	ori	r18, 0x18	; 24
    133e:	fc 01       	movw	r30, r24
    1340:	20 83       	st	Z, r18
	DDRE  &= 0b11001111;
    1342:	8d e2       	ldi	r24, 0x2D	; 45
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	2d e2       	ldi	r18, 0x2D	; 45
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	f9 01       	movw	r30, r18
    134c:	20 81       	ld	r18, Z
    134e:	2f 7c       	andi	r18, 0xCF	; 207
    1350:	fc 01       	movw	r30, r24
    1352:	20 83       	st	Z, r18
	DDRG  |= 0b00100000;
    1354:	83 e3       	ldi	r24, 0x33	; 51
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	23 e3       	ldi	r18, 0x33	; 51
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	f9 01       	movw	r30, r18
    135e:	20 81       	ld	r18, Z
    1360:	20 62       	ori	r18, 0x20	; 32
    1362:	fc 01       	movw	r30, r24
    1364:	20 83       	st	Z, r18
	PORTE |= (HIGH << CS);
    1366:	8e e2       	ldi	r24, 0x2E	; 46
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	2e e2       	ldi	r18, 0x2E	; 46
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	f9 01       	movw	r30, r18
    1370:	20 81       	ld	r18, Z
    1372:	28 60       	ori	r18, 0x08	; 8
    1374:	fc 01       	movw	r30, r24
    1376:	20 83       	st	Z, r18
	PORTE |= (HIGH << DIN);	
    1378:	8e e2       	ldi	r24, 0x2E	; 46
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	2e e2       	ldi	r18, 0x2E	; 46
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	f9 01       	movw	r30, r18
    1382:	20 81       	ld	r18, Z
    1384:	20 62       	ori	r18, 0x20	; 32
    1386:	fc 01       	movw	r30, r24
    1388:	20 83       	st	Z, r18
	unsigned char mask = 0b00000001 << 3;	
    138a:	88 e0       	ldi	r24, 0x08	; 8
    138c:	89 83       	std	Y+1, r24	; 0x01
	PORTH = PINH & (~mask); //PORTH &= ~mask;
    138e:	82 e0       	ldi	r24, 0x02	; 2
    1390:	91 e0       	ldi	r25, 0x01	; 1
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	31 e0       	ldi	r19, 0x01	; 1
    1396:	f9 01       	movw	r30, r18
    1398:	20 81       	ld	r18, Z
    139a:	32 2f       	mov	r19, r18
    139c:	29 81       	ldd	r18, Y+1	; 0x01
    139e:	20 95       	com	r18
    13a0:	23 23       	and	r18, r19
    13a2:	fc 01       	movw	r30, r24
    13a4:	20 83       	st	Z, r18
}
    13a6:	00 00       	nop
    13a8:	0f 90       	pop	r0
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	08 95       	ret

000013b0 <bitWrite>:

void bitWrite(uint16_t *x, uint8_t n, uint8_t value) {
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <bitWrite+0x6>
    13b6:	1f 92       	push	r1
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	6b 83       	std	Y+3, r22	; 0x03
    13c2:	4c 83       	std	Y+4, r20	; 0x04
	if (value)
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	88 23       	and	r24, r24
    13c8:	b9 f0       	breq	.+46     	; 0x13f8 <bitWrite+0x48>
	*x |= (1 << n);
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	9a 81       	ldd	r25, Y+2	; 0x02
    13ce:	fc 01       	movw	r30, r24
    13d0:	80 81       	ld	r24, Z
    13d2:	91 81       	ldd	r25, Z+1	; 0x01
    13d4:	2b 81       	ldd	r18, Y+3	; 0x03
    13d6:	42 2f       	mov	r20, r18
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	21 e0       	ldi	r18, 0x01	; 1
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <bitWrite+0x34>
    13e0:	22 0f       	add	r18, r18
    13e2:	33 1f       	adc	r19, r19
    13e4:	4a 95       	dec	r20
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <bitWrite+0x30>
    13e8:	28 2b       	or	r18, r24
    13ea:	39 2b       	or	r19, r25
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	9a 81       	ldd	r25, Y+2	; 0x02
    13f0:	fc 01       	movw	r30, r24
    13f2:	31 83       	std	Z+1, r19	; 0x01
    13f4:	20 83       	st	Z, r18
	else
	*x &= ~(1 << n);
}
    13f6:	18 c0       	rjmp	.+48     	; 0x1428 <bitWrite+0x78>

void bitWrite(uint16_t *x, uint8_t n, uint8_t value) {
	if (value)
	*x |= (1 << n);
	else
	*x &= ~(1 << n);
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	fc 01       	movw	r30, r24
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	2b 81       	ldd	r18, Y+3	; 0x03
    1404:	42 2f       	mov	r20, r18
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	21 e0       	ldi	r18, 0x01	; 1
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <bitWrite+0x62>
    140e:	22 0f       	add	r18, r18
    1410:	33 1f       	adc	r19, r19
    1412:	4a 95       	dec	r20
    1414:	e2 f7       	brpl	.-8      	; 0x140e <bitWrite+0x5e>
    1416:	20 95       	com	r18
    1418:	30 95       	com	r19
    141a:	28 23       	and	r18, r24
    141c:	39 23       	and	r19, r25
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	fc 01       	movw	r30, r24
    1424:	31 83       	std	Z+1, r19	; 0x01
    1426:	20 83       	st	Z, r18
}
    1428:	00 00       	nop
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	08 95       	ret

00001438 <bitRead>:

uint8_t bitRead(uint8_t *x, uint8_t n) {
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	00 d0       	rcall	.+0      	; 0x143e <bitRead+0x6>
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	9a 83       	std	Y+2, r25	; 0x02
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	6b 83       	std	Y+3, r22	; 0x03
	return (*x & (1 << n)) ? 1 : 0;
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	9a 81       	ldd	r25, Y+2	; 0x02
    144c:	fc 01       	movw	r30, r24
    144e:	80 81       	ld	r24, Z
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	2b 81       	ldd	r18, Y+3	; 0x03
    1456:	22 2f       	mov	r18, r18
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <bitRead+0x28>
    145c:	95 95       	asr	r25
    145e:	87 95       	ror	r24
    1460:	2a 95       	dec	r18
    1462:	e2 f7       	brpl	.-8      	; 0x145c <bitRead+0x24>
    1464:	81 70       	andi	r24, 0x01	; 1
    1466:	99 27       	eor	r25, r25
    1468:	21 e0       	ldi	r18, 0x01	; 1
    146a:	89 2b       	or	r24, r25
    146c:	09 f4       	brne	.+2      	; 0x1470 <bitRead+0x38>
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	82 2f       	mov	r24, r18
}
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <readPin>:

unsigned char readPin()
{
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	1f 92       	push	r1
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
	unsigned char mask;
	mask = (PINE & 0b00100000);
    1488:	8c e2       	ldi	r24, 0x2C	; 44
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	fc 01       	movw	r30, r24
    148e:	80 81       	ld	r24, Z
    1490:	80 72       	andi	r24, 0x20	; 32
    1492:	89 83       	std	Y+1, r24	; 0x01
	return mask >> DOUT;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	82 95       	swap	r24
    1498:	86 95       	lsr	r24
    149a:	87 70       	andi	r24, 0x07	; 7
}
    149c:	0f 90       	pop	r0
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	08 95       	ret

000014a4 <CS_low>:

void CS_low()
{
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	a1 97       	sbiw	r28, 0x21	; 33
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
	char mask = 0b00000001 << 3;	
    14b8:	88 e0       	ldi	r24, 0x08	; 8
    14ba:	89 83       	std	Y+1, r24	; 0x01
	PORTE = PINE & (~mask);
    14bc:	8e e2       	ldi	r24, 0x2E	; 46
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	2c e2       	ldi	r18, 0x2C	; 44
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	f9 01       	movw	r30, r18
    14c6:	20 81       	ld	r18, Z
    14c8:	32 2f       	mov	r19, r18
    14ca:	29 81       	ldd	r18, Y+1	; 0x01
    14cc:	20 95       	com	r18
    14ce:	23 23       	and	r18, r19
    14d0:	fc 01       	movw	r30, r24
    14d2:	20 83       	st	Z, r18
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	a0 e0       	ldi	r26, 0x00	; 0
    14da:	b0 e4       	ldi	r27, 0x40	; 64
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	9b 83       	std	Y+3, r25	; 0x03
    14e0:	ac 83       	std	Y+4, r26	; 0x04
    14e2:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    14e4:	2b ea       	ldi	r18, 0xAB	; 171
    14e6:	3a ea       	ldi	r19, 0xAA	; 170
    14e8:	4a ea       	ldi	r20, 0xAA	; 170
    14ea:	50 e4       	ldi	r21, 0x40	; 64
    14ec:	6a 81       	ldd	r22, Y+2	; 0x02
    14ee:	7b 81       	ldd	r23, Y+3	; 0x03
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	9d 81       	ldd	r25, Y+5	; 0x05
    14f4:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	8e 83       	std	Y+6, r24	; 0x06
    14fe:	9f 83       	std	Y+7, r25	; 0x07
    1500:	a8 87       	std	Y+8, r26	; 0x08
    1502:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e8       	ldi	r20, 0x80	; 128
    150a:	50 e4       	ldi	r21, 0x40	; 64
    150c:	6a 81       	ldd	r22, Y+2	; 0x02
    150e:	7b 81       	ldd	r23, Y+3	; 0x03
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	9d 81       	ldd	r25, Y+5	; 0x05
    1514:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	8a 87       	std	Y+10, r24	; 0x0a
    151e:	9b 87       	std	Y+11, r25	; 0x0b
    1520:	ac 87       	std	Y+12, r26	; 0x0c
    1522:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e8       	ldi	r20, 0x80	; 128
    152a:	5f e3       	ldi	r21, 0x3F	; 63
    152c:	6e 81       	ldd	r22, Y+6	; 0x06
    152e:	7f 81       	ldd	r23, Y+7	; 0x07
    1530:	88 85       	ldd	r24, Y+8	; 0x08
    1532:	99 85       	ldd	r25, Y+9	; 0x09
    1534:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <__cmpsf2>
    1538:	88 23       	and	r24, r24
    153a:	1c f4       	brge	.+6      	; 0x1542 <CS_low+0x9e>
		__ticks = 1;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	8e 87       	std	Y+14, r24	; 0x0e
    1540:	b2 c0       	rjmp	.+356    	; 0x16a6 <CS_low+0x202>
	else if (__tmp2 > 65535)
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	3f ef       	ldi	r19, 0xFF	; 255
    1546:	4f e7       	ldi	r20, 0x7F	; 127
    1548:	57 e4       	ldi	r21, 0x47	; 71
    154a:	6a 85       	ldd	r22, Y+10	; 0x0a
    154c:	7b 85       	ldd	r23, Y+11	; 0x0b
    154e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1550:	9d 85       	ldd	r25, Y+13	; 0x0d
    1552:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    1556:	18 16       	cp	r1, r24
    1558:	0c f0       	brlt	.+2      	; 0x155c <CS_low+0xb8>
    155a:	7b c0       	rjmp	.+246    	; 0x1652 <CS_low+0x1ae>
	{
		_delay_ms(__us / 1000.0);
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	4a e7       	ldi	r20, 0x7A	; 122
    1562:	54 e4       	ldi	r21, 0x44	; 68
    1564:	6a 81       	ldd	r22, Y+2	; 0x02
    1566:	7b 81       	ldd	r23, Y+3	; 0x03
    1568:	8c 81       	ldd	r24, Y+4	; 0x04
    156a:	9d 81       	ldd	r25, Y+5	; 0x05
    156c:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <__divsf3>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	8f 87       	std	Y+15, r24	; 0x0f
    1576:	98 8b       	std	Y+16, r25	; 0x10
    1578:	a9 8b       	std	Y+17, r26	; 0x11
    157a:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	4a e7       	ldi	r20, 0x7A	; 122
    1582:	55 e4       	ldi	r21, 0x45	; 69
    1584:	6f 85       	ldd	r22, Y+15	; 0x0f
    1586:	78 89       	ldd	r23, Y+16	; 0x10
    1588:	89 89       	ldd	r24, Y+17	; 0x11
    158a:	9a 89       	ldd	r25, Y+18	; 0x12
    158c:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	8b 8b       	std	Y+19, r24	; 0x13
    1596:	9c 8b       	std	Y+20, r25	; 0x14
    1598:	ad 8b       	std	Y+21, r26	; 0x15
    159a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e8       	ldi	r20, 0x80	; 128
    15a2:	5f e3       	ldi	r21, 0x3F	; 63
    15a4:	6b 89       	ldd	r22, Y+19	; 0x13
    15a6:	7c 89       	ldd	r23, Y+20	; 0x14
    15a8:	8d 89       	ldd	r24, Y+21	; 0x15
    15aa:	9e 89       	ldd	r25, Y+22	; 0x16
    15ac:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <__cmpsf2>
    15b0:	88 23       	and	r24, r24
    15b2:	2c f4       	brge	.+10     	; 0x15be <CS_low+0x11a>
		__ticks = 1;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	98 8f       	std	Y+24, r25	; 0x18
    15ba:	8f 8b       	std	Y+23, r24	; 0x17
    15bc:	3f c0       	rjmp	.+126    	; 0x163c <CS_low+0x198>
	else if (__tmp > 65535)
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	3f ef       	ldi	r19, 0xFF	; 255
    15c2:	4f e7       	ldi	r20, 0x7F	; 127
    15c4:	57 e4       	ldi	r21, 0x47	; 71
    15c6:	6b 89       	ldd	r22, Y+19	; 0x13
    15c8:	7c 89       	ldd	r23, Y+20	; 0x14
    15ca:	8d 89       	ldd	r24, Y+21	; 0x15
    15cc:	9e 89       	ldd	r25, Y+22	; 0x16
    15ce:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    15d2:	18 16       	cp	r1, r24
    15d4:	4c f5       	brge	.+82     	; 0x1628 <CS_low+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e2       	ldi	r20, 0x20	; 32
    15dc:	51 e4       	ldi	r21, 0x41	; 65
    15de:	6f 85       	ldd	r22, Y+15	; 0x0f
    15e0:	78 89       	ldd	r23, Y+16	; 0x10
    15e2:	89 89       	ldd	r24, Y+17	; 0x11
    15e4:	9a 89       	ldd	r25, Y+18	; 0x12
    15e6:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	98 8f       	std	Y+24, r25	; 0x18
    15fc:	8f 8b       	std	Y+23, r24	; 0x17
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <CS_low+0x17a>
    1600:	80 e9       	ldi	r24, 0x90	; 144
    1602:	91 e0       	ldi	r25, 0x01	; 1
    1604:	9a 8f       	std	Y+26, r25	; 0x1a
    1606:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1608:	89 8d       	ldd	r24, Y+25	; 0x19
    160a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <CS_low+0x168>
    1610:	9a 8f       	std	Y+26, r25	; 0x1a
    1612:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1614:	8f 89       	ldd	r24, Y+23	; 0x17
    1616:	98 8d       	ldd	r25, Y+24	; 0x18
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	98 8f       	std	Y+24, r25	; 0x18
    161c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161e:	8f 89       	ldd	r24, Y+23	; 0x17
    1620:	98 8d       	ldd	r25, Y+24	; 0x18
    1622:	89 2b       	or	r24, r25
    1624:	69 f7       	brne	.-38     	; 0x1600 <CS_low+0x15c>
    1626:	3f c0       	rjmp	.+126    	; 0x16a6 <CS_low+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1628:	6b 89       	ldd	r22, Y+19	; 0x13
    162a:	7c 89       	ldd	r23, Y+20	; 0x14
    162c:	8d 89       	ldd	r24, Y+21	; 0x15
    162e:	9e 89       	ldd	r25, Y+22	; 0x16
    1630:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	98 8f       	std	Y+24, r25	; 0x18
    163a:	8f 8b       	std	Y+23, r24	; 0x17
    163c:	8f 89       	ldd	r24, Y+23	; 0x17
    163e:	98 8d       	ldd	r25, Y+24	; 0x18
    1640:	9c 8f       	std	Y+28, r25	; 0x1c
    1642:	8b 8f       	std	Y+27, r24	; 0x1b
    1644:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1646:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <CS_low+0x1a4>
    164c:	9c 8f       	std	Y+28, r25	; 0x1c
    164e:	8b 8f       	std	Y+27, r24	; 0x1b
    1650:	2a c0       	rjmp	.+84     	; 0x16a6 <CS_low+0x202>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	4f e7       	ldi	r20, 0x7F	; 127
    1658:	53 e4       	ldi	r21, 0x43	; 67
    165a:	6e 81       	ldd	r22, Y+6	; 0x06
    165c:	7f 81       	ldd	r23, Y+7	; 0x07
    165e:	88 85       	ldd	r24, Y+8	; 0x08
    1660:	99 85       	ldd	r25, Y+9	; 0x09
    1662:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    1666:	18 16       	cp	r1, r24
    1668:	ac f4       	brge	.+42     	; 0x1694 <CS_low+0x1f0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    166a:	6a 85       	ldd	r22, Y+10	; 0x0a
    166c:	7b 85       	ldd	r23, Y+11	; 0x0b
    166e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1670:	9d 85       	ldd	r25, Y+13	; 0x0d
    1672:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	9e 8f       	std	Y+30, r25	; 0x1e
    167c:	8d 8f       	std	Y+29, r24	; 0x1d
    167e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1680:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1682:	98 a3       	std	Y+32, r25	; 0x20
    1684:	8f 8f       	std	Y+31, r24	; 0x1f
    1686:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1688:	98 a1       	ldd	r25, Y+32	; 0x20
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <CS_low+0x1e6>
    168e:	98 a3       	std	Y+32, r25	; 0x20
    1690:	8f 8f       	std	Y+31, r24	; 0x1f
	_delay_us(2);
}
    1692:	0f c0       	rjmp	.+30     	; 0x16b2 <CS_low+0x20e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1694:	6e 81       	ldd	r22, Y+6	; 0x06
    1696:	7f 81       	ldd	r23, Y+7	; 0x07
    1698:	88 85       	ldd	r24, Y+8	; 0x08
    169a:	99 85       	ldd	r25, Y+9	; 0x09
    169c:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	8e 87       	std	Y+14, r24	; 0x0e
    16a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    16a8:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16aa:	89 a1       	ldd	r24, Y+33	; 0x21
    16ac:	8a 95       	dec	r24
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <CS_low+0x208>
    16b0:	89 a3       	std	Y+33, r24	; 0x21
    16b2:	00 00       	nop
    16b4:	a1 96       	adiw	r28, 0x21	; 33
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	08 95       	ret

000016c6 <CS_high>:

void CS_high()
{
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
	PORTE |= (HIGH << CS);
    16ce:	8e e2       	ldi	r24, 0x2E	; 46
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	2e e2       	ldi	r18, 0x2E	; 46
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	f9 01       	movw	r30, r18
    16d8:	20 81       	ld	r18, Z
    16da:	28 60       	ori	r18, 0x08	; 8
    16dc:	fc 01       	movw	r30, r24
    16de:	20 83       	st	Z, r18
}
    16e0:	00 00       	nop
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	08 95       	ret

000016e8 <CLK_high>:

void CLK_high()
{
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
	PORTH |= (HIGH << CLK);	
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	91 e0       	ldi	r25, 0x01	; 1
    16f4:	22 e0       	ldi	r18, 0x02	; 2
    16f6:	31 e0       	ldi	r19, 0x01	; 1
    16f8:	f9 01       	movw	r30, r18
    16fa:	20 81       	ld	r18, Z
    16fc:	28 60       	ori	r18, 0x08	; 8
    16fe:	fc 01       	movw	r30, r24
    1700:	20 83       	st	Z, r18
}
    1702:	00 00       	nop
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	08 95       	ret

0000170a <CLK_low>:

void CLK_low()
{
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	1f 92       	push	r1
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
	char mask = 0b00000001 << 3;	
    1714:	88 e0       	ldi	r24, 0x08	; 8
    1716:	89 83       	std	Y+1, r24	; 0x01
	PORTH = PINH & (~mask);
    1718:	82 e0       	ldi	r24, 0x02	; 2
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	31 e0       	ldi	r19, 0x01	; 1
    1720:	f9 01       	movw	r30, r18
    1722:	20 81       	ld	r18, Z
    1724:	32 2f       	mov	r19, r18
    1726:	29 81       	ldd	r18, Y+1	; 0x01
    1728:	20 95       	com	r18
    172a:	23 23       	and	r18, r19
    172c:	fc 01       	movw	r30, r24
    172e:	20 83       	st	Z, r18
}
    1730:	00 00       	nop
    1732:	0f 90       	pop	r0
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	08 95       	ret

0000173a <busyWait>:

void busyWait()
{	
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	c0 54       	subi	r28, 0x40	; 64
    1744:	d1 09       	sbc	r29, r1
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
	CLK_low();
    1750:	dc df       	rcall	.-72     	; 0x170a <CLK_low>
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	a0 e8       	ldi	r26, 0x80	; 128
    1758:	bf e3       	ldi	r27, 0x3F	; 63
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	ab 83       	std	Y+3, r26	; 0x03
    1760:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1762:	2b ea       	ldi	r18, 0xAB	; 171
    1764:	3a ea       	ldi	r19, 0xAA	; 170
    1766:	4a ea       	ldi	r20, 0xAA	; 170
    1768:	50 e4       	ldi	r21, 0x40	; 64
    176a:	69 81       	ldd	r22, Y+1	; 0x01
    176c:	7a 81       	ldd	r23, Y+2	; 0x02
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	9c 81       	ldd	r25, Y+4	; 0x04
    1772:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	8d a3       	std	Y+37, r24	; 0x25
    177c:	9e a3       	std	Y+38, r25	; 0x26
    177e:	af a3       	std	Y+39, r26	; 0x27
    1780:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e8       	ldi	r20, 0x80	; 128
    1788:	50 e4       	ldi	r21, 0x40	; 64
    178a:	69 81       	ldd	r22, Y+1	; 0x01
    178c:	7a 81       	ldd	r23, Y+2	; 0x02
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	89 a7       	std	Y+41, r24	; 0x29
    179c:	9a a7       	std	Y+42, r25	; 0x2a
    179e:	ab a7       	std	Y+43, r26	; 0x2b
    17a0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e8       	ldi	r20, 0x80	; 128
    17a8:	5f e3       	ldi	r21, 0x3F	; 63
    17aa:	6d a1       	ldd	r22, Y+37	; 0x25
    17ac:	7e a1       	ldd	r23, Y+38	; 0x26
    17ae:	8f a1       	ldd	r24, Y+39	; 0x27
    17b0:	98 a5       	ldd	r25, Y+40	; 0x28
    17b2:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <__cmpsf2>
    17b6:	88 23       	and	r24, r24
    17b8:	1c f4       	brge	.+6      	; 0x17c0 <busyWait+0x86>
		__ticks = 1;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	8d a7       	std	Y+45, r24	; 0x2d
    17be:	b2 c0       	rjmp	.+356    	; 0x1924 <busyWait+0x1ea>
	else if (__tmp2 > 65535)
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	3f ef       	ldi	r19, 0xFF	; 255
    17c4:	4f e7       	ldi	r20, 0x7F	; 127
    17c6:	57 e4       	ldi	r21, 0x47	; 71
    17c8:	69 a5       	ldd	r22, Y+41	; 0x29
    17ca:	7a a5       	ldd	r23, Y+42	; 0x2a
    17cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    17ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    17d0:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    17d4:	18 16       	cp	r1, r24
    17d6:	0c f0       	brlt	.+2      	; 0x17da <busyWait+0xa0>
    17d8:	7b c0       	rjmp	.+246    	; 0x18d0 <busyWait+0x196>
	{
		_delay_ms(__us / 1000.0);
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	4a e7       	ldi	r20, 0x7A	; 122
    17e0:	54 e4       	ldi	r21, 0x44	; 68
    17e2:	69 81       	ldd	r22, Y+1	; 0x01
    17e4:	7a 81       	ldd	r23, Y+2	; 0x02
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <__divsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	8e a7       	std	Y+46, r24	; 0x2e
    17f4:	9f a7       	std	Y+47, r25	; 0x2f
    17f6:	a8 ab       	std	Y+48, r26	; 0x30
    17f8:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	4a e7       	ldi	r20, 0x7A	; 122
    1800:	55 e4       	ldi	r21, 0x45	; 69
    1802:	6e a5       	ldd	r22, Y+46	; 0x2e
    1804:	7f a5       	ldd	r23, Y+47	; 0x2f
    1806:	88 a9       	ldd	r24, Y+48	; 0x30
    1808:	99 a9       	ldd	r25, Y+49	; 0x31
    180a:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	8a ab       	std	Y+50, r24	; 0x32
    1814:	9b ab       	std	Y+51, r25	; 0x33
    1816:	ac ab       	std	Y+52, r26	; 0x34
    1818:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e8       	ldi	r20, 0x80	; 128
    1820:	5f e3       	ldi	r21, 0x3F	; 63
    1822:	6a a9       	ldd	r22, Y+50	; 0x32
    1824:	7b a9       	ldd	r23, Y+51	; 0x33
    1826:	8c a9       	ldd	r24, Y+52	; 0x34
    1828:	9d a9       	ldd	r25, Y+53	; 0x35
    182a:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <__cmpsf2>
    182e:	88 23       	and	r24, r24
    1830:	2c f4       	brge	.+10     	; 0x183c <busyWait+0x102>
		__ticks = 1;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	9f ab       	std	Y+55, r25	; 0x37
    1838:	8e ab       	std	Y+54, r24	; 0x36
    183a:	3f c0       	rjmp	.+126    	; 0x18ba <busyWait+0x180>
	else if (__tmp > 65535)
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	3f ef       	ldi	r19, 0xFF	; 255
    1840:	4f e7       	ldi	r20, 0x7F	; 127
    1842:	57 e4       	ldi	r21, 0x47	; 71
    1844:	6a a9       	ldd	r22, Y+50	; 0x32
    1846:	7b a9       	ldd	r23, Y+51	; 0x33
    1848:	8c a9       	ldd	r24, Y+52	; 0x34
    184a:	9d a9       	ldd	r25, Y+53	; 0x35
    184c:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    1850:	18 16       	cp	r1, r24
    1852:	4c f5       	brge	.+82     	; 0x18a6 <busyWait+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	40 e2       	ldi	r20, 0x20	; 32
    185a:	51 e4       	ldi	r21, 0x41	; 65
    185c:	6e a5       	ldd	r22, Y+46	; 0x2e
    185e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1860:	88 a9       	ldd	r24, Y+48	; 0x30
    1862:	99 a9       	ldd	r25, Y+49	; 0x31
    1864:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	9f ab       	std	Y+55, r25	; 0x37
    187a:	8e ab       	std	Y+54, r24	; 0x36
    187c:	0f c0       	rjmp	.+30     	; 0x189c <busyWait+0x162>
    187e:	80 e9       	ldi	r24, 0x90	; 144
    1880:	91 e0       	ldi	r25, 0x01	; 1
    1882:	99 af       	std	Y+57, r25	; 0x39
    1884:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1886:	88 ad       	ldd	r24, Y+56	; 0x38
    1888:	99 ad       	ldd	r25, Y+57	; 0x39
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <busyWait+0x150>
    188e:	99 af       	std	Y+57, r25	; 0x39
    1890:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1892:	8e a9       	ldd	r24, Y+54	; 0x36
    1894:	9f a9       	ldd	r25, Y+55	; 0x37
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	9f ab       	std	Y+55, r25	; 0x37
    189a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189c:	8e a9       	ldd	r24, Y+54	; 0x36
    189e:	9f a9       	ldd	r25, Y+55	; 0x37
    18a0:	89 2b       	or	r24, r25
    18a2:	69 f7       	brne	.-38     	; 0x187e <busyWait+0x144>
    18a4:	3f c0       	rjmp	.+126    	; 0x1924 <busyWait+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a6:	6a a9       	ldd	r22, Y+50	; 0x32
    18a8:	7b a9       	ldd	r23, Y+51	; 0x33
    18aa:	8c a9       	ldd	r24, Y+52	; 0x34
    18ac:	9d a9       	ldd	r25, Y+53	; 0x35
    18ae:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	9f ab       	std	Y+55, r25	; 0x37
    18b8:	8e ab       	std	Y+54, r24	; 0x36
    18ba:	8e a9       	ldd	r24, Y+54	; 0x36
    18bc:	9f a9       	ldd	r25, Y+55	; 0x37
    18be:	9b af       	std	Y+59, r25	; 0x3b
    18c0:	8a af       	std	Y+58, r24	; 0x3a
    18c2:	8a ad       	ldd	r24, Y+58	; 0x3a
    18c4:	9b ad       	ldd	r25, Y+59	; 0x3b
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <busyWait+0x18c>
    18ca:	9b af       	std	Y+59, r25	; 0x3b
    18cc:	8a af       	std	Y+58, r24	; 0x3a
    18ce:	2a c0       	rjmp	.+84     	; 0x1924 <busyWait+0x1ea>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	4f e7       	ldi	r20, 0x7F	; 127
    18d6:	53 e4       	ldi	r21, 0x43	; 67
    18d8:	6d a1       	ldd	r22, Y+37	; 0x25
    18da:	7e a1       	ldd	r23, Y+38	; 0x26
    18dc:	8f a1       	ldd	r24, Y+39	; 0x27
    18de:	98 a5       	ldd	r25, Y+40	; 0x28
    18e0:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    18e4:	18 16       	cp	r1, r24
    18e6:	ac f4       	brge	.+42     	; 0x1912 <busyWait+0x1d8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    18e8:	69 a5       	ldd	r22, Y+41	; 0x29
    18ea:	7a a5       	ldd	r23, Y+42	; 0x2a
    18ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    18ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    18f0:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	9d af       	std	Y+61, r25	; 0x3d
    18fa:	8c af       	std	Y+60, r24	; 0x3c
    18fc:	8c ad       	ldd	r24, Y+60	; 0x3c
    18fe:	9d ad       	ldd	r25, Y+61	; 0x3d
    1900:	9f af       	std	Y+63, r25	; 0x3f
    1902:	8e af       	std	Y+62, r24	; 0x3e
    1904:	8e ad       	ldd	r24, Y+62	; 0x3e
    1906:	9f ad       	ldd	r25, Y+63	; 0x3f
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <busyWait+0x1ce>
    190c:	9f af       	std	Y+63, r25	; 0x3f
    190e:	8e af       	std	Y+62, r24	; 0x3e
    1910:	1c c0       	rjmp	.+56     	; 0x194a <busyWait+0x210>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1912:	6d a1       	ldd	r22, Y+37	; 0x25
    1914:	7e a1       	ldd	r23, Y+38	; 0x26
    1916:	8f a1       	ldd	r24, Y+39	; 0x27
    1918:	98 a5       	ldd	r25, Y+40	; 0x28
    191a:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	8d a7       	std	Y+45, r24	; 0x2d
    1924:	2d a5       	ldd	r18, Y+45	; 0x2d
    1926:	ce 01       	movw	r24, r28
    1928:	80 5c       	subi	r24, 0xC0	; 192
    192a:	9f 4f       	sbci	r25, 0xFF	; 255
    192c:	fc 01       	movw	r30, r24
    192e:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1930:	ce 01       	movw	r24, r28
    1932:	80 5c       	subi	r24, 0xC0	; 192
    1934:	9f 4f       	sbci	r25, 0xFF	; 255
    1936:	fc 01       	movw	r30, r24
    1938:	80 81       	ld	r24, Z
    193a:	28 2f       	mov	r18, r24
    193c:	2a 95       	dec	r18
    193e:	f1 f7       	brne	.-4      	; 0x193c <busyWait+0x202>
    1940:	ce 01       	movw	r24, r28
    1942:	80 5c       	subi	r24, 0xC0	; 192
    1944:	9f 4f       	sbci	r25, 0xFF	; 255
    1946:	fc 01       	movw	r30, r24
	_delay_us(1);
	CLK_high();
    1948:	20 83       	st	Z, r18
    194a:	ce de       	rcall	.-612    	; 0x16e8 <CLK_high>
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a0 e8       	ldi	r26, 0x80	; 128
    1952:	bf e3       	ldi	r27, 0x3F	; 63
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	9e 83       	std	Y+6, r25	; 0x06
    1958:	af 83       	std	Y+7, r26	; 0x07
    195a:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    195c:	2b ea       	ldi	r18, 0xAB	; 171
    195e:	3a ea       	ldi	r19, 0xAA	; 170
    1960:	4a ea       	ldi	r20, 0xAA	; 170
    1962:	50 e4       	ldi	r21, 0x40	; 64
    1964:	6d 81       	ldd	r22, Y+5	; 0x05
    1966:	7e 81       	ldd	r23, Y+6	; 0x06
    1968:	8f 81       	ldd	r24, Y+7	; 0x07
    196a:	98 85       	ldd	r25, Y+8	; 0x08
    196c:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	89 87       	std	Y+9, r24	; 0x09
    1976:	9a 87       	std	Y+10, r25	; 0x0a
    1978:	ab 87       	std	Y+11, r26	; 0x0b
    197a:	bc 87       	std	Y+12, r27	; 0x0c
	__tmp2 = ((F_CPU) / 4e6) * __us;
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e8       	ldi	r20, 0x80	; 128
    1982:	50 e4       	ldi	r21, 0x40	; 64
    1984:	6d 81       	ldd	r22, Y+5	; 0x05
    1986:	7e 81       	ldd	r23, Y+6	; 0x06
    1988:	8f 81       	ldd	r24, Y+7	; 0x07
    198a:	98 85       	ldd	r25, Y+8	; 0x08
    198c:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	8d 87       	std	Y+13, r24	; 0x0d
    1996:	9e 87       	std	Y+14, r25	; 0x0e
    1998:	af 87       	std	Y+15, r26	; 0x0f
    199a:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e8       	ldi	r20, 0x80	; 128
    19a2:	5f e3       	ldi	r21, 0x3F	; 63
    19a4:	69 85       	ldd	r22, Y+9	; 0x09
    19a6:	7a 85       	ldd	r23, Y+10	; 0x0a
    19a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    19aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    19ac:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <__cmpsf2>
    19b0:	88 23       	and	r24, r24
    19b2:	1c f4       	brge	.+6      	; 0x19ba <busyWait+0x280>
		__ticks = 1;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	89 8b       	std	Y+17, r24	; 0x11
    19b8:	b2 c0       	rjmp	.+356    	; 0x1b1e <busyWait+0x3e4>
	else if (__tmp2 > 65535)
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	3f ef       	ldi	r19, 0xFF	; 255
    19be:	4f e7       	ldi	r20, 0x7F	; 127
    19c0:	57 e4       	ldi	r21, 0x47	; 71
    19c2:	6d 85       	ldd	r22, Y+13	; 0x0d
    19c4:	7e 85       	ldd	r23, Y+14	; 0x0e
    19c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c8:	98 89       	ldd	r25, Y+16	; 0x10
    19ca:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    19ce:	18 16       	cp	r1, r24
    19d0:	0c f0       	brlt	.+2      	; 0x19d4 <busyWait+0x29a>
    19d2:	7b c0       	rjmp	.+246    	; 0x1aca <busyWait+0x390>
	{
		_delay_ms(__us / 1000.0);
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	4a e7       	ldi	r20, 0x7A	; 122
    19da:	54 e4       	ldi	r21, 0x44	; 68
    19dc:	6d 81       	ldd	r22, Y+5	; 0x05
    19de:	7e 81       	ldd	r23, Y+6	; 0x06
    19e0:	8f 81       	ldd	r24, Y+7	; 0x07
    19e2:	98 85       	ldd	r25, Y+8	; 0x08
    19e4:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <__divsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	8a 8b       	std	Y+18, r24	; 0x12
    19ee:	9b 8b       	std	Y+19, r25	; 0x13
    19f0:	ac 8b       	std	Y+20, r26	; 0x14
    19f2:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	4a e7       	ldi	r20, 0x7A	; 122
    19fa:	55 e4       	ldi	r21, 0x45	; 69
    19fc:	6a 89       	ldd	r22, Y+18	; 0x12
    19fe:	7b 89       	ldd	r23, Y+19	; 0x13
    1a00:	8c 89       	ldd	r24, Y+20	; 0x14
    1a02:	9d 89       	ldd	r25, Y+21	; 0x15
    1a04:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	8e 8b       	std	Y+22, r24	; 0x16
    1a0e:	9f 8b       	std	Y+23, r25	; 0x17
    1a10:	a8 8f       	std	Y+24, r26	; 0x18
    1a12:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e8       	ldi	r20, 0x80	; 128
    1a1a:	5f e3       	ldi	r21, 0x3F	; 63
    1a1c:	6e 89       	ldd	r22, Y+22	; 0x16
    1a1e:	7f 89       	ldd	r23, Y+23	; 0x17
    1a20:	88 8d       	ldd	r24, Y+24	; 0x18
    1a22:	99 8d       	ldd	r25, Y+25	; 0x19
    1a24:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <__cmpsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	2c f4       	brge	.+10     	; 0x1a36 <busyWait+0x2fc>
		__ticks = 1;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	9b 8f       	std	Y+27, r25	; 0x1b
    1a32:	8a 8f       	std	Y+26, r24	; 0x1a
    1a34:	3f c0       	rjmp	.+126    	; 0x1ab4 <busyWait+0x37a>
	else if (__tmp > 65535)
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	3f ef       	ldi	r19, 0xFF	; 255
    1a3a:	4f e7       	ldi	r20, 0x7F	; 127
    1a3c:	57 e4       	ldi	r21, 0x47	; 71
    1a3e:	6e 89       	ldd	r22, Y+22	; 0x16
    1a40:	7f 89       	ldd	r23, Y+23	; 0x17
    1a42:	88 8d       	ldd	r24, Y+24	; 0x18
    1a44:	99 8d       	ldd	r25, Y+25	; 0x19
    1a46:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    1a4a:	18 16       	cp	r1, r24
    1a4c:	4c f5       	brge	.+82     	; 0x1aa0 <busyWait+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e2       	ldi	r20, 0x20	; 32
    1a54:	51 e4       	ldi	r21, 0x41	; 65
    1a56:	6a 89       	ldd	r22, Y+18	; 0x12
    1a58:	7b 89       	ldd	r23, Y+19	; 0x13
    1a5a:	8c 89       	ldd	r24, Y+20	; 0x14
    1a5c:	9d 89       	ldd	r25, Y+21	; 0x15
    1a5e:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9b 8f       	std	Y+27, r25	; 0x1b
    1a74:	8a 8f       	std	Y+26, r24	; 0x1a
    1a76:	0f c0       	rjmp	.+30     	; 0x1a96 <busyWait+0x35c>
    1a78:	80 e9       	ldi	r24, 0x90	; 144
    1a7a:	91 e0       	ldi	r25, 0x01	; 1
    1a7c:	9d 8f       	std	Y+29, r25	; 0x1d
    1a7e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a80:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a82:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <busyWait+0x34a>
    1a88:	9d 8f       	std	Y+29, r25	; 0x1d
    1a8a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a8e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	9b 8f       	std	Y+27, r25	; 0x1b
    1a94:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a96:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a98:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a9a:	89 2b       	or	r24, r25
    1a9c:	69 f7       	brne	.-38     	; 0x1a78 <busyWait+0x33e>
    1a9e:	3f c0       	rjmp	.+126    	; 0x1b1e <busyWait+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa0:	6e 89       	ldd	r22, Y+22	; 0x16
    1aa2:	7f 89       	ldd	r23, Y+23	; 0x17
    1aa4:	88 8d       	ldd	r24, Y+24	; 0x18
    1aa6:	99 8d       	ldd	r25, Y+25	; 0x19
    1aa8:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	9b 8f       	std	Y+27, r25	; 0x1b
    1ab2:	8a 8f       	std	Y+26, r24	; 0x1a
    1ab4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ab6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ab8:	9f 8f       	std	Y+31, r25	; 0x1f
    1aba:	8e 8f       	std	Y+30, r24	; 0x1e
    1abc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1abe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <busyWait+0x386>
    1ac4:	9f 8f       	std	Y+31, r25	; 0x1f
    1ac6:	8e 8f       	std	Y+30, r24	; 0x1e
    1ac8:	2a c0       	rjmp	.+84     	; 0x1b1e <busyWait+0x3e4>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	4f e7       	ldi	r20, 0x7F	; 127
    1ad0:	53 e4       	ldi	r21, 0x43	; 67
    1ad2:	69 85       	ldd	r22, Y+9	; 0x09
    1ad4:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ad6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ad8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ada:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	ac f4       	brge	.+42     	; 0x1b0c <busyWait+0x3d2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1ae2:	6d 85       	ldd	r22, Y+13	; 0x0d
    1ae4:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae8:	98 89       	ldd	r25, Y+16	; 0x10
    1aea:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	99 a3       	std	Y+33, r25	; 0x21
    1af4:	88 a3       	std	Y+32, r24	; 0x20
    1af6:	88 a1       	ldd	r24, Y+32	; 0x20
    1af8:	99 a1       	ldd	r25, Y+33	; 0x21
    1afa:	9b a3       	std	Y+35, r25	; 0x23
    1afc:	8a a3       	std	Y+34, r24	; 0x22
    1afe:	8a a1       	ldd	r24, Y+34	; 0x22
    1b00:	9b a1       	ldd	r25, Y+35	; 0x23
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <busyWait+0x3c8>
    1b06:	9b a3       	std	Y+35, r25	; 0x23
    1b08:	8a a3       	std	Y+34, r24	; 0x22
	_delay_us(1);
}
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <busyWait+0x3f0>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b0c:	69 85       	ldd	r22, Y+9	; 0x09
    1b0e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b10:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b12:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b14:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	89 8b       	std	Y+17, r24	; 0x11
    1b1e:	89 89       	ldd	r24, Y+17	; 0x11
    1b20:	8c a3       	std	Y+36, r24	; 0x24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b22:	8c a1       	ldd	r24, Y+36	; 0x24
    1b24:	8a 95       	dec	r24
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <busyWait+0x3ea>
    1b28:	8c a3       	std	Y+36, r24	; 0x24
    1b2a:	00 00       	nop
    1b2c:	c0 5c       	subi	r28, 0xC0	; 192
    1b2e:	df 4f       	sbci	r29, 0xFF	; 255
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	08 95       	ret

00001b40 <bitBangTransmit>:

void bitBangTransmit(uint8_t byte)
{
    1b40:	0f 93       	push	r16
    1b42:	1f 93       	push	r17
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	c5 54       	subi	r28, 0x45	; 69
    1b4e:	d1 09       	sbc	r29, r1
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	9e 01       	movw	r18, r28
    1b5c:	2b 5b       	subi	r18, 0xBB	; 187
    1b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b60:	f9 01       	movw	r30, r18
    1b62:	80 83       	st	Z, r24
	for(int i=0; i<BYTE_LENGTH; i++)		// 8 bits in a byte
    1b64:	1a 82       	std	Y+2, r1	; 0x02
    1b66:	19 82       	std	Y+1, r1	; 0x01
    1b68:	37 c2       	rjmp	.+1134   	; 0x1fd8 <bitBangTransmit+0x498>
	{
		uint8_t bit = bitRead(&byte, i);
    1b6a:	29 81       	ldd	r18, Y+1	; 0x01
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	8b 5b       	subi	r24, 0xBB	; 187
    1b70:	9f 4f       	sbci	r25, 0xFF	; 255
    1b72:	62 2f       	mov	r22, r18
    1b74:	61 dc       	rcall	.-1854   	; 0x1438 <bitRead>
    1b76:	8b 83       	std	Y+3, r24	; 0x03
		if (bit == 0)
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	88 23       	and	r24, r24
    1b7c:	79 f4       	brne	.+30     	; 0x1b9c <bitBangTransmit+0x5c>
		{
			unsigned char mask = 0b00000001 << 5;	
    1b7e:	80 e2       	ldi	r24, 0x20	; 32
    1b80:	8c 83       	std	Y+4, r24	; 0x04
			PORTG = PING & (~mask);
    1b82:	84 e3       	ldi	r24, 0x34	; 52
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	22 e3       	ldi	r18, 0x32	; 50
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	f9 01       	movw	r30, r18
    1b8c:	20 81       	ld	r18, Z
    1b8e:	32 2f       	mov	r19, r18
    1b90:	2c 81       	ldd	r18, Y+4	; 0x04
    1b92:	20 95       	com	r18
    1b94:	23 23       	and	r18, r19
    1b96:	fc 01       	movw	r30, r24
    1b98:	20 83       	st	Z, r18
    1b9a:	18 c0       	rjmp	.+48     	; 0x1bcc <bitBangTransmit+0x8c>
		}
		else if(bit == 1)
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	a9 f4       	brne	.+42     	; 0x1bcc <bitBangTransmit+0x8c>
		{
			PORTG |= bit << DIN;
    1ba2:	84 e3       	ldi	r24, 0x34	; 52
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	24 e3       	ldi	r18, 0x34	; 52
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	f9 01       	movw	r30, r18
    1bac:	20 81       	ld	r18, Z
    1bae:	42 2f       	mov	r20, r18
    1bb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb2:	22 2f       	mov	r18, r18
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	22 0f       	add	r18, r18
    1bb8:	33 1f       	adc	r19, r19
    1bba:	22 95       	swap	r18
    1bbc:	32 95       	swap	r19
    1bbe:	30 7f       	andi	r19, 0xF0	; 240
    1bc0:	32 27       	eor	r19, r18
    1bc2:	20 7f       	andi	r18, 0xF0	; 240
    1bc4:	32 27       	eor	r19, r18
    1bc6:	24 2b       	or	r18, r20
    1bc8:	fc 01       	movw	r30, r24
		}
		CLK_low();
    1bca:	20 83       	st	Z, r18
    1bcc:	9e dd       	rcall	.-1220   	; 0x170a <CLK_low>
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	a0 e8       	ldi	r26, 0x80	; 128
    1bd4:	bf e3       	ldi	r27, 0x3F	; 63
    1bd6:	8d 83       	std	Y+5, r24	; 0x05
    1bd8:	9e 83       	std	Y+6, r25	; 0x06
    1bda:	af 83       	std	Y+7, r26	; 0x07
    1bdc:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1bde:	2b ea       	ldi	r18, 0xAB	; 171
    1be0:	3a ea       	ldi	r19, 0xAA	; 170
    1be2:	4a ea       	ldi	r20, 0xAA	; 170
    1be4:	50 e4       	ldi	r21, 0x40	; 64
    1be6:	6d 81       	ldd	r22, Y+5	; 0x05
    1be8:	7e 81       	ldd	r23, Y+6	; 0x06
    1bea:	8f 81       	ldd	r24, Y+7	; 0x07
    1bec:	98 85       	ldd	r25, Y+8	; 0x08
    1bee:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	89 a7       	std	Y+41, r24	; 0x29
    1bf8:	9a a7       	std	Y+42, r25	; 0x2a
    1bfa:	ab a7       	std	Y+43, r26	; 0x2b
    1bfc:	bc a7       	std	Y+44, r27	; 0x2c
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e8       	ldi	r20, 0x80	; 128
    1c04:	50 e4       	ldi	r21, 0x40	; 64
    1c06:	6d 81       	ldd	r22, Y+5	; 0x05
    1c08:	7e 81       	ldd	r23, Y+6	; 0x06
    1c0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c0c:	98 85       	ldd	r25, Y+8	; 0x08
    1c0e:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	8d a7       	std	Y+45, r24	; 0x2d
    1c18:	9e a7       	std	Y+46, r25	; 0x2e
    1c1a:	af a7       	std	Y+47, r26	; 0x2f
    1c1c:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	69 a5       	ldd	r22, Y+41	; 0x29
    1c28:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c2e:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <__cmpsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	1c f4       	brge	.+6      	; 0x1c3c <bitBangTransmit+0xfc>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	89 ab       	std	Y+49, r24	; 0x31
    1c3a:	c6 c0       	rjmp	.+396    	; 0x1dc8 <bitBangTransmit+0x288>
	else if (__tmp2 > 65535)
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	3f ef       	ldi	r19, 0xFF	; 255
    1c40:	4f e7       	ldi	r20, 0x7F	; 127
    1c42:	57 e4       	ldi	r21, 0x47	; 71
    1c44:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c46:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c4c:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    1c50:	18 16       	cp	r1, r24
    1c52:	0c f0       	brlt	.+2      	; 0x1c56 <bitBangTransmit+0x116>
    1c54:	7b c0       	rjmp	.+246    	; 0x1d4c <bitBangTransmit+0x20c>
	{
		_delay_ms(__us / 1000.0);
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	4a e7       	ldi	r20, 0x7A	; 122
    1c5c:	54 e4       	ldi	r21, 0x44	; 68
    1c5e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c60:	7e 81       	ldd	r23, Y+6	; 0x06
    1c62:	8f 81       	ldd	r24, Y+7	; 0x07
    1c64:	98 85       	ldd	r25, Y+8	; 0x08
    1c66:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <__divsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	8a ab       	std	Y+50, r24	; 0x32
    1c70:	9b ab       	std	Y+51, r25	; 0x33
    1c72:	ac ab       	std	Y+52, r26	; 0x34
    1c74:	bd ab       	std	Y+53, r27	; 0x35

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	4a e7       	ldi	r20, 0x7A	; 122
    1c7c:	55 e4       	ldi	r21, 0x45	; 69
    1c7e:	6a a9       	ldd	r22, Y+50	; 0x32
    1c80:	7b a9       	ldd	r23, Y+51	; 0x33
    1c82:	8c a9       	ldd	r24, Y+52	; 0x34
    1c84:	9d a9       	ldd	r25, Y+53	; 0x35
    1c86:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	8e ab       	std	Y+54, r24	; 0x36
    1c90:	9f ab       	std	Y+55, r25	; 0x37
    1c92:	a8 af       	std	Y+56, r26	; 0x38
    1c94:	b9 af       	std	Y+57, r27	; 0x39
	if (__tmp < 1.0)
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e8       	ldi	r20, 0x80	; 128
    1c9c:	5f e3       	ldi	r21, 0x3F	; 63
    1c9e:	6e a9       	ldd	r22, Y+54	; 0x36
    1ca0:	7f a9       	ldd	r23, Y+55	; 0x37
    1ca2:	88 ad       	ldd	r24, Y+56	; 0x38
    1ca4:	99 ad       	ldd	r25, Y+57	; 0x39
    1ca6:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <__cmpsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <bitBangTransmit+0x178>
		__ticks = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9b af       	std	Y+59, r25	; 0x3b
    1cb4:	8a af       	std	Y+58, r24	; 0x3a
    1cb6:	3f c0       	rjmp	.+126    	; 0x1d36 <bitBangTransmit+0x1f6>
	else if (__tmp > 65535)
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	3f ef       	ldi	r19, 0xFF	; 255
    1cbc:	4f e7       	ldi	r20, 0x7F	; 127
    1cbe:	57 e4       	ldi	r21, 0x47	; 71
    1cc0:	6e a9       	ldd	r22, Y+54	; 0x36
    1cc2:	7f a9       	ldd	r23, Y+55	; 0x37
    1cc4:	88 ad       	ldd	r24, Y+56	; 0x38
    1cc6:	99 ad       	ldd	r25, Y+57	; 0x39
    1cc8:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	4c f5       	brge	.+82     	; 0x1d22 <bitBangTransmit+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e2       	ldi	r20, 0x20	; 32
    1cd6:	51 e4       	ldi	r21, 0x41	; 65
    1cd8:	6a a9       	ldd	r22, Y+50	; 0x32
    1cda:	7b a9       	ldd	r23, Y+51	; 0x33
    1cdc:	8c a9       	ldd	r24, Y+52	; 0x34
    1cde:	9d a9       	ldd	r25, Y+53	; 0x35
    1ce0:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9b af       	std	Y+59, r25	; 0x3b
    1cf6:	8a af       	std	Y+58, r24	; 0x3a
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <bitBangTransmit+0x1d8>
    1cfa:	80 e9       	ldi	r24, 0x90	; 144
    1cfc:	91 e0       	ldi	r25, 0x01	; 1
    1cfe:	9d af       	std	Y+61, r25	; 0x3d
    1d00:	8c af       	std	Y+60, r24	; 0x3c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d02:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d04:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <bitBangTransmit+0x1c6>
    1d0a:	9d af       	std	Y+61, r25	; 0x3d
    1d0c:	8c af       	std	Y+60, r24	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d10:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	9b af       	std	Y+59, r25	; 0x3b
    1d16:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d18:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d1a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d1c:	89 2b       	or	r24, r25
    1d1e:	69 f7       	brne	.-38     	; 0x1cfa <bitBangTransmit+0x1ba>
    1d20:	53 c0       	rjmp	.+166    	; 0x1dc8 <bitBangTransmit+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d22:	6e a9       	ldd	r22, Y+54	; 0x36
    1d24:	7f a9       	ldd	r23, Y+55	; 0x37
    1d26:	88 ad       	ldd	r24, Y+56	; 0x38
    1d28:	99 ad       	ldd	r25, Y+57	; 0x39
    1d2a:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	9b af       	std	Y+59, r25	; 0x3b
    1d34:	8a af       	std	Y+58, r24	; 0x3a
    1d36:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d38:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d3a:	9f af       	std	Y+63, r25	; 0x3f
    1d3c:	8e af       	std	Y+62, r24	; 0x3e
    1d3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d40:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <bitBangTransmit+0x202>
    1d46:	9f af       	std	Y+63, r25	; 0x3f
    1d48:	8e af       	std	Y+62, r24	; 0x3e
    1d4a:	3e c0       	rjmp	.+124    	; 0x1dc8 <bitBangTransmit+0x288>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	4f e7       	ldi	r20, 0x7F	; 127
    1d52:	53 e4       	ldi	r21, 0x43	; 67
    1d54:	69 a5       	ldd	r22, Y+41	; 0x29
    1d56:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d58:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d5c:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    1d60:	18 16       	cp	r1, r24
    1d62:	4c f5       	brge	.+82     	; 0x1db6 <bitBangTransmit+0x276>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1d64:	8e 01       	movw	r16, r28
    1d66:	00 5c       	subi	r16, 0xC0	; 192
    1d68:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d6c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d70:	98 a9       	ldd	r25, Y+48	; 0x30
    1d72:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	80 83       	st	Z, r24
    1d80:	ce 01       	movw	r24, r28
    1d82:	8e 5b       	subi	r24, 0xBE	; 190
    1d84:	9f 4f       	sbci	r25, 0xFF	; 255
    1d86:	9e 01       	movw	r18, r28
    1d88:	20 5c       	subi	r18, 0xC0	; 192
    1d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8c:	f9 01       	movw	r30, r18
    1d8e:	20 81       	ld	r18, Z
    1d90:	31 81       	ldd	r19, Z+1	; 0x01
    1d92:	fc 01       	movw	r30, r24
    1d94:	31 83       	std	Z+1, r19	; 0x01
    1d96:	20 83       	st	Z, r18
    1d98:	ce 01       	movw	r24, r28
    1d9a:	8e 5b       	subi	r24, 0xBE	; 190
    1d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9e:	fc 01       	movw	r30, r24
    1da0:	80 81       	ld	r24, Z
    1da2:	91 81       	ldd	r25, Z+1	; 0x01
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <bitBangTransmit+0x264>
    1da8:	9e 01       	movw	r18, r28
    1daa:	2e 5b       	subi	r18, 0xBE	; 190
    1dac:	3f 4f       	sbci	r19, 0xFF	; 255
    1dae:	f9 01       	movw	r30, r18
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	80 83       	st	Z, r24
    1db4:	1c c0       	rjmp	.+56     	; 0x1dee <bitBangTransmit+0x2ae>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1db6:	69 a5       	ldd	r22, Y+41	; 0x29
    1db8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1dba:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dbc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dbe:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	89 ab       	std	Y+49, r24	; 0x31
    1dc8:	ce 01       	movw	r24, r28
    1dca:	8c 5b       	subi	r24, 0xBC	; 188
    1dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dce:	29 a9       	ldd	r18, Y+49	; 0x31
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	8c 5b       	subi	r24, 0xBC	; 188
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	fc 01       	movw	r30, r24
    1ddc:	80 81       	ld	r24, Z
    1dde:	28 2f       	mov	r18, r24
    1de0:	2a 95       	dec	r18
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <bitBangTransmit+0x2a0>
    1de4:	ce 01       	movw	r24, r28
    1de6:	8c 5b       	subi	r24, 0xBC	; 188
    1de8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dea:	fc 01       	movw	r30, r24
		_delay_us(1);
		CLK_high();
    1dec:	20 83       	st	Z, r18
    1dee:	7c dc       	rcall	.-1800   	; 0x16e8 <CLK_high>
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	a0 e8       	ldi	r26, 0x80	; 128
    1df6:	bf e3       	ldi	r27, 0x3F	; 63
    1df8:	89 87       	std	Y+9, r24	; 0x09
    1dfa:	9a 87       	std	Y+10, r25	; 0x0a
    1dfc:	ab 87       	std	Y+11, r26	; 0x0b
    1dfe:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1e00:	2b ea       	ldi	r18, 0xAB	; 171
    1e02:	3a ea       	ldi	r19, 0xAA	; 170
    1e04:	4a ea       	ldi	r20, 0xAA	; 170
    1e06:	50 e4       	ldi	r21, 0x40	; 64
    1e08:	69 85       	ldd	r22, Y+9	; 0x09
    1e0a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e0e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e10:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	8d 87       	std	Y+13, r24	; 0x0d
    1e1a:	9e 87       	std	Y+14, r25	; 0x0e
    1e1c:	af 87       	std	Y+15, r26	; 0x0f
    1e1e:	b8 8b       	std	Y+16, r27	; 0x10
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e8       	ldi	r20, 0x80	; 128
    1e26:	50 e4       	ldi	r21, 0x40	; 64
    1e28:	69 85       	ldd	r22, Y+9	; 0x09
    1e2a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e2e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e30:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	89 8b       	std	Y+17, r24	; 0x11
    1e3a:	9a 8b       	std	Y+18, r25	; 0x12
    1e3c:	ab 8b       	std	Y+19, r26	; 0x13
    1e3e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e8       	ldi	r20, 0x80	; 128
    1e46:	5f e3       	ldi	r21, 0x3F	; 63
    1e48:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e4a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e4e:	98 89       	ldd	r25, Y+16	; 0x10
    1e50:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <__cmpsf2>
    1e54:	88 23       	and	r24, r24
    1e56:	1c f4       	brge	.+6      	; 0x1e5e <bitBangTransmit+0x31e>
		__ticks = 1;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	8d 8b       	std	Y+21, r24	; 0x15
    1e5c:	b2 c0       	rjmp	.+356    	; 0x1fc2 <bitBangTransmit+0x482>
	else if (__tmp2 > 65535)
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	3f ef       	ldi	r19, 0xFF	; 255
    1e62:	4f e7       	ldi	r20, 0x7F	; 127
    1e64:	57 e4       	ldi	r21, 0x47	; 71
    1e66:	69 89       	ldd	r22, Y+17	; 0x11
    1e68:	7a 89       	ldd	r23, Y+18	; 0x12
    1e6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6e:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    1e72:	18 16       	cp	r1, r24
    1e74:	0c f0       	brlt	.+2      	; 0x1e78 <bitBangTransmit+0x338>
    1e76:	7b c0       	rjmp	.+246    	; 0x1f6e <bitBangTransmit+0x42e>
	{
		_delay_ms(__us / 1000.0);
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	4a e7       	ldi	r20, 0x7A	; 122
    1e7e:	54 e4       	ldi	r21, 0x44	; 68
    1e80:	69 85       	ldd	r22, Y+9	; 0x09
    1e82:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e84:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e86:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e88:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <__divsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8e 8b       	std	Y+22, r24	; 0x16
    1e92:	9f 8b       	std	Y+23, r25	; 0x17
    1e94:	a8 8f       	std	Y+24, r26	; 0x18
    1e96:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	4a e7       	ldi	r20, 0x7A	; 122
    1e9e:	55 e4       	ldi	r21, 0x45	; 69
    1ea0:	6e 89       	ldd	r22, Y+22	; 0x16
    1ea2:	7f 89       	ldd	r23, Y+23	; 0x17
    1ea4:	88 8d       	ldd	r24, Y+24	; 0x18
    1ea6:	99 8d       	ldd	r25, Y+25	; 0x19
    1ea8:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	8a 8f       	std	Y+26, r24	; 0x1a
    1eb2:	9b 8f       	std	Y+27, r25	; 0x1b
    1eb4:	ac 8f       	std	Y+28, r26	; 0x1c
    1eb6:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e8       	ldi	r20, 0x80	; 128
    1ebe:	5f e3       	ldi	r21, 0x3F	; 63
    1ec0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ec2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ec4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ec6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ec8:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <__cmpsf2>
    1ecc:	88 23       	and	r24, r24
    1ece:	2c f4       	brge	.+10     	; 0x1eda <bitBangTransmit+0x39a>
		__ticks = 1;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9f 8f       	std	Y+31, r25	; 0x1f
    1ed6:	8e 8f       	std	Y+30, r24	; 0x1e
    1ed8:	3f c0       	rjmp	.+126    	; 0x1f58 <bitBangTransmit+0x418>
	else if (__tmp > 65535)
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	3f ef       	ldi	r19, 0xFF	; 255
    1ede:	4f e7       	ldi	r20, 0x7F	; 127
    1ee0:	57 e4       	ldi	r21, 0x47	; 71
    1ee2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ee4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ee6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ee8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1eea:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    1eee:	18 16       	cp	r1, r24
    1ef0:	4c f5       	brge	.+82     	; 0x1f44 <bitBangTransmit+0x404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e2       	ldi	r20, 0x20	; 32
    1ef8:	51 e4       	ldi	r21, 0x41	; 65
    1efa:	6e 89       	ldd	r22, Y+22	; 0x16
    1efc:	7f 89       	ldd	r23, Y+23	; 0x17
    1efe:	88 8d       	ldd	r24, Y+24	; 0x18
    1f00:	99 8d       	ldd	r25, Y+25	; 0x19
    1f02:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	bc 01       	movw	r22, r24
    1f0c:	cd 01       	movw	r24, r26
    1f0e:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	9f 8f       	std	Y+31, r25	; 0x1f
    1f18:	8e 8f       	std	Y+30, r24	; 0x1e
    1f1a:	0f c0       	rjmp	.+30     	; 0x1f3a <bitBangTransmit+0x3fa>
    1f1c:	80 e9       	ldi	r24, 0x90	; 144
    1f1e:	91 e0       	ldi	r25, 0x01	; 1
    1f20:	99 a3       	std	Y+33, r25	; 0x21
    1f22:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f24:	88 a1       	ldd	r24, Y+32	; 0x20
    1f26:	99 a1       	ldd	r25, Y+33	; 0x21
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <bitBangTransmit+0x3e8>
    1f2c:	99 a3       	std	Y+33, r25	; 0x21
    1f2e:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f32:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	9f 8f       	std	Y+31, r25	; 0x1f
    1f38:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f3c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f3e:	89 2b       	or	r24, r25
    1f40:	69 f7       	brne	.-38     	; 0x1f1c <bitBangTransmit+0x3dc>
    1f42:	3f c0       	rjmp	.+126    	; 0x1fc2 <bitBangTransmit+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f44:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f46:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f48:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f4a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f4c:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	9f 8f       	std	Y+31, r25	; 0x1f
    1f56:	8e 8f       	std	Y+30, r24	; 0x1e
    1f58:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f5a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f5c:	9b a3       	std	Y+35, r25	; 0x23
    1f5e:	8a a3       	std	Y+34, r24	; 0x22
    1f60:	8a a1       	ldd	r24, Y+34	; 0x22
    1f62:	9b a1       	ldd	r25, Y+35	; 0x23
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <bitBangTransmit+0x424>
    1f68:	9b a3       	std	Y+35, r25	; 0x23
    1f6a:	8a a3       	std	Y+34, r24	; 0x22
    1f6c:	2a c0       	rjmp	.+84     	; 0x1fc2 <bitBangTransmit+0x482>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	53 e4       	ldi	r21, 0x43	; 67
    1f76:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f78:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f7c:	98 89       	ldd	r25, Y+16	; 0x10
    1f7e:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    1f82:	18 16       	cp	r1, r24
    1f84:	ac f4       	brge	.+42     	; 0x1fb0 <bitBangTransmit+0x470>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1f86:	69 89       	ldd	r22, Y+17	; 0x11
    1f88:	7a 89       	ldd	r23, Y+18	; 0x12
    1f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8e:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	9d a3       	std	Y+37, r25	; 0x25
    1f98:	8c a3       	std	Y+36, r24	; 0x24
    1f9a:	8c a1       	ldd	r24, Y+36	; 0x24
    1f9c:	9d a1       	ldd	r25, Y+37	; 0x25
    1f9e:	9f a3       	std	Y+39, r25	; 0x27
    1fa0:	8e a3       	std	Y+38, r24	; 0x26
    1fa2:	8e a1       	ldd	r24, Y+38	; 0x26
    1fa4:	9f a1       	ldd	r25, Y+39	; 0x27
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <bitBangTransmit+0x466>
    1faa:	9f a3       	std	Y+39, r25	; 0x27
    1fac:	8e a3       	std	Y+38, r24	; 0x26
    1fae:	0f c0       	rjmp	.+30     	; 0x1fce <bitBangTransmit+0x48e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fb0:	6d 85       	ldd	r22, Y+13	; 0x0d
    1fb2:	7e 85       	ldd	r23, Y+14	; 0x0e
    1fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb6:	98 89       	ldd	r25, Y+16	; 0x10
    1fb8:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	8d 8b       	std	Y+21, r24	; 0x15
    1fc2:	8d 89       	ldd	r24, Y+21	; 0x15
    1fc4:	88 a7       	std	Y+40, r24	; 0x28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fc6:	88 a5       	ldd	r24, Y+40	; 0x28
    1fc8:	8a 95       	dec	r24
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <bitBangTransmit+0x488>
    1fcc:	88 a7       	std	Y+40, r24	; 0x28
	_delay_us(1);
}

void bitBangTransmit(uint8_t byte)
{
	for(int i=0; i<BYTE_LENGTH; i++)		// 8 bits in a byte
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	01 96       	adiw	r24, 0x01	; 1
    1fd4:	9a 83       	std	Y+2, r25	; 0x02
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	9a 81       	ldd	r25, Y+2	; 0x02
    1fdc:	08 97       	sbiw	r24, 0x08	; 8
    1fde:	0c f4       	brge	.+2      	; 0x1fe2 <bitBangTransmit+0x4a2>
    1fe0:	c4 cd       	rjmp	.-1144   	; 0x1b6a <bitBangTransmit+0x2a>
		CLK_low();
		_delay_us(1);
		CLK_high();
		_delay_us(1);
	}
}
    1fe2:	00 00       	nop
    1fe4:	cb 5b       	subi	r28, 0xBB	; 187
    1fe6:	df 4f       	sbci	r29, 0xFF	; 255
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	1f 91       	pop	r17
    1ff8:	0f 91       	pop	r16
    1ffa:	08 95       	ret

00001ffc <bitBangRecieve>:

uint16_t bitBangRecieve()
{
    1ffc:	cf 93       	push	r28
    1ffe:	df 93       	push	r29
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	c5 54       	subi	r28, 0x45	; 69
    2006:	d1 09       	sbc	r29, r1
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
	busyWait(); 
    2012:	93 db       	rcall	.-2266   	; 0x173a <busyWait>
	uint16_t receive = 0;					// Return the received data
    2014:	ce 01       	movw	r24, r28
    2016:	8c 5b       	subi	r24, 0xBC	; 188
    2018:	9f 4f       	sbci	r25, 0xFF	; 255
    201a:	fc 01       	movw	r30, r24
    201c:	11 82       	std	Z+1, r1	; 0x01
    201e:	10 82       	st	Z, r1
	for (int i = BYTE_LENGTH*2; i>0; i--)
    2020:	80 e1       	ldi	r24, 0x10	; 16
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	9a 83       	std	Y+2, r25	; 0x02
    2026:	89 83       	std	Y+1, r24	; 0x01
	{
		CLK_high();
    2028:	12 c2       	rjmp	.+1060   	; 0x244e <__stack+0x24f>
    202a:	5e db       	rcall	.-2372   	; 0x16e8 <CLK_high>
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a0 e8       	ldi	r26, 0x80	; 128
    2032:	bf e3       	ldi	r27, 0x3F	; 63
    2034:	8b 83       	std	Y+3, r24	; 0x03
    2036:	9c 83       	std	Y+4, r25	; 0x04
    2038:	ad 83       	std	Y+5, r26	; 0x05
    203a:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    203c:	2b ea       	ldi	r18, 0xAB	; 171
    203e:	3a ea       	ldi	r19, 0xAA	; 170
    2040:	4a ea       	ldi	r20, 0xAA	; 170
    2042:	50 e4       	ldi	r21, 0x40	; 64
    2044:	6b 81       	ldd	r22, Y+3	; 0x03
    2046:	7c 81       	ldd	r23, Y+4	; 0x04
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	88 a7       	std	Y+40, r24	; 0x28
    2056:	99 a7       	std	Y+41, r25	; 0x29
    2058:	aa a7       	std	Y+42, r26	; 0x2a
    205a:	bb a7       	std	Y+43, r27	; 0x2b
	__tmp2 = ((F_CPU) / 4e6) * __us;
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	50 e4       	ldi	r21, 0x40	; 64
    2064:	6b 81       	ldd	r22, Y+3	; 0x03
    2066:	7c 81       	ldd	r23, Y+4	; 0x04
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	9e 81       	ldd	r25, Y+6	; 0x06
    206c:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	8c a7       	std	Y+44, r24	; 0x2c
    2076:	9d a7       	std	Y+45, r25	; 0x2d
    2078:	ae a7       	std	Y+46, r26	; 0x2e
    207a:	bf a7       	std	Y+47, r27	; 0x2f
	if (__tmp < 1.0)
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e8       	ldi	r20, 0x80	; 128
    2082:	5f e3       	ldi	r21, 0x3F	; 63
    2084:	68 a5       	ldd	r22, Y+40	; 0x28
    2086:	79 a5       	ldd	r23, Y+41	; 0x29
    2088:	8a a5       	ldd	r24, Y+42	; 0x2a
    208a:	9b a5       	ldd	r25, Y+43	; 0x2b
    208c:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <__cmpsf2>
    2090:	88 23       	and	r24, r24
    2092:	1c f4       	brge	.+6      	; 0x209a <__DATA_REGION_LENGTH__+0x9a>
		__ticks = 1;
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	88 ab       	std	Y+48, r24	; 0x30
    2098:	c6 c0       	rjmp	.+396    	; 0x2226 <__stack+0x27>
	else if (__tmp2 > 65535)
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	3f ef       	ldi	r19, 0xFF	; 255
    209e:	4f e7       	ldi	r20, 0x7F	; 127
    20a0:	57 e4       	ldi	r21, 0x47	; 71
    20a2:	6c a5       	ldd	r22, Y+44	; 0x2c
    20a4:	7d a5       	ldd	r23, Y+45	; 0x2d
    20a6:	8e a5       	ldd	r24, Y+46	; 0x2e
    20a8:	9f a5       	ldd	r25, Y+47	; 0x2f
    20aa:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    20ae:	18 16       	cp	r1, r24
    20b0:	0c f0       	brlt	.+2      	; 0x20b4 <__DATA_REGION_LENGTH__+0xb4>
    20b2:	7b c0       	rjmp	.+246    	; 0x21aa <__DATA_REGION_LENGTH__+0x1aa>
	{
		_delay_ms(__us / 1000.0);
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	4a e7       	ldi	r20, 0x7A	; 122
    20ba:	54 e4       	ldi	r21, 0x44	; 68
    20bc:	6b 81       	ldd	r22, Y+3	; 0x03
    20be:	7c 81       	ldd	r23, Y+4	; 0x04
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <__divsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	89 ab       	std	Y+49, r24	; 0x31
    20ce:	9a ab       	std	Y+50, r25	; 0x32
    20d0:	ab ab       	std	Y+51, r26	; 0x33
    20d2:	bc ab       	std	Y+52, r27	; 0x34

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	4a e7       	ldi	r20, 0x7A	; 122
    20da:	55 e4       	ldi	r21, 0x45	; 69
    20dc:	69 a9       	ldd	r22, Y+49	; 0x31
    20de:	7a a9       	ldd	r23, Y+50	; 0x32
    20e0:	8b a9       	ldd	r24, Y+51	; 0x33
    20e2:	9c a9       	ldd	r25, Y+52	; 0x34
    20e4:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	8d ab       	std	Y+53, r24	; 0x35
    20ee:	9e ab       	std	Y+54, r25	; 0x36
    20f0:	af ab       	std	Y+55, r26	; 0x37
    20f2:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e8       	ldi	r20, 0x80	; 128
    20fa:	5f e3       	ldi	r21, 0x3F	; 63
    20fc:	6d a9       	ldd	r22, Y+53	; 0x35
    20fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2100:	8f a9       	ldd	r24, Y+55	; 0x37
    2102:	98 ad       	ldd	r25, Y+56	; 0x38
    2104:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <__cmpsf2>
    2108:	88 23       	and	r24, r24
    210a:	2c f4       	brge	.+10     	; 0x2116 <__DATA_REGION_LENGTH__+0x116>
		__ticks = 1;
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	9a af       	std	Y+58, r25	; 0x3a
    2112:	89 af       	std	Y+57, r24	; 0x39
    2114:	3f c0       	rjmp	.+126    	; 0x2194 <__DATA_REGION_LENGTH__+0x194>
	else if (__tmp > 65535)
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	3f ef       	ldi	r19, 0xFF	; 255
    211a:	4f e7       	ldi	r20, 0x7F	; 127
    211c:	57 e4       	ldi	r21, 0x47	; 71
    211e:	6d a9       	ldd	r22, Y+53	; 0x35
    2120:	7e a9       	ldd	r23, Y+54	; 0x36
    2122:	8f a9       	ldd	r24, Y+55	; 0x37
    2124:	98 ad       	ldd	r25, Y+56	; 0x38
    2126:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    212a:	18 16       	cp	r1, r24
    212c:	4c f5       	brge	.+82     	; 0x2180 <__DATA_REGION_LENGTH__+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e2       	ldi	r20, 0x20	; 32
    2134:	51 e4       	ldi	r21, 0x41	; 65
    2136:	69 a9       	ldd	r22, Y+49	; 0x31
    2138:	7a a9       	ldd	r23, Y+50	; 0x32
    213a:	8b a9       	ldd	r24, Y+51	; 0x33
    213c:	9c a9       	ldd	r25, Y+52	; 0x34
    213e:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	9a af       	std	Y+58, r25	; 0x3a
    2154:	89 af       	std	Y+57, r24	; 0x39
    2156:	0f c0       	rjmp	.+30     	; 0x2176 <__DATA_REGION_LENGTH__+0x176>
    2158:	80 e9       	ldi	r24, 0x90	; 144
    215a:	91 e0       	ldi	r25, 0x01	; 1
    215c:	9c af       	std	Y+60, r25	; 0x3c
    215e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2160:	8b ad       	ldd	r24, Y+59	; 0x3b
    2162:	9c ad       	ldd	r25, Y+60	; 0x3c
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <__DATA_REGION_LENGTH__+0x164>
    2168:	9c af       	std	Y+60, r25	; 0x3c
    216a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216c:	89 ad       	ldd	r24, Y+57	; 0x39
    216e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	9a af       	std	Y+58, r25	; 0x3a
    2174:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2176:	89 ad       	ldd	r24, Y+57	; 0x39
    2178:	9a ad       	ldd	r25, Y+58	; 0x3a
    217a:	89 2b       	or	r24, r25
    217c:	69 f7       	brne	.-38     	; 0x2158 <__DATA_REGION_LENGTH__+0x158>
    217e:	53 c0       	rjmp	.+166    	; 0x2226 <__stack+0x27>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2180:	6d a9       	ldd	r22, Y+53	; 0x35
    2182:	7e a9       	ldd	r23, Y+54	; 0x36
    2184:	8f a9       	ldd	r24, Y+55	; 0x37
    2186:	98 ad       	ldd	r25, Y+56	; 0x38
    2188:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9a af       	std	Y+58, r25	; 0x3a
    2192:	89 af       	std	Y+57, r24	; 0x39
    2194:	89 ad       	ldd	r24, Y+57	; 0x39
    2196:	9a ad       	ldd	r25, Y+58	; 0x3a
    2198:	9e af       	std	Y+62, r25	; 0x3e
    219a:	8d af       	std	Y+61, r24	; 0x3d
    219c:	8d ad       	ldd	r24, Y+61	; 0x3d
    219e:	9e ad       	ldd	r25, Y+62	; 0x3e
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <__DATA_REGION_LENGTH__+0x1a0>
    21a4:	9e af       	std	Y+62, r25	; 0x3e
    21a6:	8d af       	std	Y+61, r24	; 0x3d
    21a8:	3e c0       	rjmp	.+124    	; 0x2226 <__stack+0x27>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	4f e7       	ldi	r20, 0x7F	; 127
    21b0:	53 e4       	ldi	r21, 0x43	; 67
    21b2:	68 a5       	ldd	r22, Y+40	; 0x28
    21b4:	79 a5       	ldd	r23, Y+41	; 0x29
    21b6:	8a a5       	ldd	r24, Y+42	; 0x2a
    21b8:	9b a5       	ldd	r25, Y+43	; 0x2b
    21ba:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    21be:	18 16       	cp	r1, r24
    21c0:	4c f5       	brge	.+82     	; 0x2214 <__stack+0x15>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    21c2:	6c a5       	ldd	r22, Y+44	; 0x2c
    21c4:	7d a5       	ldd	r23, Y+45	; 0x2d
    21c6:	8e a5       	ldd	r24, Y+46	; 0x2e
    21c8:	9f a5       	ldd	r25, Y+47	; 0x2f
    21ca:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9e 01       	movw	r18, r28
    21d4:	21 5c       	subi	r18, 0xC1	; 193
    21d6:	3f 4f       	sbci	r19, 0xFF	; 255
    21d8:	f9 01       	movw	r30, r18
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
    21de:	ce 01       	movw	r24, r28
    21e0:	8f 5b       	subi	r24, 0xBF	; 191
    21e2:	9f 4f       	sbci	r25, 0xFF	; 255
    21e4:	9e 01       	movw	r18, r28
    21e6:	21 5c       	subi	r18, 0xC1	; 193
    21e8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ea:	f9 01       	movw	r30, r18
    21ec:	20 81       	ld	r18, Z
    21ee:	31 81       	ldd	r19, Z+1	; 0x01
    21f0:	fc 01       	movw	r30, r24
    21f2:	31 83       	std	Z+1, r19	; 0x01
    21f4:	20 83       	st	Z, r18
    21f6:	ce 01       	movw	r24, r28
    21f8:	8f 5b       	subi	r24, 0xBF	; 191
    21fa:	9f 4f       	sbci	r25, 0xFF	; 255
    21fc:	fc 01       	movw	r30, r24
    21fe:	80 81       	ld	r24, Z
    2200:	91 81       	ldd	r25, Z+1	; 0x01
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <__stack+0x3>
    2206:	9e 01       	movw	r18, r28
    2208:	2f 5b       	subi	r18, 0xBF	; 191
    220a:	3f 4f       	sbci	r19, 0xFF	; 255
    220c:	f9 01       	movw	r30, r18
    220e:	91 83       	std	Z+1, r25	; 0x01
    2210:	80 83       	st	Z, r24
    2212:	1c c0       	rjmp	.+56     	; 0x224c <__stack+0x4d>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2214:	68 a5       	ldd	r22, Y+40	; 0x28
    2216:	79 a5       	ldd	r23, Y+41	; 0x29
    2218:	8a a5       	ldd	r24, Y+42	; 0x2a
    221a:	9b a5       	ldd	r25, Y+43	; 0x2b
    221c:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	88 ab       	std	Y+48, r24	; 0x30
    2226:	ce 01       	movw	r24, r28
    2228:	8d 5b       	subi	r24, 0xBD	; 189
    222a:	9f 4f       	sbci	r25, 0xFF	; 255
    222c:	28 a9       	ldd	r18, Y+48	; 0x30
    222e:	fc 01       	movw	r30, r24
    2230:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2232:	ce 01       	movw	r24, r28
    2234:	8d 5b       	subi	r24, 0xBD	; 189
    2236:	9f 4f       	sbci	r25, 0xFF	; 255
    2238:	fc 01       	movw	r30, r24
    223a:	80 81       	ld	r24, Z
    223c:	28 2f       	mov	r18, r24
    223e:	2a 95       	dec	r18
    2240:	f1 f7       	brne	.-4      	; 0x223e <__stack+0x3f>
    2242:	ce 01       	movw	r24, r28
    2244:	8d 5b       	subi	r24, 0xBD	; 189
    2246:	9f 4f       	sbci	r25, 0xFF	; 255
    2248:	fc 01       	movw	r30, r24
		_delay_us(1);
		CLK_low();
    224a:	20 83       	st	Z, r18
    224c:	5e da       	rcall	.-2884   	; 0x170a <CLK_low>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a0 e8       	ldi	r26, 0x80	; 128
    2254:	bf e3       	ldi	r27, 0x3F	; 63
    2256:	88 87       	std	Y+8, r24	; 0x08
    2258:	99 87       	std	Y+9, r25	; 0x09
    225a:	aa 87       	std	Y+10, r26	; 0x0a
    225c:	bb 87       	std	Y+11, r27	; 0x0b
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    225e:	2b ea       	ldi	r18, 0xAB	; 171
    2260:	3a ea       	ldi	r19, 0xAA	; 170
    2262:	4a ea       	ldi	r20, 0xAA	; 170
    2264:	50 e4       	ldi	r21, 0x40	; 64
    2266:	68 85       	ldd	r22, Y+8	; 0x08
    2268:	79 85       	ldd	r23, Y+9	; 0x09
    226a:	8a 85       	ldd	r24, Y+10	; 0x0a
    226c:	9b 85       	ldd	r25, Y+11	; 0x0b
    226e:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	8c 87       	std	Y+12, r24	; 0x0c
    2278:	9d 87       	std	Y+13, r25	; 0x0d
    227a:	ae 87       	std	Y+14, r26	; 0x0e
    227c:	bf 87       	std	Y+15, r27	; 0x0f
	__tmp2 = ((F_CPU) / 4e6) * __us;
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	40 e8       	ldi	r20, 0x80	; 128
    2284:	50 e4       	ldi	r21, 0x40	; 64
    2286:	68 85       	ldd	r22, Y+8	; 0x08
    2288:	79 85       	ldd	r23, Y+9	; 0x09
    228a:	8a 85       	ldd	r24, Y+10	; 0x0a
    228c:	9b 85       	ldd	r25, Y+11	; 0x0b
    228e:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	88 8b       	std	Y+16, r24	; 0x10
    2298:	99 8b       	std	Y+17, r25	; 0x11
    229a:	aa 8b       	std	Y+18, r26	; 0x12
    229c:	bb 8b       	std	Y+19, r27	; 0x13
	if (__tmp < 1.0)
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e8       	ldi	r20, 0x80	; 128
    22a4:	5f e3       	ldi	r21, 0x3F	; 63
    22a6:	6c 85       	ldd	r22, Y+12	; 0x0c
    22a8:	7d 85       	ldd	r23, Y+13	; 0x0d
    22aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    22ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    22ae:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <__cmpsf2>
    22b2:	88 23       	and	r24, r24
    22b4:	1c f4       	brge	.+6      	; 0x22bc <__stack+0xbd>
		__ticks = 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	8c 8b       	std	Y+20, r24	; 0x14
    22ba:	b2 c0       	rjmp	.+356    	; 0x2420 <__stack+0x221>
	else if (__tmp2 > 65535)
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	3f ef       	ldi	r19, 0xFF	; 255
    22c0:	4f e7       	ldi	r20, 0x7F	; 127
    22c2:	57 e4       	ldi	r21, 0x47	; 71
    22c4:	68 89       	ldd	r22, Y+16	; 0x10
    22c6:	79 89       	ldd	r23, Y+17	; 0x11
    22c8:	8a 89       	ldd	r24, Y+18	; 0x12
    22ca:	9b 89       	ldd	r25, Y+19	; 0x13
    22cc:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    22d0:	18 16       	cp	r1, r24
    22d2:	0c f0       	brlt	.+2      	; 0x22d6 <__stack+0xd7>
    22d4:	7b c0       	rjmp	.+246    	; 0x23cc <__stack+0x1cd>
	{
		_delay_ms(__us / 1000.0);
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	4a e7       	ldi	r20, 0x7A	; 122
    22dc:	54 e4       	ldi	r21, 0x44	; 68
    22de:	68 85       	ldd	r22, Y+8	; 0x08
    22e0:	79 85       	ldd	r23, Y+9	; 0x09
    22e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    22e6:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <__divsf3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	8d 8b       	std	Y+21, r24	; 0x15
    22f0:	9e 8b       	std	Y+22, r25	; 0x16
    22f2:	af 8b       	std	Y+23, r26	; 0x17
    22f4:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	4a e7       	ldi	r20, 0x7A	; 122
    22fc:	55 e4       	ldi	r21, 0x45	; 69
    22fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2300:	7e 89       	ldd	r23, Y+22	; 0x16
    2302:	8f 89       	ldd	r24, Y+23	; 0x17
    2304:	98 8d       	ldd	r25, Y+24	; 0x18
    2306:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	89 8f       	std	Y+25, r24	; 0x19
    2310:	9a 8f       	std	Y+26, r25	; 0x1a
    2312:	ab 8f       	std	Y+27, r26	; 0x1b
    2314:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e8       	ldi	r20, 0x80	; 128
    231c:	5f e3       	ldi	r21, 0x3F	; 63
    231e:	69 8d       	ldd	r22, Y+25	; 0x19
    2320:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2322:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2324:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2326:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <__cmpsf2>
    232a:	88 23       	and	r24, r24
    232c:	2c f4       	brge	.+10     	; 0x2338 <__stack+0x139>
		__ticks = 1;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	9e 8f       	std	Y+30, r25	; 0x1e
    2334:	8d 8f       	std	Y+29, r24	; 0x1d
    2336:	3f c0       	rjmp	.+126    	; 0x23b6 <__stack+0x1b7>
	else if (__tmp > 65535)
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	3f ef       	ldi	r19, 0xFF	; 255
    233c:	4f e7       	ldi	r20, 0x7F	; 127
    233e:	57 e4       	ldi	r21, 0x47	; 71
    2340:	69 8d       	ldd	r22, Y+25	; 0x19
    2342:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2344:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2346:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2348:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    234c:	18 16       	cp	r1, r24
    234e:	4c f5       	brge	.+82     	; 0x23a2 <__stack+0x1a3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e2       	ldi	r20, 0x20	; 32
    2356:	51 e4       	ldi	r21, 0x41	; 65
    2358:	6d 89       	ldd	r22, Y+21	; 0x15
    235a:	7e 89       	ldd	r23, Y+22	; 0x16
    235c:	8f 89       	ldd	r24, Y+23	; 0x17
    235e:	98 8d       	ldd	r25, Y+24	; 0x18
    2360:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	bc 01       	movw	r22, r24
    236a:	cd 01       	movw	r24, r26
    236c:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	9e 8f       	std	Y+30, r25	; 0x1e
    2376:	8d 8f       	std	Y+29, r24	; 0x1d
    2378:	0f c0       	rjmp	.+30     	; 0x2398 <__stack+0x199>
    237a:	80 e9       	ldi	r24, 0x90	; 144
    237c:	91 e0       	ldi	r25, 0x01	; 1
    237e:	98 a3       	std	Y+32, r25	; 0x20
    2380:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2382:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2384:	98 a1       	ldd	r25, Y+32	; 0x20
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <__stack+0x187>
    238a:	98 a3       	std	Y+32, r25	; 0x20
    238c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2390:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	9e 8f       	std	Y+30, r25	; 0x1e
    2396:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2398:	8d 8d       	ldd	r24, Y+29	; 0x1d
    239a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    239c:	89 2b       	or	r24, r25
    239e:	69 f7       	brne	.-38     	; 0x237a <__stack+0x17b>
    23a0:	3f c0       	rjmp	.+126    	; 0x2420 <__stack+0x221>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a2:	69 8d       	ldd	r22, Y+25	; 0x19
    23a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23aa:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9e 8f       	std	Y+30, r25	; 0x1e
    23b4:	8d 8f       	std	Y+29, r24	; 0x1d
    23b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23ba:	9a a3       	std	Y+34, r25	; 0x22
    23bc:	89 a3       	std	Y+33, r24	; 0x21
    23be:	89 a1       	ldd	r24, Y+33	; 0x21
    23c0:	9a a1       	ldd	r25, Y+34	; 0x22
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <__stack+0x1c3>
    23c6:	9a a3       	std	Y+34, r25	; 0x22
    23c8:	89 a3       	std	Y+33, r24	; 0x21
    23ca:	2a c0       	rjmp	.+84     	; 0x2420 <__stack+0x221>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	4f e7       	ldi	r20, 0x7F	; 127
    23d2:	53 e4       	ldi	r21, 0x43	; 67
    23d4:	6c 85       	ldd	r22, Y+12	; 0x0c
    23d6:	7d 85       	ldd	r23, Y+13	; 0x0d
    23d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    23da:	9f 85       	ldd	r25, Y+15	; 0x0f
    23dc:	0e 94 65 36 	call	0x6cca	; 0x6cca <__gesf2>
    23e0:	18 16       	cp	r1, r24
    23e2:	ac f4       	brge	.+42     	; 0x240e <__stack+0x20f>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    23e4:	68 89       	ldd	r22, Y+16	; 0x10
    23e6:	79 89       	ldd	r23, Y+17	; 0x11
    23e8:	8a 89       	ldd	r24, Y+18	; 0x12
    23ea:	9b 89       	ldd	r25, Y+19	; 0x13
    23ec:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	9c a3       	std	Y+36, r25	; 0x24
    23f6:	8b a3       	std	Y+35, r24	; 0x23
    23f8:	8b a1       	ldd	r24, Y+35	; 0x23
    23fa:	9c a1       	ldd	r25, Y+36	; 0x24
    23fc:	9e a3       	std	Y+38, r25	; 0x26
    23fe:	8d a3       	std	Y+37, r24	; 0x25
    2400:	8d a1       	ldd	r24, Y+37	; 0x25
    2402:	9e a1       	ldd	r25, Y+38	; 0x26
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <__stack+0x205>
    2408:	9e a3       	std	Y+38, r25	; 0x26
    240a:	8d a3       	std	Y+37, r24	; 0x25
    240c:	0f c0       	rjmp	.+30     	; 0x242c <__stack+0x22d>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    240e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2410:	7d 85       	ldd	r23, Y+13	; 0x0d
    2412:	8e 85       	ldd	r24, Y+14	; 0x0e
    2414:	9f 85       	ldd	r25, Y+15	; 0x0f
    2416:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	8c 8b       	std	Y+20, r24	; 0x14
    2420:	8c 89       	ldd	r24, Y+20	; 0x14
    2422:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2424:	8f a1       	ldd	r24, Y+39	; 0x27
    2426:	8a 95       	dec	r24
    2428:	f1 f7       	brne	.-4      	; 0x2426 <__stack+0x227>
		_delay_us(1);
		uint8_t pin = readPin();	
    242a:	8f a3       	std	Y+39, r24	; 0x27
    242c:	28 d8       	rcall	.-4016   	; 0x147e <readPin>
    242e:	8f 83       	std	Y+7, r24	; 0x07
		bitWrite(&receive, i-1, pin);   // Fetch bit into array
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	2f ef       	ldi	r18, 0xFF	; 255
    2434:	28 0f       	add	r18, r24
    2436:	ce 01       	movw	r24, r28
    2438:	8c 5b       	subi	r24, 0xBC	; 188
    243a:	9f 4f       	sbci	r25, 0xFF	; 255
    243c:	4f 81       	ldd	r20, Y+7	; 0x07
    243e:	62 2f       	mov	r22, r18
    2440:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <bitWrite>

uint16_t bitBangRecieve()
{
	busyWait(); 
	uint16_t receive = 0;					// Return the received data
	for (int i = BYTE_LENGTH*2; i>0; i--)
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	9a 81       	ldd	r25, Y+2	; 0x02
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	9a 83       	std	Y+2, r25	; 0x02
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	9a 81       	ldd	r25, Y+2	; 0x02
    2452:	18 16       	cp	r1, r24
    2454:	19 06       	cpc	r1, r25
    2456:	0c f4       	brge	.+2      	; 0x245a <__stack+0x25b>
    2458:	e8 cd       	rjmp	.-1072   	; 0x202a <__DATA_REGION_LENGTH__+0x2a>
		CLK_low();
		_delay_us(1);
		uint8_t pin = readPin();	
		bitWrite(&receive, i-1, pin);   // Fetch bit into array
	}
	receive = receive>>4;
    245a:	ce 01       	movw	r24, r28
    245c:	8c 5b       	subi	r24, 0xBC	; 188
    245e:	9f 4f       	sbci	r25, 0xFF	; 255
    2460:	fc 01       	movw	r30, r24
    2462:	80 81       	ld	r24, Z
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	9c 01       	movw	r18, r24
    2468:	32 95       	swap	r19
    246a:	22 95       	swap	r18
    246c:	2f 70       	andi	r18, 0x0F	; 15
    246e:	23 27       	eor	r18, r19
    2470:	3f 70       	andi	r19, 0x0F	; 15
    2472:	23 27       	eor	r18, r19
    2474:	ce 01       	movw	r24, r28
    2476:	8c 5b       	subi	r24, 0xBC	; 188
    2478:	9f 4f       	sbci	r25, 0xFF	; 255
    247a:	fc 01       	movw	r30, r24
    247c:	31 83       	std	Z+1, r19	; 0x01
    247e:	20 83       	st	Z, r18
	return receive;
    2480:	ce 01       	movw	r24, r28
    2482:	8c 5b       	subi	r24, 0xBC	; 188
    2484:	9f 4f       	sbci	r25, 0xFF	; 255
    2486:	fc 01       	movw	r30, r24
    2488:	80 81       	ld	r24, Z
    248a:	91 81       	ldd	r25, Z+1	; 0x01
    248c:	cb 5b       	subi	r28, 0xBB	; 187
    248e:	df 4f       	sbci	r29, 0xFF	; 255
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	de bf       	out	0x3e, r29	; 62
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	cd bf       	out	0x3d, r28	; 61
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	08 95       	ret

000024a0 <UART_InitUART>:
    // Wait for new character received
    while ((UCSR0A & (1 << 7)) == 0) {
    }
    // Then return it
    return UDR0;
}
    24a0:	0f 93       	push	r16
    24a2:	1f 93       	push	r17
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	27 97       	sbiw	r28, 0x07	; 7
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	cd bf       	out	0x3d, r28	; 61
    24b8:	69 83       	std	Y+1, r22	; 0x01
    24ba:	7a 83       	std	Y+2, r23	; 0x02
    24bc:	8b 83       	std	Y+3, r24	; 0x03
    24be:	9c 83       	std	Y+4, r25	; 0x04
    24c0:	4d 83       	std	Y+5, r20	; 0x05
    24c2:	2e 83       	std	Y+6, r18	; 0x06
    24c4:	0f 83       	std	Y+7, r16	; 0x07
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ca:	ab 81       	ldd	r26, Y+3	; 0x03
    24cc:	bc 81       	ldd	r27, Y+4	; 0x04
    24ce:	8c 32       	cpi	r24, 0x2C	; 44
    24d0:	91 40       	sbci	r25, 0x01	; 1
    24d2:	a1 05       	cpc	r26, r1
    24d4:	b1 05       	cpc	r27, r1
    24d6:	08 f4       	brcc	.+2      	; 0x24da <UART_InitUART+0x3a>
    24d8:	6e c0       	rjmp	.+220    	; 0x25b6 <UART_InitUART+0x116>
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	9a 81       	ldd	r25, Y+2	; 0x02
    24de:	ab 81       	ldd	r26, Y+3	; 0x03
    24e0:	bc 81       	ldd	r27, Y+4	; 0x04
    24e2:	81 30       	cpi	r24, 0x01	; 1
    24e4:	92 4c       	sbci	r25, 0xC2	; 194
    24e6:	a1 40       	sbci	r26, 0x01	; 1
    24e8:	b1 05       	cpc	r27, r1
    24ea:	08 f0       	brcs	.+2      	; 0x24ee <UART_InitUART+0x4e>
    24ec:	64 c0       	rjmp	.+200    	; 0x25b6 <UART_InitUART+0x116>
    24ee:	8d 81       	ldd	r24, Y+5	; 0x05
    24f0:	85 30       	cpi	r24, 0x05	; 5
    24f2:	08 f4       	brcc	.+2      	; 0x24f6 <UART_InitUART+0x56>
    24f4:	60 c0       	rjmp	.+192    	; 0x25b6 <UART_InitUART+0x116>
    24f6:	8d 81       	ldd	r24, Y+5	; 0x05
    24f8:	89 30       	cpi	r24, 0x09	; 9
    24fa:	08 f0       	brcs	.+2      	; 0x24fe <UART_InitUART+0x5e>
    24fc:	5c c0       	rjmp	.+184    	; 0x25b6 <UART_InitUART+0x116>
    24fe:	80 ec       	ldi	r24, 0xC0	; 192
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	20 e2       	ldi	r18, 0x20	; 32
    2504:	fc 01       	movw	r30, r24
    2506:	20 83       	st	Z, r18
    2508:	81 ec       	ldi	r24, 0xC1	; 193
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	28 e1       	ldi	r18, 0x18	; 24
    250e:	fc 01       	movw	r30, r24
    2510:	20 83       	st	Z, r18
    2512:	8f 81       	ldd	r24, Y+7	; 0x07
    2514:	88 23       	and	r24, r24
    2516:	49 f0       	breq	.+18     	; 0x252a <UART_InitUART+0x8a>
    2518:	81 ec       	ldi	r24, 0xC1	; 193
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	21 ec       	ldi	r18, 0xC1	; 193
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	f9 01       	movw	r30, r18
    2522:	20 81       	ld	r18, Z
    2524:	20 68       	ori	r18, 0x80	; 128
    2526:	fc 01       	movw	r30, r24
    2528:	20 83       	st	Z, r18
    252a:	82 ec       	ldi	r24, 0xC2	; 194
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	2d 81       	ldd	r18, Y+5	; 0x05
    2530:	25 50       	subi	r18, 0x05	; 5
    2532:	22 0f       	add	r18, r18
    2534:	fc 01       	movw	r30, r24
    2536:	20 83       	st	Z, r18
    2538:	8e 81       	ldd	r24, Y+6	; 0x06
    253a:	85 34       	cpi	r24, 0x45	; 69
    253c:	51 f4       	brne	.+20     	; 0x2552 <UART_InitUART+0xb2>
    253e:	82 ec       	ldi	r24, 0xC2	; 194
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	22 ec       	ldi	r18, 0xC2	; 194
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	f9 01       	movw	r30, r18
    2548:	20 81       	ld	r18, Z
    254a:	20 62       	ori	r18, 0x20	; 32
    254c:	fc 01       	movw	r30, r24
    254e:	20 83       	st	Z, r18
    2550:	0c c0       	rjmp	.+24     	; 0x256a <UART_InitUART+0xca>
    2552:	8e 81       	ldd	r24, Y+6	; 0x06
    2554:	8f 34       	cpi	r24, 0x4F	; 79
    2556:	49 f4       	brne	.+18     	; 0x256a <UART_InitUART+0xca>
    2558:	82 ec       	ldi	r24, 0xC2	; 194
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	22 ec       	ldi	r18, 0xC2	; 194
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	f9 01       	movw	r30, r18
    2562:	20 81       	ld	r18, Z
    2564:	20 63       	ori	r18, 0x30	; 48
    2566:	fc 01       	movw	r30, r24
    2568:	20 83       	st	Z, r18
    256a:	04 ec       	ldi	r16, 0xC4	; 196
    256c:	10 e0       	ldi	r17, 0x00	; 0
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	9a 81       	ldd	r25, Y+2	; 0x02
    2572:	ab 81       	ldd	r26, Y+3	; 0x03
    2574:	bc 81       	ldd	r27, Y+4	; 0x04
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	aa 1f       	adc	r26, r26
    257c:	bb 1f       	adc	r27, r27
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	aa 1f       	adc	r26, r26
    2584:	bb 1f       	adc	r27, r27
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	aa 1f       	adc	r26, r26
    258c:	bb 1f       	adc	r27, r27
    258e:	88 0f       	add	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	aa 1f       	adc	r26, r26
    2594:	bb 1f       	adc	r27, r27
    2596:	9c 01       	movw	r18, r24
    2598:	ad 01       	movw	r20, r26
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	94 e2       	ldi	r25, 0x24	; 36
    259e:	a4 ef       	ldi	r26, 0xF4	; 244
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	bc 01       	movw	r22, r24
    25a4:	cd 01       	movw	r24, r26
    25a6:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__udivmodsi4>
    25aa:	da 01       	movw	r26, r20
    25ac:	c9 01       	movw	r24, r18
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f8 01       	movw	r30, r16
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	80 83       	st	Z, r24
    25b6:	00 00       	nop
    25b8:	27 96       	adiw	r28, 0x07	; 7
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	f8 94       	cli
    25be:	de bf       	out	0x3e, r29	; 62
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	cd bf       	out	0x3d, r28	; 61
    25c4:	df 91       	pop	r29
    25c6:	cf 91       	pop	r28
    25c8:	1f 91       	pop	r17
    25ca:	0f 91       	pop	r16
    25cc:	08 95       	ret

000025ce <UART_SendChar>:
Awaits transmitter register ready.
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void UART_SendChar(char Tegn) {
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	1f 92       	push	r1
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	89 83       	std	Y+1, r24	; 0x01
    // Wait for transmitter register empty (ready for new character)
    while ((UCSR0A & (1 << 5)) == 0) {
    25da:	00 00       	nop
    25dc:	80 ec       	ldi	r24, 0xC0	; 192
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	fc 01       	movw	r30, r24
    25e2:	80 81       	ld	r24, Z
    25e4:	88 2f       	mov	r24, r24
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	80 72       	andi	r24, 0x20	; 32
    25ea:	99 27       	eor	r25, r25
    25ec:	89 2b       	or	r24, r25
    25ee:	b1 f3       	breq	.-20     	; 0x25dc <UART_SendChar+0xe>
    }
    // Then send the character
    UDR0 = Tegn;
    25f0:	86 ec       	ldi	r24, 0xC6	; 198
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	29 81       	ldd	r18, Y+1	; 0x01
    25f6:	fc 01       	movw	r30, r24
    25f8:	20 83       	st	Z, r18
}
    25fa:	00 00       	nop
    25fc:	0f 90       	pop	r0
    25fe:	df 91       	pop	r29
    2600:	cf 91       	pop	r28
    2602:	08 95       	ret

00002604 <UART_PutChar>:

/*************************************************************************
	Same functionality as SendChar but with prototype that allows compilation without warning when used in combination with FDEV_SETUP_STREAM
*************************************************************************/
int UART_PutChar(char c, FILE *file)
{
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	00 d0       	rcall	.+0      	; 0x260a <UART_PutChar+0x6>
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	7b 83       	std	Y+3, r23	; 0x03
    2612:	6a 83       	std	Y+2, r22	; 0x02
	UART_SendChar(c);
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	db df       	rcall	.-74     	; 0x25ce <UART_SendChar>
	return 0;
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	90 e0       	ldi	r25, 0x00	; 0
}
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	df 91       	pop	r29
    2624:	cf 91       	pop	r28
    2626:	08 95       	ret

00002628 <UART_SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/

void UART_SendString(char* Streng) {
    2628:	cf 93       	push	r28
    262a:	df 93       	push	r29
    262c:	1f 92       	push	r1
    262e:	1f 92       	push	r1
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	9a 83       	std	Y+2, r25	; 0x02
    2636:	89 83       	std	Y+1, r24	; 0x01
    // Repeat until zero-termination
    while (*Streng != 0) {
    2638:	0a c0       	rjmp	.+20     	; 0x264e <UART_SendString+0x26>
        // Send the character pointed to by "Streng"
        UART_SendChar(*Streng);
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	9a 81       	ldd	r25, Y+2	; 0x02
    263e:	fc 01       	movw	r30, r24
    2640:	80 81       	ld	r24, Z
    2642:	c5 df       	rcall	.-118    	; 0x25ce <UART_SendChar>
        // Advance the pointer one step
        Streng++;
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	9a 81       	ldd	r25, Y+2	; 0x02
    2648:	01 96       	adiw	r24, 0x01	; 1
    264a:	9a 83       	std	Y+2, r25	; 0x02
    264c:	89 83       	std	Y+1, r24	; 0x01
   Streng: Pointer to the string. 
*************************************************************************/

void UART_SendString(char* Streng) {
    // Repeat until zero-termination
    while (*Streng != 0) {
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	9a 81       	ldd	r25, Y+2	; 0x02
    2652:	fc 01       	movw	r30, r24
    2654:	80 81       	ld	r24, Z
    2656:	88 23       	and	r24, r24
    2658:	81 f7       	brne	.-32     	; 0x263a <UART_SendString+0x12>
        // Send the character pointed to by "Streng"
        UART_SendChar(*Streng);
        // Advance the pointer one step
        Streng++;
    }
}
    265a:	00 00       	nop
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	df 91       	pop	r29
    2662:	cf 91       	pop	r28
    2664:	08 95       	ret

00002666 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    2666:	cf 93       	push	r28
    2668:	df 93       	push	r29
    266a:	00 d0       	rcall	.+0      	; 0x266c <pvPortMalloc+0x6>
    266c:	1f 92       	push	r1
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
    2672:	9c 83       	std	Y+4, r25	; 0x04
    2674:	8b 83       	std	Y+3, r24	; 0x03
    void * pvReturn = NULL;
    2676:	1a 82       	std	Y+2, r1	; 0x02
    2678:	19 82       	std	Y+1, r1	; 0x01
                }
            }
        }
    #endif

    vTaskSuspendAll();
    267a:	0e 94 a0 21 	call	0x4340	; 0x4340 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
    267e:	80 91 86 13 	lds	r24, 0x1386	; 0x801386 <pucAlignedHeap.2118>
    2682:	90 91 87 13 	lds	r25, 0x1387	; 0x801387 <pucAlignedHeap.2118+0x1>
    2686:	89 2b       	or	r24, r25
    2688:	31 f4       	brne	.+12     	; 0x2696 <pvPortMalloc+0x30>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    268a:	81 ec       	ldi	r24, 0xC1	; 193
    268c:	99 e0       	ldi	r25, 0x09	; 9
    268e:	90 93 87 13 	sts	0x1387, r25	; 0x801387 <pucAlignedHeap.2118+0x1>
    2692:	80 93 86 13 	sts	0x1386, r24	; 0x801386 <pucAlignedHeap.2118>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	9c 81       	ldd	r25, Y+4	; 0x04
    269a:	89 2b       	or	r24, r25
    269c:	91 f1       	breq	.+100    	; 0x2702 <pvPortMalloc+0x9c>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    269e:	20 91 84 13 	lds	r18, 0x1384	; 0x801384 <xNextFreeByte>
    26a2:	30 91 85 13 	lds	r19, 0x1385	; 0x801385 <xNextFreeByte+0x1>
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	82 0f       	add	r24, r18
    26ac:	93 1f       	adc	r25, r19
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
    26ae:	83 3c       	cpi	r24, 0xC3	; 195
    26b0:	99 40       	sbci	r25, 0x09	; 9
    26b2:	38 f5       	brcc	.+78     	; 0x2702 <pvPortMalloc+0x9c>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
    26b4:	20 91 84 13 	lds	r18, 0x1384	; 0x801384 <xNextFreeByte>
    26b8:	30 91 85 13 	lds	r19, 0x1385	; 0x801385 <xNextFreeByte+0x1>
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	9c 81       	ldd	r25, Y+4	; 0x04
    26c0:	28 0f       	add	r18, r24
    26c2:	39 1f       	adc	r19, r25
    26c4:	80 91 84 13 	lds	r24, 0x1384	; 0x801384 <xNextFreeByte>
    26c8:	90 91 85 13 	lds	r25, 0x1385	; 0x801385 <xNextFreeByte+0x1>
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    26cc:	82 17       	cp	r24, r18
    26ce:	93 07       	cpc	r25, r19
    26d0:	c0 f4       	brcc	.+48     	; 0x2702 <pvPortMalloc+0x9c>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
    26d2:	20 91 86 13 	lds	r18, 0x1386	; 0x801386 <pucAlignedHeap.2118>
    26d6:	30 91 87 13 	lds	r19, 0x1387	; 0x801387 <pucAlignedHeap.2118+0x1>
    26da:	80 91 84 13 	lds	r24, 0x1384	; 0x801384 <xNextFreeByte>
    26de:	90 91 85 13 	lds	r25, 0x1385	; 0x801385 <xNextFreeByte+0x1>
    26e2:	82 0f       	add	r24, r18
    26e4:	93 1f       	adc	r25, r19
    26e6:	9a 83       	std	Y+2, r25	; 0x02
    26e8:	89 83       	std	Y+1, r24	; 0x01
            xNextFreeByte += xWantedSize;
    26ea:	20 91 84 13 	lds	r18, 0x1384	; 0x801384 <xNextFreeByte>
    26ee:	30 91 85 13 	lds	r19, 0x1385	; 0x801385 <xNextFreeByte+0x1>
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	9c 81       	ldd	r25, Y+4	; 0x04
    26f6:	82 0f       	add	r24, r18
    26f8:	93 1f       	adc	r25, r19
    26fa:	90 93 85 13 	sts	0x1385, r25	; 0x801385 <xNextFreeByte+0x1>
    26fe:	80 93 84 13 	sts	0x1384, r24	; 0x801384 <xNextFreeByte>
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    2702:	0e 94 ad 21 	call	0x435a	; 0x435a <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
}
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	df 91       	pop	r29
    2714:	cf 91       	pop	r28
    2716:	08 95       	ret

00002718 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	1f 92       	push	r1
    271e:	1f 92       	push	r1
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	9a 83       	std	Y+2, r25	; 0x02
    2726:	89 83       	std	Y+1, r24	; 0x01
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
    2728:	00 00       	nop
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	08 95       	ret

00002734 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    2734:	cf 93       	push	r28
    2736:	df 93       	push	r29
    2738:	1f 92       	push	r1
    273a:	1f 92       	push	r1
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	9a 83       	std	Y+2, r25	; 0x02
    2742:	89 83       	std	Y+1, r24	; 0x01
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	9a 81       	ldd	r25, Y+2	; 0x02
    2748:	9c 01       	movw	r18, r24
    274a:	2d 5f       	subi	r18, 0xFD	; 253
    274c:	3f 4f       	sbci	r19, 0xFF	; 255
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	9a 81       	ldd	r25, Y+2	; 0x02
    2752:	fc 01       	movw	r30, r24
    2754:	32 83       	std	Z+2, r19	; 0x02
    2756:	21 83       	std	Z+1, r18	; 0x01

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	9a 81       	ldd	r25, Y+2	; 0x02
    275c:	2f ef       	ldi	r18, 0xFF	; 255
    275e:	3f ef       	ldi	r19, 0xFF	; 255
    2760:	fc 01       	movw	r30, r24
    2762:	34 83       	std	Z+4, r19	; 0x04
    2764:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	9a 81       	ldd	r25, Y+2	; 0x02
    276a:	9c 01       	movw	r18, r24
    276c:	2d 5f       	subi	r18, 0xFD	; 253
    276e:	3f 4f       	sbci	r19, 0xFF	; 255
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	9a 81       	ldd	r25, Y+2	; 0x02
    2774:	fc 01       	movw	r30, r24
    2776:	36 83       	std	Z+6, r19	; 0x06
    2778:	25 83       	std	Z+5, r18	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	9a 81       	ldd	r25, Y+2	; 0x02
    277e:	9c 01       	movw	r18, r24
    2780:	2d 5f       	subi	r18, 0xFD	; 253
    2782:	3f 4f       	sbci	r19, 0xFF	; 255
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	fc 01       	movw	r30, r24
    278a:	30 87       	std	Z+8, r19	; 0x08
    278c:	27 83       	std	Z+7, r18	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	9a 81       	ldd	r25, Y+2	; 0x02
    2792:	fc 01       	movw	r30, r24
    2794:	10 82       	st	Z, r1

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    2796:	00 00       	nop
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	08 95       	ret

000027a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    27a2:	cf 93       	push	r28
    27a4:	df 93       	push	r29
    27a6:	1f 92       	push	r1
    27a8:	1f 92       	push	r1
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	fc 01       	movw	r30, r24
    27b8:	11 86       	std	Z+9, r1	; 0x09
    27ba:	10 86       	std	Z+8, r1	; 0x08

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    27bc:	00 00       	nop
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	df 91       	pop	r29
    27c4:	cf 91       	pop	r28
    27c6:	08 95       	ret

000027c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    27c8:	cf 93       	push	r28
    27ca:	df 93       	push	r29
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <vListInsertEnd+0x6>
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <vListInsertEnd+0x8>
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	9c 83       	std	Y+4, r25	; 0x04
    27d6:	8b 83       	std	Y+3, r24	; 0x03
    27d8:	7e 83       	std	Y+6, r23	; 0x06
    27da:	6d 83       	std	Y+5, r22	; 0x05
    ListItem_t * const pxIndex = pxList->pxIndex;
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	9c 81       	ldd	r25, Y+4	; 0x04
    27e0:	fc 01       	movw	r30, r24
    27e2:	81 81       	ldd	r24, Z+1	; 0x01
    27e4:	92 81       	ldd	r25, Z+2	; 0x02
    27e6:	9a 83       	std	Y+2, r25	; 0x02
    27e8:	89 83       	std	Y+1, r24	; 0x01
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    27ea:	8d 81       	ldd	r24, Y+5	; 0x05
    27ec:	9e 81       	ldd	r25, Y+6	; 0x06
    27ee:	29 81       	ldd	r18, Y+1	; 0x01
    27f0:	3a 81       	ldd	r19, Y+2	; 0x02
    27f2:	fc 01       	movw	r30, r24
    27f4:	33 83       	std	Z+3, r19	; 0x03
    27f6:	22 83       	std	Z+2, r18	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	9a 81       	ldd	r25, Y+2	; 0x02
    27fc:	fc 01       	movw	r30, r24
    27fe:	24 81       	ldd	r18, Z+4	; 0x04
    2800:	35 81       	ldd	r19, Z+5	; 0x05
    2802:	8d 81       	ldd	r24, Y+5	; 0x05
    2804:	9e 81       	ldd	r25, Y+6	; 0x06
    2806:	fc 01       	movw	r30, r24
    2808:	35 83       	std	Z+5, r19	; 0x05
    280a:	24 83       	std	Z+4, r18	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	9a 81       	ldd	r25, Y+2	; 0x02
    2810:	fc 01       	movw	r30, r24
    2812:	84 81       	ldd	r24, Z+4	; 0x04
    2814:	95 81       	ldd	r25, Z+5	; 0x05
    2816:	2d 81       	ldd	r18, Y+5	; 0x05
    2818:	3e 81       	ldd	r19, Y+6	; 0x06
    281a:	fc 01       	movw	r30, r24
    281c:	33 83       	std	Z+3, r19	; 0x03
    281e:	22 83       	std	Z+2, r18	; 0x02
    pxIndex->pxPrevious = pxNewListItem;
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	2d 81       	ldd	r18, Y+5	; 0x05
    2826:	3e 81       	ldd	r19, Y+6	; 0x06
    2828:	fc 01       	movw	r30, r24
    282a:	35 83       	std	Z+5, r19	; 0x05
    282c:	24 83       	std	Z+4, r18	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    282e:	8d 81       	ldd	r24, Y+5	; 0x05
    2830:	9e 81       	ldd	r25, Y+6	; 0x06
    2832:	2b 81       	ldd	r18, Y+3	; 0x03
    2834:	3c 81       	ldd	r19, Y+4	; 0x04
    2836:	fc 01       	movw	r30, r24
    2838:	31 87       	std	Z+9, r19	; 0x09
    283a:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	9c 81       	ldd	r25, Y+4	; 0x04
    2840:	fc 01       	movw	r30, r24
    2842:	80 81       	ld	r24, Z
    2844:	21 e0       	ldi	r18, 0x01	; 1
    2846:	28 0f       	add	r18, r24
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	9c 81       	ldd	r25, Y+4	; 0x04
    284c:	fc 01       	movw	r30, r24
    284e:	20 83       	st	Z, r18
}
    2850:	00 00       	nop
    2852:	26 96       	adiw	r28, 0x06	; 6
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	08 95       	ret

00002864 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	28 97       	sbiw	r28, 0x08	; 8
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	9e 83       	std	Y+6, r25	; 0x06
    287a:	8d 83       	std	Y+5, r24	; 0x05
    287c:	78 87       	std	Y+8, r23	; 0x08
    287e:	6f 83       	std	Y+7, r22	; 0x07
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2880:	8f 81       	ldd	r24, Y+7	; 0x07
    2882:	98 85       	ldd	r25, Y+8	; 0x08
    2884:	fc 01       	movw	r30, r24
    2886:	80 81       	ld	r24, Z
    2888:	91 81       	ldd	r25, Z+1	; 0x01
    288a:	9c 83       	std	Y+4, r25	; 0x04
    288c:	8b 83       	std	Y+3, r24	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
    2890:	9c 81       	ldd	r25, Y+4	; 0x04
    2892:	01 96       	adiw	r24, 0x01	; 1
    2894:	41 f4       	brne	.+16     	; 0x28a6 <vListInsert+0x42>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	9e 81       	ldd	r25, Y+6	; 0x06
    289a:	fc 01       	movw	r30, r24
    289c:	87 81       	ldd	r24, Z+7	; 0x07
    289e:	90 85       	ldd	r25, Z+8	; 0x08
    28a0:	9a 83       	std	Y+2, r25	; 0x02
    28a2:	89 83       	std	Y+1, r24	; 0x01
    28a4:	1a c0       	rjmp	.+52     	; 0x28da <vListInsert+0x76>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    28a6:	8d 81       	ldd	r24, Y+5	; 0x05
    28a8:	9e 81       	ldd	r25, Y+6	; 0x06
    28aa:	03 96       	adiw	r24, 0x03	; 3
    28ac:	9a 83       	std	Y+2, r25	; 0x02
    28ae:	89 83       	std	Y+1, r24	; 0x01
    28b0:	07 c0       	rjmp	.+14     	; 0x28c0 <vListInsert+0x5c>
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	fc 01       	movw	r30, r24
    28b8:	82 81       	ldd	r24, Z+2	; 0x02
    28ba:	93 81       	ldd	r25, Z+3	; 0x03
    28bc:	9a 83       	std	Y+2, r25	; 0x02
    28be:	89 83       	std	Y+1, r24	; 0x01
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	9a 81       	ldd	r25, Y+2	; 0x02
    28c4:	fc 01       	movw	r30, r24
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	93 81       	ldd	r25, Z+3	; 0x03
    28ca:	fc 01       	movw	r30, r24
    28cc:	20 81       	ld	r18, Z
    28ce:	31 81       	ldd	r19, Z+1	; 0x01
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	9c 81       	ldd	r25, Y+4	; 0x04
    28d4:	82 17       	cp	r24, r18
    28d6:	93 07       	cpc	r25, r19
    28d8:	60 f7       	brcc	.-40     	; 0x28b2 <vListInsert+0x4e>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	9a 81       	ldd	r25, Y+2	; 0x02
    28de:	fc 01       	movw	r30, r24
    28e0:	22 81       	ldd	r18, Z+2	; 0x02
    28e2:	33 81       	ldd	r19, Z+3	; 0x03
    28e4:	8f 81       	ldd	r24, Y+7	; 0x07
    28e6:	98 85       	ldd	r25, Y+8	; 0x08
    28e8:	fc 01       	movw	r30, r24
    28ea:	33 83       	std	Z+3, r19	; 0x03
    28ec:	22 83       	std	Z+2, r18	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    28ee:	8f 81       	ldd	r24, Y+7	; 0x07
    28f0:	98 85       	ldd	r25, Y+8	; 0x08
    28f2:	fc 01       	movw	r30, r24
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	2f 81       	ldd	r18, Y+7	; 0x07
    28fa:	38 85       	ldd	r19, Y+8	; 0x08
    28fc:	fc 01       	movw	r30, r24
    28fe:	35 83       	std	Z+5, r19	; 0x05
    2900:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    2902:	8f 81       	ldd	r24, Y+7	; 0x07
    2904:	98 85       	ldd	r25, Y+8	; 0x08
    2906:	29 81       	ldd	r18, Y+1	; 0x01
    2908:	3a 81       	ldd	r19, Y+2	; 0x02
    290a:	fc 01       	movw	r30, r24
    290c:	35 83       	std	Z+5, r19	; 0x05
    290e:	24 83       	std	Z+4, r18	; 0x04
    pxIterator->pxNext = pxNewListItem;
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	9a 81       	ldd	r25, Y+2	; 0x02
    2914:	2f 81       	ldd	r18, Y+7	; 0x07
    2916:	38 85       	ldd	r19, Y+8	; 0x08
    2918:	fc 01       	movw	r30, r24
    291a:	33 83       	std	Z+3, r19	; 0x03
    291c:	22 83       	std	Z+2, r18	; 0x02

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    291e:	8f 81       	ldd	r24, Y+7	; 0x07
    2920:	98 85       	ldd	r25, Y+8	; 0x08
    2922:	2d 81       	ldd	r18, Y+5	; 0x05
    2924:	3e 81       	ldd	r19, Y+6	; 0x06
    2926:	fc 01       	movw	r30, r24
    2928:	31 87       	std	Z+9, r19	; 0x09
    292a:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    292c:	8d 81       	ldd	r24, Y+5	; 0x05
    292e:	9e 81       	ldd	r25, Y+6	; 0x06
    2930:	fc 01       	movw	r30, r24
    2932:	80 81       	ld	r24, Z
    2934:	21 e0       	ldi	r18, 0x01	; 1
    2936:	28 0f       	add	r18, r24
    2938:	8d 81       	ldd	r24, Y+5	; 0x05
    293a:	9e 81       	ldd	r25, Y+6	; 0x06
    293c:	fc 01       	movw	r30, r24
    293e:	20 83       	st	Z, r18
}
    2940:	00 00       	nop
    2942:	28 96       	adiw	r28, 0x08	; 8
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	08 95       	ret

00002954 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
    2958:	00 d0       	rcall	.+0      	; 0x295a <uxListRemove+0x6>
    295a:	1f 92       	push	r1
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	9c 83       	std	Y+4, r25	; 0x04
    2962:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	9c 81       	ldd	r25, Y+4	; 0x04
    2968:	fc 01       	movw	r30, r24
    296a:	80 85       	ldd	r24, Z+8	; 0x08
    296c:	91 85       	ldd	r25, Z+9	; 0x09
    296e:	9a 83       	std	Y+2, r25	; 0x02
    2970:	89 83       	std	Y+1, r24	; 0x01

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2972:	8b 81       	ldd	r24, Y+3	; 0x03
    2974:	9c 81       	ldd	r25, Y+4	; 0x04
    2976:	fc 01       	movw	r30, r24
    2978:	82 81       	ldd	r24, Z+2	; 0x02
    297a:	93 81       	ldd	r25, Z+3	; 0x03
    297c:	2b 81       	ldd	r18, Y+3	; 0x03
    297e:	3c 81       	ldd	r19, Y+4	; 0x04
    2980:	f9 01       	movw	r30, r18
    2982:	24 81       	ldd	r18, Z+4	; 0x04
    2984:	35 81       	ldd	r19, Z+5	; 0x05
    2986:	fc 01       	movw	r30, r24
    2988:	35 83       	std	Z+5, r19	; 0x05
    298a:	24 83       	std	Z+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    298c:	8b 81       	ldd	r24, Y+3	; 0x03
    298e:	9c 81       	ldd	r25, Y+4	; 0x04
    2990:	fc 01       	movw	r30, r24
    2992:	84 81       	ldd	r24, Z+4	; 0x04
    2994:	95 81       	ldd	r25, Z+5	; 0x05
    2996:	2b 81       	ldd	r18, Y+3	; 0x03
    2998:	3c 81       	ldd	r19, Y+4	; 0x04
    299a:	f9 01       	movw	r30, r18
    299c:	22 81       	ldd	r18, Z+2	; 0x02
    299e:	33 81       	ldd	r19, Z+3	; 0x03
    29a0:	fc 01       	movw	r30, r24
    29a2:	33 83       	std	Z+3, r19	; 0x03
    29a4:	22 83       	std	Z+2, r18	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	9a 81       	ldd	r25, Y+2	; 0x02
    29aa:	fc 01       	movw	r30, r24
    29ac:	21 81       	ldd	r18, Z+1	; 0x01
    29ae:	32 81       	ldd	r19, Z+2	; 0x02
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	9c 81       	ldd	r25, Y+4	; 0x04
    29b4:	28 17       	cp	r18, r24
    29b6:	39 07       	cpc	r19, r25
    29b8:	51 f4       	brne	.+20     	; 0x29ce <uxListRemove+0x7a>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	9c 81       	ldd	r25, Y+4	; 0x04
    29be:	fc 01       	movw	r30, r24
    29c0:	24 81       	ldd	r18, Z+4	; 0x04
    29c2:	35 81       	ldd	r19, Z+5	; 0x05
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	9a 81       	ldd	r25, Y+2	; 0x02
    29c8:	fc 01       	movw	r30, r24
    29ca:	32 83       	std	Z+2, r19	; 0x02
    29cc:	21 83       	std	Z+1, r18	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	9c 81       	ldd	r25, Y+4	; 0x04
    29d2:	fc 01       	movw	r30, r24
    29d4:	11 86       	std	Z+9, r1	; 0x09
    29d6:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	9a 81       	ldd	r25, Y+2	; 0x02
    29dc:	fc 01       	movw	r30, r24
    29de:	80 81       	ld	r24, Z
    29e0:	2f ef       	ldi	r18, 0xFF	; 255
    29e2:	28 0f       	add	r18, r24
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	9a 81       	ldd	r25, Y+2	; 0x02
    29e8:	fc 01       	movw	r30, r24
    29ea:	20 83       	st	Z, r18

    return pxList->uxNumberOfItems;
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	9a 81       	ldd	r25, Y+2	; 0x02
    29f0:	fc 01       	movw	r30, r24
    29f2:	80 81       	ld	r24, Z
}
    29f4:	0f 90       	pop	r0
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	df 91       	pop	r29
    29fe:	cf 91       	pop	r28
    2a00:	08 95       	ret

00002a02 <pxPortInitialiseStack>:
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
}
    2a02:	cf 93       	push	r28
    2a04:	df 93       	push	r29
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	28 97       	sbiw	r28, 0x08	; 8
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	9c 83       	std	Y+4, r25	; 0x04
    2a18:	8b 83       	std	Y+3, r24	; 0x03
    2a1a:	7e 83       	std	Y+6, r23	; 0x06
    2a1c:	6d 83       	std	Y+5, r22	; 0x05
    2a1e:	58 87       	std	Y+8, r21	; 0x08
    2a20:	4f 83       	std	Y+7, r20	; 0x07
    2a22:	8d 81       	ldd	r24, Y+5	; 0x05
    2a24:	9e 81       	ldd	r25, Y+6	; 0x06
    2a26:	9a 83       	std	Y+2, r25	; 0x02
    2a28:	89 83       	std	Y+1, r24	; 0x01
    2a2a:	29 81       	ldd	r18, Y+1	; 0x01
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a30:	fc 01       	movw	r30, r24
    2a32:	20 83       	st	Z, r18
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	9c 81       	ldd	r25, Y+4	; 0x04
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	9c 83       	std	Y+4, r25	; 0x04
    2a3c:	8b 83       	std	Y+3, r24	; 0x03
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	9a 81       	ldd	r25, Y+2	; 0x02
    2a42:	89 2f       	mov	r24, r25
    2a44:	99 27       	eor	r25, r25
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	89 83       	std	Y+1, r24	; 0x01
    2a4a:	29 81       	ldd	r18, Y+1	; 0x01
    2a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a50:	fc 01       	movw	r30, r24
    2a52:	20 83       	st	Z, r18
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	9c 81       	ldd	r25, Y+4	; 0x04
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	9c 83       	std	Y+4, r25	; 0x04
    2a5c:	8b 83       	std	Y+3, r24	; 0x03
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	9c 81       	ldd	r25, Y+4	; 0x04
    2a62:	fc 01       	movw	r30, r24
    2a64:	10 82       	st	Z, r1
    2a66:	8b 81       	ldd	r24, Y+3	; 0x03
    2a68:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	9c 83       	std	Y+4, r25	; 0x04
    2a6e:	8b 83       	std	Y+3, r24	; 0x03
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	9c 81       	ldd	r25, Y+4	; 0x04
    2a74:	fc 01       	movw	r30, r24
    2a76:	10 82       	st	Z, r1
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7c:	01 97       	sbiw	r24, 0x01	; 1
    2a7e:	9c 83       	std	Y+4, r25	; 0x04
    2a80:	8b 83       	std	Y+3, r24	; 0x03
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	9c 81       	ldd	r25, Y+4	; 0x04
    2a86:	20 e8       	ldi	r18, 0x80	; 128
    2a88:	fc 01       	movw	r30, r24
    2a8a:	20 83       	st	Z, r18
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	9c 83       	std	Y+4, r25	; 0x04
    2a94:	8b 83       	std	Y+3, r24	; 0x03
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	10 82       	st	Z, r1
    2a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	9c 83       	std	Y+4, r25	; 0x04
    2aa6:	8b 83       	std	Y+3, r24	; 0x03
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2aac:	fc 01       	movw	r30, r24
    2aae:	10 82       	st	Z, r1
    2ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	9c 83       	std	Y+4, r25	; 0x04
    2ab8:	8b 83       	std	Y+3, r24	; 0x03
    2aba:	8b 81       	ldd	r24, Y+3	; 0x03
    2abc:	9c 81       	ldd	r25, Y+4	; 0x04
    2abe:	fc 01       	movw	r30, r24
    2ac0:	10 82       	st	Z, r1
    2ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac6:	47 97       	sbiw	r24, 0x17	; 23
    2ac8:	9c 83       	std	Y+4, r25	; 0x04
    2aca:	8b 83       	std	Y+3, r24	; 0x03
    2acc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ace:	98 85       	ldd	r25, Y+8	; 0x08
    2ad0:	9a 83       	std	Y+2, r25	; 0x02
    2ad2:	89 83       	std	Y+1, r24	; 0x01
    2ad4:	29 81       	ldd	r18, Y+1	; 0x01
    2ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    2ada:	fc 01       	movw	r30, r24
    2adc:	20 83       	st	Z, r18
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	9c 83       	std	Y+4, r25	; 0x04
    2ae6:	8b 83       	std	Y+3, r24	; 0x03
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	9a 81       	ldd	r25, Y+2	; 0x02
    2aec:	89 2f       	mov	r24, r25
    2aee:	99 27       	eor	r25, r25
    2af0:	9a 83       	std	Y+2, r25	; 0x02
    2af2:	89 83       	std	Y+1, r24	; 0x01
    2af4:	29 81       	ldd	r18, Y+1	; 0x01
    2af6:	8b 81       	ldd	r24, Y+3	; 0x03
    2af8:	9c 81       	ldd	r25, Y+4	; 0x04
    2afa:	fc 01       	movw	r30, r24
    2afc:	20 83       	st	Z, r18
    2afe:	8b 81       	ldd	r24, Y+3	; 0x03
    2b00:	9c 81       	ldd	r25, Y+4	; 0x04
    2b02:	07 97       	sbiw	r24, 0x07	; 7
    2b04:	9c 83       	std	Y+4, r25	; 0x04
    2b06:	8b 83       	std	Y+3, r24	; 0x03
    2b08:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0c:	28 96       	adiw	r28, 0x08	; 8
    2b0e:	0f b6       	in	r0, 0x3f	; 63
    2b10:	f8 94       	cli
    2b12:	de bf       	out	0x3e, r29	; 62
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	cd bf       	out	0x3d, r28	; 61
    2b18:	df 91       	pop	r29
    2b1a:	cf 91       	pop	r28
    2b1c:	08 95       	ret

00002b1e <xPortStartScheduler>:
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	fb d0       	rcall	.+502    	; 0x2d1e <prvSetupTimerInterrupt>
    2b28:	a0 91 88 13 	lds	r26, 0x1388	; 0x801388 <pxCurrentTCB>
    2b2c:	b0 91 89 13 	lds	r27, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    2b30:	cd 91       	ld	r28, X+
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	dd 91       	ld	r29, X+
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	ff 91       	pop	r31
    2b3a:	ef 91       	pop	r30
    2b3c:	df 91       	pop	r29
    2b3e:	cf 91       	pop	r28
    2b40:	bf 91       	pop	r27
    2b42:	af 91       	pop	r26
    2b44:	9f 91       	pop	r25
    2b46:	8f 91       	pop	r24
    2b48:	7f 91       	pop	r23
    2b4a:	6f 91       	pop	r22
    2b4c:	5f 91       	pop	r21
    2b4e:	4f 91       	pop	r20
    2b50:	3f 91       	pop	r19
    2b52:	2f 91       	pop	r18
    2b54:	1f 91       	pop	r17
    2b56:	0f 91       	pop	r16
    2b58:	ff 90       	pop	r15
    2b5a:	ef 90       	pop	r14
    2b5c:	df 90       	pop	r13
    2b5e:	cf 90       	pop	r12
    2b60:	bf 90       	pop	r11
    2b62:	af 90       	pop	r10
    2b64:	9f 90       	pop	r9
    2b66:	8f 90       	pop	r8
    2b68:	7f 90       	pop	r7
    2b6a:	6f 90       	pop	r6
    2b6c:	5f 90       	pop	r5
    2b6e:	4f 90       	pop	r4
    2b70:	3f 90       	pop	r3
    2b72:	2f 90       	pop	r2
    2b74:	1f 90       	pop	r1
    2b76:	0f 90       	pop	r0
    2b78:	0c be       	out	0x3c, r0	; 60
    2b7a:	0f 90       	pop	r0
    2b7c:	0b be       	out	0x3b, r0	; 59
    2b7e:	0f 90       	pop	r0
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	0f 90       	pop	r0
    2b84:	08 95       	ret
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	df 91       	pop	r29
    2b8a:	cf 91       	pop	r28
    2b8c:	08 95       	ret

00002b8e <vPortYield>:
    2b8e:	0f 92       	push	r0
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	f8 94       	cli
    2b94:	0f 92       	push	r0
    2b96:	0b b6       	in	r0, 0x3b	; 59
    2b98:	0f 92       	push	r0
    2b9a:	0c b6       	in	r0, 0x3c	; 60
    2b9c:	0f 92       	push	r0
    2b9e:	1f 92       	push	r1
    2ba0:	11 24       	eor	r1, r1
    2ba2:	2f 92       	push	r2
    2ba4:	3f 92       	push	r3
    2ba6:	4f 92       	push	r4
    2ba8:	5f 92       	push	r5
    2baa:	6f 92       	push	r6
    2bac:	7f 92       	push	r7
    2bae:	8f 92       	push	r8
    2bb0:	9f 92       	push	r9
    2bb2:	af 92       	push	r10
    2bb4:	bf 92       	push	r11
    2bb6:	cf 92       	push	r12
    2bb8:	df 92       	push	r13
    2bba:	ef 92       	push	r14
    2bbc:	ff 92       	push	r15
    2bbe:	0f 93       	push	r16
    2bc0:	1f 93       	push	r17
    2bc2:	2f 93       	push	r18
    2bc4:	3f 93       	push	r19
    2bc6:	4f 93       	push	r20
    2bc8:	5f 93       	push	r21
    2bca:	6f 93       	push	r22
    2bcc:	7f 93       	push	r23
    2bce:	8f 93       	push	r24
    2bd0:	9f 93       	push	r25
    2bd2:	af 93       	push	r26
    2bd4:	bf 93       	push	r27
    2bd6:	cf 93       	push	r28
    2bd8:	df 93       	push	r29
    2bda:	ef 93       	push	r30
    2bdc:	ff 93       	push	r31
    2bde:	a0 91 88 13 	lds	r26, 0x1388	; 0x801388 <pxCurrentTCB>
    2be2:	b0 91 89 13 	lds	r27, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    2be6:	0d b6       	in	r0, 0x3d	; 61
    2be8:	0d 92       	st	X+, r0
    2bea:	0e b6       	in	r0, 0x3e	; 62
    2bec:	0d 92       	st	X+, r0
    2bee:	0e 94 55 23 	call	0x46aa	; 0x46aa <vTaskSwitchContext>
    2bf2:	a0 91 88 13 	lds	r26, 0x1388	; 0x801388 <pxCurrentTCB>
    2bf6:	b0 91 89 13 	lds	r27, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    2bfa:	cd 91       	ld	r28, X+
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	dd 91       	ld	r29, X+
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	ff 91       	pop	r31
    2c04:	ef 91       	pop	r30
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	bf 91       	pop	r27
    2c0c:	af 91       	pop	r26
    2c0e:	9f 91       	pop	r25
    2c10:	8f 91       	pop	r24
    2c12:	7f 91       	pop	r23
    2c14:	6f 91       	pop	r22
    2c16:	5f 91       	pop	r21
    2c18:	4f 91       	pop	r20
    2c1a:	3f 91       	pop	r19
    2c1c:	2f 91       	pop	r18
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	ff 90       	pop	r15
    2c24:	ef 90       	pop	r14
    2c26:	df 90       	pop	r13
    2c28:	cf 90       	pop	r12
    2c2a:	bf 90       	pop	r11
    2c2c:	af 90       	pop	r10
    2c2e:	9f 90       	pop	r9
    2c30:	8f 90       	pop	r8
    2c32:	7f 90       	pop	r7
    2c34:	6f 90       	pop	r6
    2c36:	5f 90       	pop	r5
    2c38:	4f 90       	pop	r4
    2c3a:	3f 90       	pop	r3
    2c3c:	2f 90       	pop	r2
    2c3e:	1f 90       	pop	r1
    2c40:	0f 90       	pop	r0
    2c42:	0c be       	out	0x3c, r0	; 60
    2c44:	0f 90       	pop	r0
    2c46:	0b be       	out	0x3b, r0	; 59
    2c48:	0f 90       	pop	r0
    2c4a:	0f be       	out	0x3f, r0	; 63
    2c4c:	0f 90       	pop	r0
    2c4e:	08 95       	ret
	...

00002c52 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    2c52:	0f 92       	push	r0
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	0f 92       	push	r0
    2c5a:	0b b6       	in	r0, 0x3b	; 59
    2c5c:	0f 92       	push	r0
    2c5e:	0c b6       	in	r0, 0x3c	; 60
    2c60:	0f 92       	push	r0
    2c62:	1f 92       	push	r1
    2c64:	11 24       	eor	r1, r1
    2c66:	2f 92       	push	r2
    2c68:	3f 92       	push	r3
    2c6a:	4f 92       	push	r4
    2c6c:	5f 92       	push	r5
    2c6e:	6f 92       	push	r6
    2c70:	7f 92       	push	r7
    2c72:	8f 92       	push	r8
    2c74:	9f 92       	push	r9
    2c76:	af 92       	push	r10
    2c78:	bf 92       	push	r11
    2c7a:	cf 92       	push	r12
    2c7c:	df 92       	push	r13
    2c7e:	ef 92       	push	r14
    2c80:	ff 92       	push	r15
    2c82:	0f 93       	push	r16
    2c84:	1f 93       	push	r17
    2c86:	2f 93       	push	r18
    2c88:	3f 93       	push	r19
    2c8a:	4f 93       	push	r20
    2c8c:	5f 93       	push	r21
    2c8e:	6f 93       	push	r22
    2c90:	7f 93       	push	r23
    2c92:	8f 93       	push	r24
    2c94:	9f 93       	push	r25
    2c96:	af 93       	push	r26
    2c98:	bf 93       	push	r27
    2c9a:	cf 93       	push	r28
    2c9c:	df 93       	push	r29
    2c9e:	ef 93       	push	r30
    2ca0:	ff 93       	push	r31
    2ca2:	a0 91 88 13 	lds	r26, 0x1388	; 0x801388 <pxCurrentTCB>
    2ca6:	b0 91 89 13 	lds	r27, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    2caa:	0d b6       	in	r0, 0x3d	; 61
    2cac:	0d 92       	st	X+, r0
    2cae:	0e b6       	in	r0, 0x3e	; 62
    2cb0:	0d 92       	st	X+, r0
    if( xTaskIncrementTick() != pdFALSE )
    2cb2:	0e 94 65 22 	call	0x44ca	; 0x44ca <xTaskIncrementTick>
    2cb6:	88 23       	and	r24, r24
    2cb8:	11 f0       	breq	.+4      	; 0x2cbe <vPortYieldFromTick+0x6c>
    {
        vTaskSwitchContext();
    2cba:	0e 94 55 23 	call	0x46aa	; 0x46aa <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    2cbe:	a0 91 88 13 	lds	r26, 0x1388	; 0x801388 <pxCurrentTCB>
    2cc2:	b0 91 89 13 	lds	r27, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    2cc6:	cd 91       	ld	r28, X+
    2cc8:	cd bf       	out	0x3d, r28	; 61
    2cca:	dd 91       	ld	r29, X+
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	ff 91       	pop	r31
    2cd0:	ef 91       	pop	r30
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	bf 91       	pop	r27
    2cd8:	af 91       	pop	r26
    2cda:	9f 91       	pop	r25
    2cdc:	8f 91       	pop	r24
    2cde:	7f 91       	pop	r23
    2ce0:	6f 91       	pop	r22
    2ce2:	5f 91       	pop	r21
    2ce4:	4f 91       	pop	r20
    2ce6:	3f 91       	pop	r19
    2ce8:	2f 91       	pop	r18
    2cea:	1f 91       	pop	r17
    2cec:	0f 91       	pop	r16
    2cee:	ff 90       	pop	r15
    2cf0:	ef 90       	pop	r14
    2cf2:	df 90       	pop	r13
    2cf4:	cf 90       	pop	r12
    2cf6:	bf 90       	pop	r11
    2cf8:	af 90       	pop	r10
    2cfa:	9f 90       	pop	r9
    2cfc:	8f 90       	pop	r8
    2cfe:	7f 90       	pop	r7
    2d00:	6f 90       	pop	r6
    2d02:	5f 90       	pop	r5
    2d04:	4f 90       	pop	r4
    2d06:	3f 90       	pop	r3
    2d08:	2f 90       	pop	r2
    2d0a:	1f 90       	pop	r1
    2d0c:	0f 90       	pop	r0
    2d0e:	0c be       	out	0x3c, r0	; 60
    2d10:	0f 90       	pop	r0
    2d12:	0b be       	out	0x3b, r0	; 59
    2d14:	0f 90       	pop	r0
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    2d1a:	08 95       	ret
	...

00002d1e <prvSetupTimerInterrupt>:
#if defined(portUSE_WDTO)
/*
 * Setup WDT to generate a tick interrupt.
 */
void prvSetupTimerInterrupt( void )
{
    2d1e:	cf 93       	push	r28
    2d20:	df 93       	push	r29
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
    /* reset watchdog */
    wdt_reset();
    2d26:	a8 95       	wdr
                "out __SREG__,__tmp_reg__"  "\n\t"
                "sts %0, %2"                "\n\t"
                : /* no outputs */
                : "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
                "r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
                "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	88 70       	andi	r24, 0x08	; 8
    2d2e:	99 27       	eor	r25, r25
    2d30:	89 2b       	or	r24, r25
    2d32:	11 f0       	breq	.+4      	; 0x2d38 <prvSetupTimerInterrupt+0x1a>
    2d34:	80 ee       	ldi	r24, 0xE0	; 224
    2d36:	01 c0       	rjmp	.+2      	; 0x2d3a <prvSetupTimerInterrupt+0x1c>
    2d38:	80 ec       	ldi	r24, 0xC0	; 192
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	97 70       	andi	r25, 0x07	; 7
    2d3e:	89 2b       	or	r24, r25
    2d40:	98 2f       	mov	r25, r24
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
    2d42:	88 e1       	ldi	r24, 0x18	; 24
    2d44:	0f b6       	in	r0, 0x3f	; 63
    2d46:	f8 94       	cli
    2d48:	a8 95       	wdr
    2d4a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    /* reset watchdog */
    wdt_reset();

    /* set up WDT Interrupt (rather than the WDT Reset). */
    wdt_interrupt_enable( portUSE_WDTO );
}
    2d54:	00 00       	nop
    2d56:	df 91       	pop	r29
    2d58:	cf 91       	pop	r28
    2d5a:	08 95       	ret

00002d5c <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    2d5c:	7a df       	rcall	.-268    	; 0x2c52 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    2d5e:	18 95       	reti
	...

00002d62 <xQueueGenericReset>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2d62:	cf 93       	push	r28
    2d64:	df 93       	push	r29
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <xQueueGenericReset+0x6>
    2d68:	1f 92       	push	r1
    2d6a:	1f 92       	push	r1
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	9c 83       	std	Y+4, r25	; 0x04
    2d72:	8b 83       	std	Y+3, r24	; 0x03
    2d74:	6d 83       	std	Y+5, r22	; 0x05
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7a:	9a 83       	std	Y+2, r25	; 0x02
    2d7c:	89 83       	std	Y+1, r24	; 0x01
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	0f 92       	push	r0
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	9a 81       	ldd	r25, Y+2	; 0x02
    2d88:	fc 01       	movw	r30, r24
    2d8a:	80 81       	ld	r24, Z
    2d8c:	91 81       	ldd	r25, Z+1	; 0x01
    2d8e:	29 81       	ldd	r18, Y+1	; 0x01
    2d90:	3a 81       	ldd	r19, Y+2	; 0x02
    2d92:	f9 01       	movw	r30, r18
    2d94:	23 8d       	ldd	r18, Z+27	; 0x1b
    2d96:	42 2f       	mov	r20, r18
    2d98:	50 e0       	ldi	r21, 0x00	; 0
    2d9a:	29 81       	ldd	r18, Y+1	; 0x01
    2d9c:	3a 81       	ldd	r19, Y+2	; 0x02
    2d9e:	f9 01       	movw	r30, r18
    2da0:	24 8d       	ldd	r18, Z+28	; 0x1c
    2da2:	22 2f       	mov	r18, r18
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	42 9f       	mul	r20, r18
    2da8:	b0 01       	movw	r22, r0
    2daa:	43 9f       	mul	r20, r19
    2dac:	70 0d       	add	r23, r0
    2dae:	52 9f       	mul	r21, r18
    2db0:	70 0d       	add	r23, r0
    2db2:	11 24       	eor	r1, r1
    2db4:	9b 01       	movw	r18, r22
    2db6:	28 0f       	add	r18, r24
    2db8:	39 1f       	adc	r19, r25
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	35 83       	std	Z+5, r19	; 0x05
    2dc2:	24 83       	std	Z+4, r18	; 0x04
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc8:	fc 01       	movw	r30, r24
    2dca:	12 8e       	std	Z+26, r1	; 0x1a
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	20 81       	ld	r18, Z
    2dd4:	31 81       	ldd	r19, Z+1	; 0x01
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dda:	fc 01       	movw	r30, r24
    2ddc:	33 83       	std	Z+3, r19	; 0x03
    2dde:	22 83       	std	Z+2, r18	; 0x02
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	9a 81       	ldd	r25, Y+2	; 0x02
    2de4:	fc 01       	movw	r30, r24
    2de6:	20 81       	ld	r18, Z
    2de8:	31 81       	ldd	r19, Z+1	; 0x01
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	9a 81       	ldd	r25, Y+2	; 0x02
    2dee:	fc 01       	movw	r30, r24
    2df0:	83 8d       	ldd	r24, Z+27	; 0x1b
    2df2:	88 2f       	mov	r24, r24
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	bc 01       	movw	r22, r24
    2df8:	61 50       	subi	r22, 0x01	; 1
    2dfa:	71 09       	sbc	r23, r1
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2e00:	fc 01       	movw	r30, r24
    2e02:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e04:	48 2f       	mov	r20, r24
    2e06:	50 e0       	ldi	r21, 0x00	; 0
    2e08:	64 9f       	mul	r22, r20
    2e0a:	c0 01       	movw	r24, r0
    2e0c:	65 9f       	mul	r22, r21
    2e0e:	90 0d       	add	r25, r0
    2e10:	74 9f       	mul	r23, r20
    2e12:	90 0d       	add	r25, r0
    2e14:	11 24       	eor	r1, r1
    2e16:	28 0f       	add	r18, r24
    2e18:	39 1f       	adc	r19, r25
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1e:	fc 01       	movw	r30, r24
    2e20:	37 83       	std	Z+7, r19	; 0x07
    2e22:	26 83       	std	Z+6, r18	; 0x06
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	9a 81       	ldd	r25, Y+2	; 0x02
    2e28:	2f ef       	ldi	r18, 0xFF	; 255
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	25 8f       	std	Z+29, r18	; 0x1d
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	9a 81       	ldd	r25, Y+2	; 0x02
    2e32:	2f ef       	ldi	r18, 0xFF	; 255
    2e34:	fc 01       	movw	r30, r24
    2e36:	26 8f       	std	Z+30, r18	; 0x1e
    2e38:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3a:	88 23       	and	r24, r24
    2e3c:	79 f4       	brne	.+30     	; 0x2e5c <xQueueGenericReset+0xfa>
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	9a 81       	ldd	r25, Y+2	; 0x02
    2e42:	fc 01       	movw	r30, r24
    2e44:	80 85       	ldd	r24, Z+8	; 0x08
    2e46:	88 23       	and	r24, r24
    2e48:	89 f0       	breq	.+34     	; 0x2e6c <xQueueGenericReset+0x10a>
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4e:	08 96       	adiw	r24, 0x08	; 8
    2e50:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <xTaskRemoveFromEventList>
    2e54:	88 23       	and	r24, r24
    2e56:	51 f0       	breq	.+20     	; 0x2e6c <xQueueGenericReset+0x10a>
    2e58:	9a de       	rcall	.-716    	; 0x2b8e <vPortYield>
    2e5a:	08 c0       	rjmp	.+16     	; 0x2e6c <xQueueGenericReset+0x10a>
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e60:	08 96       	adiw	r24, 0x08	; 8
    2e62:	68 dc       	rcall	.-1840   	; 0x2734 <vListInitialise>
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	9a 81       	ldd	r25, Y+2	; 0x02
    2e68:	41 96       	adiw	r24, 0x11	; 17
    2e6a:	64 dc       	rcall	.-1848   	; 0x2734 <vListInitialise>
    2e6c:	0f 90       	pop	r0
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	0f 90       	pop	r0
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	0f 90       	pop	r0
    2e7a:	0f 90       	pop	r0
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	08 95       	ret

00002e82 <xQueueGenericCreate>:
    2e82:	0f 93       	push	r16
    2e84:	1f 93       	push	r17
    2e86:	cf 93       	push	r28
    2e88:	df 93       	push	r29
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
    2e8e:	29 97       	sbiw	r28, 0x09	; 9
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	f8 94       	cli
    2e94:	de bf       	out	0x3e, r29	; 62
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	cd bf       	out	0x3d, r28	; 61
    2e9a:	8f 83       	std	Y+7, r24	; 0x07
    2e9c:	68 87       	std	Y+8, r22	; 0x08
    2e9e:	49 87       	std	Y+9, r20	; 0x09
    2ea0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ea2:	48 2f       	mov	r20, r24
    2ea4:	50 e0       	ldi	r21, 0x00	; 0
    2ea6:	88 85       	ldd	r24, Y+8	; 0x08
    2ea8:	28 2f       	mov	r18, r24
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	42 9f       	mul	r20, r18
    2eae:	c0 01       	movw	r24, r0
    2eb0:	43 9f       	mul	r20, r19
    2eb2:	90 0d       	add	r25, r0
    2eb4:	52 9f       	mul	r21, r18
    2eb6:	90 0d       	add	r25, r0
    2eb8:	11 24       	eor	r1, r1
    2eba:	9a 83       	std	Y+2, r25	; 0x02
    2ebc:	89 83       	std	Y+1, r24	; 0x01
    2ebe:	89 81       	ldd	r24, Y+1	; 0x01
    2ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec2:	4f 96       	adiw	r24, 0x1f	; 31
    2ec4:	d0 db       	rcall	.-2144   	; 0x2666 <pvPortMalloc>
    2ec6:	9c 83       	std	Y+4, r25	; 0x04
    2ec8:	8b 83       	std	Y+3, r24	; 0x03
    2eca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ece:	89 2b       	or	r24, r25
    2ed0:	99 f0       	breq	.+38     	; 0x2ef8 <xQueueGenericCreate+0x76>
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
    2eda:	8d 81       	ldd	r24, Y+5	; 0x05
    2edc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ede:	4f 96       	adiw	r24, 0x1f	; 31
    2ee0:	9e 83       	std	Y+6, r25	; 0x06
    2ee2:	8d 83       	std	Y+5, r24	; 0x05
    2ee4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ee6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eea:	9e 81       	ldd	r25, Y+6	; 0x06
    2eec:	89 01       	movw	r16, r18
    2eee:	29 85       	ldd	r18, Y+9	; 0x09
    2ef0:	ac 01       	movw	r20, r24
    2ef2:	68 85       	ldd	r22, Y+8	; 0x08
    2ef4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ef6:	0d d0       	rcall	.+26     	; 0x2f12 <prvInitialiseNewQueue>
    2ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    2efa:	9c 81       	ldd	r25, Y+4	; 0x04
    2efc:	29 96       	adiw	r28, 0x09	; 9
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	de bf       	out	0x3e, r29	; 62
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	cd bf       	out	0x3d, r28	; 61
    2f08:	df 91       	pop	r29
    2f0a:	cf 91       	pop	r28
    2f0c:	1f 91       	pop	r17
    2f0e:	0f 91       	pop	r16
    2f10:	08 95       	ret

00002f12 <prvInitialiseNewQueue>:
    2f12:	0f 93       	push	r16
    2f14:	1f 93       	push	r17
    2f16:	cf 93       	push	r28
    2f18:	df 93       	push	r29
    2f1a:	cd b7       	in	r28, 0x3d	; 61
    2f1c:	de b7       	in	r29, 0x3e	; 62
    2f1e:	27 97       	sbiw	r28, 0x07	; 7
    2f20:	0f b6       	in	r0, 0x3f	; 63
    2f22:	f8 94       	cli
    2f24:	de bf       	out	0x3e, r29	; 62
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	cd bf       	out	0x3d, r28	; 61
    2f2a:	89 83       	std	Y+1, r24	; 0x01
    2f2c:	6a 83       	std	Y+2, r22	; 0x02
    2f2e:	5c 83       	std	Y+4, r21	; 0x04
    2f30:	4b 83       	std	Y+3, r20	; 0x03
    2f32:	2d 83       	std	Y+5, r18	; 0x05
    2f34:	1f 83       	std	Y+7, r17	; 0x07
    2f36:	0e 83       	std	Y+6, r16	; 0x06
    2f38:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3a:	88 23       	and	r24, r24
    2f3c:	41 f4       	brne	.+16     	; 0x2f4e <prvInitialiseNewQueue+0x3c>
    2f3e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f40:	9f 81       	ldd	r25, Y+7	; 0x07
    2f42:	2e 81       	ldd	r18, Y+6	; 0x06
    2f44:	3f 81       	ldd	r19, Y+7	; 0x07
    2f46:	fc 01       	movw	r30, r24
    2f48:	31 83       	std	Z+1, r19	; 0x01
    2f4a:	20 83       	st	Z, r18
    2f4c:	07 c0       	rjmp	.+14     	; 0x2f5c <prvInitialiseNewQueue+0x4a>
    2f4e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f50:	9f 81       	ldd	r25, Y+7	; 0x07
    2f52:	2b 81       	ldd	r18, Y+3	; 0x03
    2f54:	3c 81       	ldd	r19, Y+4	; 0x04
    2f56:	fc 01       	movw	r30, r24
    2f58:	31 83       	std	Z+1, r19	; 0x01
    2f5a:	20 83       	st	Z, r18
    2f5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f5e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f60:	29 81       	ldd	r18, Y+1	; 0x01
    2f62:	fc 01       	movw	r30, r24
    2f64:	23 8f       	std	Z+27, r18	; 0x1b
    2f66:	8e 81       	ldd	r24, Y+6	; 0x06
    2f68:	9f 81       	ldd	r25, Y+7	; 0x07
    2f6a:	2a 81       	ldd	r18, Y+2	; 0x02
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	24 8f       	std	Z+28, r18	; 0x1c
    2f70:	8e 81       	ldd	r24, Y+6	; 0x06
    2f72:	9f 81       	ldd	r25, Y+7	; 0x07
    2f74:	61 e0       	ldi	r22, 0x01	; 1
    2f76:	f5 de       	rcall	.-534    	; 0x2d62 <xQueueGenericReset>
    2f78:	00 00       	nop
    2f7a:	27 96       	adiw	r28, 0x07	; 7
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	f8 94       	cli
    2f80:	de bf       	out	0x3e, r29	; 62
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	cd bf       	out	0x3d, r28	; 61
    2f86:	df 91       	pop	r29
    2f88:	cf 91       	pop	r28
    2f8a:	1f 91       	pop	r17
    2f8c:	0f 91       	pop	r16
    2f8e:	08 95       	ret

00002f90 <xQueueGenericSendFromISR>:
    2f90:	cf 93       	push	r28
    2f92:	df 93       	push	r29
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	2d 97       	sbiw	r28, 0x0d	; 13
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	98 87       	std	Y+8, r25	; 0x08
    2fa6:	8f 83       	std	Y+7, r24	; 0x07
    2fa8:	7a 87       	std	Y+10, r23	; 0x0a
    2faa:	69 87       	std	Y+9, r22	; 0x09
    2fac:	5c 87       	std	Y+12, r21	; 0x0c
    2fae:	4b 87       	std	Y+11, r20	; 0x0b
    2fb0:	2d 87       	std	Y+13, r18	; 0x0d
    2fb2:	8f 81       	ldd	r24, Y+7	; 0x07
    2fb4:	98 85       	ldd	r25, Y+8	; 0x08
    2fb6:	9b 83       	std	Y+3, r25	; 0x03
    2fb8:	8a 83       	std	Y+2, r24	; 0x02
    2fba:	1c 82       	std	Y+4, r1	; 0x04
    2fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	22 8d       	ldd	r18, Z+26	; 0x1a
    2fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc8:	fc 01       	movw	r30, r24
    2fca:	83 8d       	ldd	r24, Z+27	; 0x1b
    2fcc:	28 17       	cp	r18, r24
    2fce:	18 f0       	brcs	.+6      	; 0x2fd6 <xQueueGenericSendFromISR+0x46>
    2fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd2:	82 30       	cpi	r24, 0x02	; 2
    2fd4:	a9 f5       	brne	.+106    	; 0x3040 <xQueueGenericSendFromISR+0xb0>
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fda:	fc 01       	movw	r30, r24
    2fdc:	86 8d       	ldd	r24, Z+30	; 0x1e
    2fde:	8d 83       	std	Y+5, r24	; 0x05
    2fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fe8:	8e 83       	std	Y+6, r24	; 0x06
    2fea:	29 85       	ldd	r18, Y+9	; 0x09
    2fec:	3a 85       	ldd	r19, Y+10	; 0x0a
    2fee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff2:	4d 85       	ldd	r20, Y+13	; 0x0d
    2ff4:	b9 01       	movw	r22, r18
    2ff6:	d8 d0       	rcall	.+432    	; 0x31a8 <prvCopyDataToQueue>
    2ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffa:	8f 3f       	cpi	r24, 0xFF	; 255
    2ffc:	b9 f4       	brne	.+46     	; 0x302c <xQueueGenericSendFromISR+0x9c>
    2ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    3000:	9b 81       	ldd	r25, Y+3	; 0x03
    3002:	fc 01       	movw	r30, r24
    3004:	81 89       	ldd	r24, Z+17	; 0x11
    3006:	88 23       	and	r24, r24
    3008:	c1 f0       	breq	.+48     	; 0x303a <xQueueGenericSendFromISR+0xaa>
    300a:	8a 81       	ldd	r24, Y+2	; 0x02
    300c:	9b 81       	ldd	r25, Y+3	; 0x03
    300e:	41 96       	adiw	r24, 0x11	; 17
    3010:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <xTaskRemoveFromEventList>
    3014:	88 23       	and	r24, r24
    3016:	89 f0       	breq	.+34     	; 0x303a <xQueueGenericSendFromISR+0xaa>
    3018:	8b 85       	ldd	r24, Y+11	; 0x0b
    301a:	9c 85       	ldd	r25, Y+12	; 0x0c
    301c:	89 2b       	or	r24, r25
    301e:	69 f0       	breq	.+26     	; 0x303a <xQueueGenericSendFromISR+0xaa>
    3020:	8b 85       	ldd	r24, Y+11	; 0x0b
    3022:	9c 85       	ldd	r25, Y+12	; 0x0c
    3024:	21 e0       	ldi	r18, 0x01	; 1
    3026:	fc 01       	movw	r30, r24
    3028:	20 83       	st	Z, r18
    302a:	07 c0       	rjmp	.+14     	; 0x303a <xQueueGenericSendFromISR+0xaa>
    302c:	8d 81       	ldd	r24, Y+5	; 0x05
    302e:	8f 5f       	subi	r24, 0xFF	; 255
    3030:	28 2f       	mov	r18, r24
    3032:	8a 81       	ldd	r24, Y+2	; 0x02
    3034:	9b 81       	ldd	r25, Y+3	; 0x03
    3036:	fc 01       	movw	r30, r24
    3038:	26 8f       	std	Z+30, r18	; 0x1e
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	01 c0       	rjmp	.+2      	; 0x3042 <xQueueGenericSendFromISR+0xb2>
    3040:	19 82       	std	Y+1, r1	; 0x01
    3042:	89 81       	ldd	r24, Y+1	; 0x01
    3044:	2d 96       	adiw	r28, 0x0d	; 13
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	f8 94       	cli
    304a:	de bf       	out	0x3e, r29	; 62
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	cd bf       	out	0x3d, r28	; 61
    3050:	df 91       	pop	r29
    3052:	cf 91       	pop	r28
    3054:	08 95       	ret

00003056 <xQueueReceive>:
    3056:	cf 93       	push	r28
    3058:	df 93       	push	r29
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	2d 97       	sbiw	r28, 0x0d	; 13
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	f8 94       	cli
    3064:	de bf       	out	0x3e, r29	; 62
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	cd bf       	out	0x3d, r28	; 61
    306a:	99 87       	std	Y+9, r25	; 0x09
    306c:	88 87       	std	Y+8, r24	; 0x08
    306e:	7b 87       	std	Y+11, r23	; 0x0b
    3070:	6a 87       	std	Y+10, r22	; 0x0a
    3072:	5d 87       	std	Y+13, r21	; 0x0d
    3074:	4c 87       	std	Y+12, r20	; 0x0c
    3076:	19 82       	std	Y+1, r1	; 0x01
    3078:	88 85       	ldd	r24, Y+8	; 0x08
    307a:	99 85       	ldd	r25, Y+9	; 0x09
    307c:	9b 83       	std	Y+3, r25	; 0x03
    307e:	8a 83       	std	Y+2, r24	; 0x02
    3080:	0f b6       	in	r0, 0x3f	; 63
    3082:	f8 94       	cli
    3084:	0f 92       	push	r0
    3086:	8a 81       	ldd	r24, Y+2	; 0x02
    3088:	9b 81       	ldd	r25, Y+3	; 0x03
    308a:	fc 01       	movw	r30, r24
    308c:	82 8d       	ldd	r24, Z+26	; 0x1a
    308e:	8c 83       	std	Y+4, r24	; 0x04
    3090:	8c 81       	ldd	r24, Y+4	; 0x04
    3092:	88 23       	and	r24, r24
    3094:	f9 f0       	breq	.+62     	; 0x30d4 <xQueueReceive+0x7e>
    3096:	2a 85       	ldd	r18, Y+10	; 0x0a
    3098:	3b 85       	ldd	r19, Y+11	; 0x0b
    309a:	8a 81       	ldd	r24, Y+2	; 0x02
    309c:	9b 81       	ldd	r25, Y+3	; 0x03
    309e:	b9 01       	movw	r22, r18
    30a0:	3e d1       	rcall	.+636    	; 0x331e <prvCopyDataFromQueue>
    30a2:	8c 81       	ldd	r24, Y+4	; 0x04
    30a4:	2f ef       	ldi	r18, 0xFF	; 255
    30a6:	28 0f       	add	r18, r24
    30a8:	8a 81       	ldd	r24, Y+2	; 0x02
    30aa:	9b 81       	ldd	r25, Y+3	; 0x03
    30ac:	fc 01       	movw	r30, r24
    30ae:	22 8f       	std	Z+26, r18	; 0x1a
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	9b 81       	ldd	r25, Y+3	; 0x03
    30b4:	fc 01       	movw	r30, r24
    30b6:	80 85       	ldd	r24, Z+8	; 0x08
    30b8:	88 23       	and	r24, r24
    30ba:	41 f0       	breq	.+16     	; 0x30cc <xQueueReceive+0x76>
    30bc:	8a 81       	ldd	r24, Y+2	; 0x02
    30be:	9b 81       	ldd	r25, Y+3	; 0x03
    30c0:	08 96       	adiw	r24, 0x08	; 8
    30c2:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <xTaskRemoveFromEventList>
    30c6:	88 23       	and	r24, r24
    30c8:	09 f0       	breq	.+2      	; 0x30cc <xQueueReceive+0x76>
    30ca:	61 dd       	rcall	.-1342   	; 0x2b8e <vPortYield>
    30cc:	0f 90       	pop	r0
    30ce:	0f be       	out	0x3f, r0	; 63
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	61 c0       	rjmp	.+194    	; 0x3196 <xQueueReceive+0x140>
    30d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    30d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    30d8:	89 2b       	or	r24, r25
    30da:	21 f4       	brne	.+8      	; 0x30e4 <xQueueReceive+0x8e>
    30dc:	0f 90       	pop	r0
    30de:	0f be       	out	0x3f, r0	; 63
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	59 c0       	rjmp	.+178    	; 0x3196 <xQueueReceive+0x140>
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	88 23       	and	r24, r24
    30e8:	31 f4       	brne	.+12     	; 0x30f6 <xQueueReceive+0xa0>
    30ea:	ce 01       	movw	r24, r28
    30ec:	05 96       	adiw	r24, 0x05	; 5
    30ee:	0e 94 57 24 	call	0x48ae	; 0x48ae <vTaskInternalSetTimeOutState>
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	89 83       	std	Y+1, r24	; 0x01
    30f6:	0f 90       	pop	r0
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	0e 94 a0 21 	call	0x4340	; 0x4340 <vTaskSuspendAll>
    30fe:	0f b6       	in	r0, 0x3f	; 63
    3100:	f8 94       	cli
    3102:	0f 92       	push	r0
    3104:	8a 81       	ldd	r24, Y+2	; 0x02
    3106:	9b 81       	ldd	r25, Y+3	; 0x03
    3108:	fc 01       	movw	r30, r24
    310a:	85 8d       	ldd	r24, Z+29	; 0x1d
    310c:	8f 3f       	cpi	r24, 0xFF	; 255
    310e:	21 f4       	brne	.+8      	; 0x3118 <xQueueReceive+0xc2>
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	9b 81       	ldd	r25, Y+3	; 0x03
    3114:	fc 01       	movw	r30, r24
    3116:	15 8e       	std	Z+29, r1	; 0x1d
    3118:	8a 81       	ldd	r24, Y+2	; 0x02
    311a:	9b 81       	ldd	r25, Y+3	; 0x03
    311c:	fc 01       	movw	r30, r24
    311e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3120:	8f 3f       	cpi	r24, 0xFF	; 255
    3122:	21 f4       	brne	.+8      	; 0x312c <xQueueReceive+0xd6>
    3124:	8a 81       	ldd	r24, Y+2	; 0x02
    3126:	9b 81       	ldd	r25, Y+3	; 0x03
    3128:	fc 01       	movw	r30, r24
    312a:	16 8e       	std	Z+30, r1	; 0x1e
    312c:	0f 90       	pop	r0
    312e:	0f be       	out	0x3f, r0	; 63
    3130:	9e 01       	movw	r18, r28
    3132:	24 5f       	subi	r18, 0xF4	; 244
    3134:	3f 4f       	sbci	r19, 0xFF	; 255
    3136:	ce 01       	movw	r24, r28
    3138:	05 96       	adiw	r24, 0x05	; 5
    313a:	b9 01       	movw	r22, r18
    313c:	0e 94 74 24 	call	0x48e8	; 0x48e8 <xTaskCheckForTimeOut>
    3140:	88 23       	and	r24, r24
    3142:	e9 f4       	brne	.+58     	; 0x317e <xQueueReceive+0x128>
    3144:	8a 81       	ldd	r24, Y+2	; 0x02
    3146:	9b 81       	ldd	r25, Y+3	; 0x03
    3148:	99 d1       	rcall	.+818    	; 0x347c <prvIsQueueEmpty>
    314a:	88 23       	and	r24, r24
    314c:	91 f0       	breq	.+36     	; 0x3172 <xQueueReceive+0x11c>
    314e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3150:	3d 85       	ldd	r19, Y+13	; 0x0d
    3152:	8a 81       	ldd	r24, Y+2	; 0x02
    3154:	9b 81       	ldd	r25, Y+3	; 0x03
    3156:	41 96       	adiw	r24, 0x11	; 17
    3158:	b9 01       	movw	r22, r18
    315a:	0e 94 c8 23 	call	0x4790	; 0x4790 <vTaskPlaceOnEventList>
    315e:	8a 81       	ldd	r24, Y+2	; 0x02
    3160:	9b 81       	ldd	r25, Y+3	; 0x03
    3162:	2e d1       	rcall	.+604    	; 0x33c0 <prvUnlockQueue>
    3164:	0e 94 ad 21 	call	0x435a	; 0x435a <xTaskResumeAll>
    3168:	88 23       	and	r24, r24
    316a:	09 f0       	breq	.+2      	; 0x316e <xQueueReceive+0x118>
    316c:	89 cf       	rjmp	.-238    	; 0x3080 <xQueueReceive+0x2a>
    316e:	0f dd       	rcall	.-1506   	; 0x2b8e <vPortYield>
    3170:	87 cf       	rjmp	.-242    	; 0x3080 <xQueueReceive+0x2a>
    3172:	8a 81       	ldd	r24, Y+2	; 0x02
    3174:	9b 81       	ldd	r25, Y+3	; 0x03
    3176:	24 d1       	rcall	.+584    	; 0x33c0 <prvUnlockQueue>
    3178:	0e 94 ad 21 	call	0x435a	; 0x435a <xTaskResumeAll>
    317c:	81 cf       	rjmp	.-254    	; 0x3080 <xQueueReceive+0x2a>
    317e:	8a 81       	ldd	r24, Y+2	; 0x02
    3180:	9b 81       	ldd	r25, Y+3	; 0x03
    3182:	1e d1       	rcall	.+572    	; 0x33c0 <prvUnlockQueue>
    3184:	0e 94 ad 21 	call	0x435a	; 0x435a <xTaskResumeAll>
    3188:	8a 81       	ldd	r24, Y+2	; 0x02
    318a:	9b 81       	ldd	r25, Y+3	; 0x03
    318c:	77 d1       	rcall	.+750    	; 0x347c <prvIsQueueEmpty>
    318e:	88 23       	and	r24, r24
    3190:	09 f4       	brne	.+2      	; 0x3194 <xQueueReceive+0x13e>
    3192:	76 cf       	rjmp	.-276    	; 0x3080 <xQueueReceive+0x2a>
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	2d 96       	adiw	r28, 0x0d	; 13
    3198:	0f b6       	in	r0, 0x3f	; 63
    319a:	f8 94       	cli
    319c:	de bf       	out	0x3e, r29	; 62
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	cd bf       	out	0x3d, r28	; 61
    31a2:	df 91       	pop	r29
    31a4:	cf 91       	pop	r28
    31a6:	08 95       	ret

000031a8 <prvCopyDataToQueue>:
    31a8:	cf 93       	push	r28
    31aa:	df 93       	push	r29
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
    31b0:	27 97       	sbiw	r28, 0x07	; 7
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	de bf       	out	0x3e, r29	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	cd bf       	out	0x3d, r28	; 61
    31bc:	9c 83       	std	Y+4, r25	; 0x04
    31be:	8b 83       	std	Y+3, r24	; 0x03
    31c0:	7e 83       	std	Y+6, r23	; 0x06
    31c2:	6d 83       	std	Y+5, r22	; 0x05
    31c4:	4f 83       	std	Y+7, r20	; 0x07
    31c6:	1a 82       	std	Y+2, r1	; 0x02
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	9c 81       	ldd	r25, Y+4	; 0x04
    31cc:	fc 01       	movw	r30, r24
    31ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    31d0:	89 83       	std	Y+1, r24	; 0x01
    31d2:	8b 81       	ldd	r24, Y+3	; 0x03
    31d4:	9c 81       	ldd	r25, Y+4	; 0x04
    31d6:	fc 01       	movw	r30, r24
    31d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    31da:	88 23       	and	r24, r24
    31dc:	09 f4       	brne	.+2      	; 0x31e0 <prvCopyDataToQueue+0x38>
    31de:	8e c0       	rjmp	.+284    	; 0x32fc <prvCopyDataToQueue+0x154>
    31e0:	8f 81       	ldd	r24, Y+7	; 0x07
    31e2:	88 23       	and	r24, r24
    31e4:	d9 f5       	brne	.+118    	; 0x325c <prvCopyDataToQueue+0xb4>
    31e6:	8b 81       	ldd	r24, Y+3	; 0x03
    31e8:	9c 81       	ldd	r25, Y+4	; 0x04
    31ea:	fc 01       	movw	r30, r24
    31ec:	84 8d       	ldd	r24, Z+28	; 0x1c
    31ee:	48 2f       	mov	r20, r24
    31f0:	50 e0       	ldi	r21, 0x00	; 0
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	9c 81       	ldd	r25, Y+4	; 0x04
    31f6:	fc 01       	movw	r30, r24
    31f8:	82 81       	ldd	r24, Z+2	; 0x02
    31fa:	93 81       	ldd	r25, Z+3	; 0x03
    31fc:	2d 81       	ldd	r18, Y+5	; 0x05
    31fe:	3e 81       	ldd	r19, Y+6	; 0x06
    3200:	b9 01       	movw	r22, r18
    3202:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <memcpy>
    3206:	8b 81       	ldd	r24, Y+3	; 0x03
    3208:	9c 81       	ldd	r25, Y+4	; 0x04
    320a:	fc 01       	movw	r30, r24
    320c:	22 81       	ldd	r18, Z+2	; 0x02
    320e:	33 81       	ldd	r19, Z+3	; 0x03
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	9c 81       	ldd	r25, Y+4	; 0x04
    3214:	fc 01       	movw	r30, r24
    3216:	84 8d       	ldd	r24, Z+28	; 0x1c
    3218:	88 2f       	mov	r24, r24
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	28 0f       	add	r18, r24
    321e:	39 1f       	adc	r19, r25
    3220:	8b 81       	ldd	r24, Y+3	; 0x03
    3222:	9c 81       	ldd	r25, Y+4	; 0x04
    3224:	fc 01       	movw	r30, r24
    3226:	33 83       	std	Z+3, r19	; 0x03
    3228:	22 83       	std	Z+2, r18	; 0x02
    322a:	8b 81       	ldd	r24, Y+3	; 0x03
    322c:	9c 81       	ldd	r25, Y+4	; 0x04
    322e:	fc 01       	movw	r30, r24
    3230:	22 81       	ldd	r18, Z+2	; 0x02
    3232:	33 81       	ldd	r19, Z+3	; 0x03
    3234:	8b 81       	ldd	r24, Y+3	; 0x03
    3236:	9c 81       	ldd	r25, Y+4	; 0x04
    3238:	fc 01       	movw	r30, r24
    323a:	84 81       	ldd	r24, Z+4	; 0x04
    323c:	95 81       	ldd	r25, Z+5	; 0x05
    323e:	28 17       	cp	r18, r24
    3240:	39 07       	cpc	r19, r25
    3242:	08 f4       	brcc	.+2      	; 0x3246 <prvCopyDataToQueue+0x9e>
    3244:	5b c0       	rjmp	.+182    	; 0x32fc <prvCopyDataToQueue+0x154>
    3246:	8b 81       	ldd	r24, Y+3	; 0x03
    3248:	9c 81       	ldd	r25, Y+4	; 0x04
    324a:	fc 01       	movw	r30, r24
    324c:	20 81       	ld	r18, Z
    324e:	31 81       	ldd	r19, Z+1	; 0x01
    3250:	8b 81       	ldd	r24, Y+3	; 0x03
    3252:	9c 81       	ldd	r25, Y+4	; 0x04
    3254:	fc 01       	movw	r30, r24
    3256:	33 83       	std	Z+3, r19	; 0x03
    3258:	22 83       	std	Z+2, r18	; 0x02
    325a:	50 c0       	rjmp	.+160    	; 0x32fc <prvCopyDataToQueue+0x154>
    325c:	8b 81       	ldd	r24, Y+3	; 0x03
    325e:	9c 81       	ldd	r25, Y+4	; 0x04
    3260:	fc 01       	movw	r30, r24
    3262:	84 8d       	ldd	r24, Z+28	; 0x1c
    3264:	48 2f       	mov	r20, r24
    3266:	50 e0       	ldi	r21, 0x00	; 0
    3268:	8b 81       	ldd	r24, Y+3	; 0x03
    326a:	9c 81       	ldd	r25, Y+4	; 0x04
    326c:	fc 01       	movw	r30, r24
    326e:	86 81       	ldd	r24, Z+6	; 0x06
    3270:	97 81       	ldd	r25, Z+7	; 0x07
    3272:	2d 81       	ldd	r18, Y+5	; 0x05
    3274:	3e 81       	ldd	r19, Y+6	; 0x06
    3276:	b9 01       	movw	r22, r18
    3278:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <memcpy>
    327c:	8b 81       	ldd	r24, Y+3	; 0x03
    327e:	9c 81       	ldd	r25, Y+4	; 0x04
    3280:	fc 01       	movw	r30, r24
    3282:	26 81       	ldd	r18, Z+6	; 0x06
    3284:	37 81       	ldd	r19, Z+7	; 0x07
    3286:	8b 81       	ldd	r24, Y+3	; 0x03
    3288:	9c 81       	ldd	r25, Y+4	; 0x04
    328a:	fc 01       	movw	r30, r24
    328c:	84 8d       	ldd	r24, Z+28	; 0x1c
    328e:	88 2f       	mov	r24, r24
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	91 95       	neg	r25
    3294:	81 95       	neg	r24
    3296:	91 09       	sbc	r25, r1
    3298:	28 0f       	add	r18, r24
    329a:	39 1f       	adc	r19, r25
    329c:	8b 81       	ldd	r24, Y+3	; 0x03
    329e:	9c 81       	ldd	r25, Y+4	; 0x04
    32a0:	fc 01       	movw	r30, r24
    32a2:	37 83       	std	Z+7, r19	; 0x07
    32a4:	26 83       	std	Z+6, r18	; 0x06
    32a6:	8b 81       	ldd	r24, Y+3	; 0x03
    32a8:	9c 81       	ldd	r25, Y+4	; 0x04
    32aa:	fc 01       	movw	r30, r24
    32ac:	26 81       	ldd	r18, Z+6	; 0x06
    32ae:	37 81       	ldd	r19, Z+7	; 0x07
    32b0:	8b 81       	ldd	r24, Y+3	; 0x03
    32b2:	9c 81       	ldd	r25, Y+4	; 0x04
    32b4:	fc 01       	movw	r30, r24
    32b6:	80 81       	ld	r24, Z
    32b8:	91 81       	ldd	r25, Z+1	; 0x01
    32ba:	28 17       	cp	r18, r24
    32bc:	39 07       	cpc	r19, r25
    32be:	a8 f4       	brcc	.+42     	; 0x32ea <prvCopyDataToQueue+0x142>
    32c0:	8b 81       	ldd	r24, Y+3	; 0x03
    32c2:	9c 81       	ldd	r25, Y+4	; 0x04
    32c4:	fc 01       	movw	r30, r24
    32c6:	24 81       	ldd	r18, Z+4	; 0x04
    32c8:	35 81       	ldd	r19, Z+5	; 0x05
    32ca:	8b 81       	ldd	r24, Y+3	; 0x03
    32cc:	9c 81       	ldd	r25, Y+4	; 0x04
    32ce:	fc 01       	movw	r30, r24
    32d0:	84 8d       	ldd	r24, Z+28	; 0x1c
    32d2:	88 2f       	mov	r24, r24
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	91 95       	neg	r25
    32d8:	81 95       	neg	r24
    32da:	91 09       	sbc	r25, r1
    32dc:	28 0f       	add	r18, r24
    32de:	39 1f       	adc	r19, r25
    32e0:	8b 81       	ldd	r24, Y+3	; 0x03
    32e2:	9c 81       	ldd	r25, Y+4	; 0x04
    32e4:	fc 01       	movw	r30, r24
    32e6:	37 83       	std	Z+7, r19	; 0x07
    32e8:	26 83       	std	Z+6, r18	; 0x06
    32ea:	8f 81       	ldd	r24, Y+7	; 0x07
    32ec:	82 30       	cpi	r24, 0x02	; 2
    32ee:	31 f4       	brne	.+12     	; 0x32fc <prvCopyDataToQueue+0x154>
    32f0:	89 81       	ldd	r24, Y+1	; 0x01
    32f2:	88 23       	and	r24, r24
    32f4:	19 f0       	breq	.+6      	; 0x32fc <prvCopyDataToQueue+0x154>
    32f6:	89 81       	ldd	r24, Y+1	; 0x01
    32f8:	81 50       	subi	r24, 0x01	; 1
    32fa:	89 83       	std	Y+1, r24	; 0x01
    32fc:	89 81       	ldd	r24, Y+1	; 0x01
    32fe:	21 e0       	ldi	r18, 0x01	; 1
    3300:	28 0f       	add	r18, r24
    3302:	8b 81       	ldd	r24, Y+3	; 0x03
    3304:	9c 81       	ldd	r25, Y+4	; 0x04
    3306:	fc 01       	movw	r30, r24
    3308:	22 8f       	std	Z+26, r18	; 0x1a
    330a:	8a 81       	ldd	r24, Y+2	; 0x02
    330c:	27 96       	adiw	r28, 0x07	; 7
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	f8 94       	cli
    3312:	de bf       	out	0x3e, r29	; 62
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	cd bf       	out	0x3d, r28	; 61
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	08 95       	ret

0000331e <prvCopyDataFromQueue>:
    331e:	cf 93       	push	r28
    3320:	df 93       	push	r29
    3322:	00 d0       	rcall	.+0      	; 0x3324 <prvCopyDataFromQueue+0x6>
    3324:	1f 92       	push	r1
    3326:	cd b7       	in	r28, 0x3d	; 61
    3328:	de b7       	in	r29, 0x3e	; 62
    332a:	9a 83       	std	Y+2, r25	; 0x02
    332c:	89 83       	std	Y+1, r24	; 0x01
    332e:	7c 83       	std	Y+4, r23	; 0x04
    3330:	6b 83       	std	Y+3, r22	; 0x03
    3332:	89 81       	ldd	r24, Y+1	; 0x01
    3334:	9a 81       	ldd	r25, Y+2	; 0x02
    3336:	fc 01       	movw	r30, r24
    3338:	84 8d       	ldd	r24, Z+28	; 0x1c
    333a:	88 23       	and	r24, r24
    333c:	c9 f1       	breq	.+114    	; 0x33b0 <prvCopyDataFromQueue+0x92>
    333e:	89 81       	ldd	r24, Y+1	; 0x01
    3340:	9a 81       	ldd	r25, Y+2	; 0x02
    3342:	fc 01       	movw	r30, r24
    3344:	26 81       	ldd	r18, Z+6	; 0x06
    3346:	37 81       	ldd	r19, Z+7	; 0x07
    3348:	89 81       	ldd	r24, Y+1	; 0x01
    334a:	9a 81       	ldd	r25, Y+2	; 0x02
    334c:	fc 01       	movw	r30, r24
    334e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3350:	88 2f       	mov	r24, r24
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	28 0f       	add	r18, r24
    3356:	39 1f       	adc	r19, r25
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	9a 81       	ldd	r25, Y+2	; 0x02
    335c:	fc 01       	movw	r30, r24
    335e:	37 83       	std	Z+7, r19	; 0x07
    3360:	26 83       	std	Z+6, r18	; 0x06
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	9a 81       	ldd	r25, Y+2	; 0x02
    3366:	fc 01       	movw	r30, r24
    3368:	26 81       	ldd	r18, Z+6	; 0x06
    336a:	37 81       	ldd	r19, Z+7	; 0x07
    336c:	89 81       	ldd	r24, Y+1	; 0x01
    336e:	9a 81       	ldd	r25, Y+2	; 0x02
    3370:	fc 01       	movw	r30, r24
    3372:	84 81       	ldd	r24, Z+4	; 0x04
    3374:	95 81       	ldd	r25, Z+5	; 0x05
    3376:	28 17       	cp	r18, r24
    3378:	39 07       	cpc	r19, r25
    337a:	50 f0       	brcs	.+20     	; 0x3390 <prvCopyDataFromQueue+0x72>
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	9a 81       	ldd	r25, Y+2	; 0x02
    3380:	fc 01       	movw	r30, r24
    3382:	20 81       	ld	r18, Z
    3384:	31 81       	ldd	r19, Z+1	; 0x01
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	9a 81       	ldd	r25, Y+2	; 0x02
    338a:	fc 01       	movw	r30, r24
    338c:	37 83       	std	Z+7, r19	; 0x07
    338e:	26 83       	std	Z+6, r18	; 0x06
    3390:	89 81       	ldd	r24, Y+1	; 0x01
    3392:	9a 81       	ldd	r25, Y+2	; 0x02
    3394:	fc 01       	movw	r30, r24
    3396:	84 8d       	ldd	r24, Z+28	; 0x1c
    3398:	48 2f       	mov	r20, r24
    339a:	50 e0       	ldi	r21, 0x00	; 0
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	9a 81       	ldd	r25, Y+2	; 0x02
    33a0:	fc 01       	movw	r30, r24
    33a2:	26 81       	ldd	r18, Z+6	; 0x06
    33a4:	37 81       	ldd	r19, Z+7	; 0x07
    33a6:	8b 81       	ldd	r24, Y+3	; 0x03
    33a8:	9c 81       	ldd	r25, Y+4	; 0x04
    33aa:	b9 01       	movw	r22, r18
    33ac:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <memcpy>
    33b0:	00 00       	nop
    33b2:	0f 90       	pop	r0
    33b4:	0f 90       	pop	r0
    33b6:	0f 90       	pop	r0
    33b8:	0f 90       	pop	r0
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	08 95       	ret

000033c0 <prvUnlockQueue>:
    33c0:	cf 93       	push	r28
    33c2:	df 93       	push	r29
    33c4:	00 d0       	rcall	.+0      	; 0x33c6 <prvUnlockQueue+0x6>
    33c6:	1f 92       	push	r1
    33c8:	cd b7       	in	r28, 0x3d	; 61
    33ca:	de b7       	in	r29, 0x3e	; 62
    33cc:	9c 83       	std	Y+4, r25	; 0x04
    33ce:	8b 83       	std	Y+3, r24	; 0x03
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	0f 92       	push	r0
    33d6:	8b 81       	ldd	r24, Y+3	; 0x03
    33d8:	9c 81       	ldd	r25, Y+4	; 0x04
    33da:	fc 01       	movw	r30, r24
    33dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    33de:	89 83       	std	Y+1, r24	; 0x01
    33e0:	12 c0       	rjmp	.+36     	; 0x3406 <prvUnlockQueue+0x46>
    33e2:	8b 81       	ldd	r24, Y+3	; 0x03
    33e4:	9c 81       	ldd	r25, Y+4	; 0x04
    33e6:	fc 01       	movw	r30, r24
    33e8:	81 89       	ldd	r24, Z+17	; 0x11
    33ea:	88 23       	and	r24, r24
    33ec:	81 f0       	breq	.+32     	; 0x340e <prvUnlockQueue+0x4e>
    33ee:	8b 81       	ldd	r24, Y+3	; 0x03
    33f0:	9c 81       	ldd	r25, Y+4	; 0x04
    33f2:	41 96       	adiw	r24, 0x11	; 17
    33f4:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <xTaskRemoveFromEventList>
    33f8:	88 23       	and	r24, r24
    33fa:	11 f0       	breq	.+4      	; 0x3400 <prvUnlockQueue+0x40>
    33fc:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <vTaskMissedYield>
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	81 50       	subi	r24, 0x01	; 1
    3404:	89 83       	std	Y+1, r24	; 0x01
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	18 16       	cp	r1, r24
    340a:	5c f3       	brlt	.-42     	; 0x33e2 <prvUnlockQueue+0x22>
    340c:	01 c0       	rjmp	.+2      	; 0x3410 <prvUnlockQueue+0x50>
    340e:	00 00       	nop
    3410:	8b 81       	ldd	r24, Y+3	; 0x03
    3412:	9c 81       	ldd	r25, Y+4	; 0x04
    3414:	2f ef       	ldi	r18, 0xFF	; 255
    3416:	fc 01       	movw	r30, r24
    3418:	26 8f       	std	Z+30, r18	; 0x1e
    341a:	0f 90       	pop	r0
    341c:	0f be       	out	0x3f, r0	; 63
    341e:	0f b6       	in	r0, 0x3f	; 63
    3420:	f8 94       	cli
    3422:	0f 92       	push	r0
    3424:	8b 81       	ldd	r24, Y+3	; 0x03
    3426:	9c 81       	ldd	r25, Y+4	; 0x04
    3428:	fc 01       	movw	r30, r24
    342a:	85 8d       	ldd	r24, Z+29	; 0x1d
    342c:	8a 83       	std	Y+2, r24	; 0x02
    342e:	12 c0       	rjmp	.+36     	; 0x3454 <prvUnlockQueue+0x94>
    3430:	8b 81       	ldd	r24, Y+3	; 0x03
    3432:	9c 81       	ldd	r25, Y+4	; 0x04
    3434:	fc 01       	movw	r30, r24
    3436:	80 85       	ldd	r24, Z+8	; 0x08
    3438:	88 23       	and	r24, r24
    343a:	81 f0       	breq	.+32     	; 0x345c <prvUnlockQueue+0x9c>
    343c:	8b 81       	ldd	r24, Y+3	; 0x03
    343e:	9c 81       	ldd	r25, Y+4	; 0x04
    3440:	08 96       	adiw	r24, 0x08	; 8
    3442:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <xTaskRemoveFromEventList>
    3446:	88 23       	and	r24, r24
    3448:	11 f0       	breq	.+4      	; 0x344e <prvUnlockQueue+0x8e>
    344a:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <vTaskMissedYield>
    344e:	8a 81       	ldd	r24, Y+2	; 0x02
    3450:	81 50       	subi	r24, 0x01	; 1
    3452:	8a 83       	std	Y+2, r24	; 0x02
    3454:	8a 81       	ldd	r24, Y+2	; 0x02
    3456:	18 16       	cp	r1, r24
    3458:	5c f3       	brlt	.-42     	; 0x3430 <prvUnlockQueue+0x70>
    345a:	01 c0       	rjmp	.+2      	; 0x345e <prvUnlockQueue+0x9e>
    345c:	00 00       	nop
    345e:	8b 81       	ldd	r24, Y+3	; 0x03
    3460:	9c 81       	ldd	r25, Y+4	; 0x04
    3462:	2f ef       	ldi	r18, 0xFF	; 255
    3464:	fc 01       	movw	r30, r24
    3466:	25 8f       	std	Z+29, r18	; 0x1d
    3468:	0f 90       	pop	r0
    346a:	0f be       	out	0x3f, r0	; 63
    346c:	00 00       	nop
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	0f 90       	pop	r0
    3474:	0f 90       	pop	r0
    3476:	df 91       	pop	r29
    3478:	cf 91       	pop	r28
    347a:	08 95       	ret

0000347c <prvIsQueueEmpty>:
    347c:	cf 93       	push	r28
    347e:	df 93       	push	r29
    3480:	00 d0       	rcall	.+0      	; 0x3482 <prvIsQueueEmpty+0x6>
    3482:	cd b7       	in	r28, 0x3d	; 61
    3484:	de b7       	in	r29, 0x3e	; 62
    3486:	9b 83       	std	Y+3, r25	; 0x03
    3488:	8a 83       	std	Y+2, r24	; 0x02
    348a:	0f b6       	in	r0, 0x3f	; 63
    348c:	f8 94       	cli
    348e:	0f 92       	push	r0
    3490:	8a 81       	ldd	r24, Y+2	; 0x02
    3492:	9b 81       	ldd	r25, Y+3	; 0x03
    3494:	fc 01       	movw	r30, r24
    3496:	82 8d       	ldd	r24, Z+26	; 0x1a
    3498:	88 23       	and	r24, r24
    349a:	19 f4       	brne	.+6      	; 0x34a2 <prvIsQueueEmpty+0x26>
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	89 83       	std	Y+1, r24	; 0x01
    34a0:	01 c0       	rjmp	.+2      	; 0x34a4 <prvIsQueueEmpty+0x28>
    34a2:	19 82       	std	Y+1, r1	; 0x01
    34a4:	0f 90       	pop	r0
    34a6:	0f be       	out	0x3f, r0	; 63
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	0f 90       	pop	r0
    34ac:	0f 90       	pop	r0
    34ae:	0f 90       	pop	r0
    34b0:	df 91       	pop	r29
    34b2:	cf 91       	pop	r28
    34b4:	08 95       	ret

000034b6 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
    34b6:	cf 93       	push	r28
    34b8:	df 93       	push	r29
    34ba:	00 d0       	rcall	.+0      	; 0x34bc <vQueueAddToRegistry+0x6>
    34bc:	1f 92       	push	r1
    34be:	1f 92       	push	r1
    34c0:	cd b7       	in	r28, 0x3d	; 61
    34c2:	de b7       	in	r29, 0x3e	; 62
    34c4:	9b 83       	std	Y+3, r25	; 0x03
    34c6:	8a 83       	std	Y+2, r24	; 0x02
    34c8:	7d 83       	std	Y+5, r23	; 0x05
    34ca:	6c 83       	std	Y+4, r22	; 0x04
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    34cc:	19 82       	std	Y+1, r1	; 0x01
    34ce:	2e c0       	rjmp	.+92     	; 0x352c <vQueueAddToRegistry+0x76>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
    34d0:	89 81       	ldd	r24, Y+1	; 0x01
    34d2:	88 2f       	mov	r24, r24
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	88 0f       	add	r24, r24
    34d8:	99 1f       	adc	r25, r25
    34da:	88 0f       	add	r24, r24
    34dc:	99 1f       	adc	r25, r25
    34de:	87 53       	subi	r24, 0x37	; 55
    34e0:	9c 4e       	sbci	r25, 0xEC	; 236
    34e2:	fc 01       	movw	r30, r24
    34e4:	80 81       	ld	r24, Z
    34e6:	91 81       	ldd	r25, Z+1	; 0x01
    34e8:	89 2b       	or	r24, r25
    34ea:	e9 f4       	brne	.+58     	; 0x3526 <vQueueAddToRegistry+0x70>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	88 2f       	mov	r24, r24
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	88 0f       	add	r24, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	88 0f       	add	r24, r24
    34f8:	99 1f       	adc	r25, r25
    34fa:	87 53       	subi	r24, 0x37	; 55
    34fc:	9c 4e       	sbci	r25, 0xEC	; 236
    34fe:	2c 81       	ldd	r18, Y+4	; 0x04
    3500:	3d 81       	ldd	r19, Y+5	; 0x05
    3502:	fc 01       	movw	r30, r24
    3504:	31 83       	std	Z+1, r19	; 0x01
    3506:	20 83       	st	Z, r18
                xQueueRegistry[ ux ].xHandle = xQueue;
    3508:	89 81       	ldd	r24, Y+1	; 0x01
    350a:	88 2f       	mov	r24, r24
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	88 0f       	add	r24, r24
    3510:	99 1f       	adc	r25, r25
    3512:	88 0f       	add	r24, r24
    3514:	99 1f       	adc	r25, r25
    3516:	85 53       	subi	r24, 0x35	; 53
    3518:	9c 4e       	sbci	r25, 0xEC	; 236
    351a:	2a 81       	ldd	r18, Y+2	; 0x02
    351c:	3b 81       	ldd	r19, Y+3	; 0x03
    351e:	fc 01       	movw	r30, r24
    3520:	31 83       	std	Z+1, r19	; 0x01
    3522:	20 83       	st	Z, r18

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
    3524:	06 c0       	rjmp	.+12     	; 0x3532 <vQueueAddToRegistry+0x7c>
    {
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	8f 5f       	subi	r24, 0xFF	; 255
    352a:	89 83       	std	Y+1, r24	; 0x01
    352c:	89 81       	ldd	r24, Y+1	; 0x01
    352e:	85 30       	cpi	r24, 0x05	; 5
    3530:	78 f2       	brcs	.-98     	; 0x34d0 <vQueueAddToRegistry+0x1a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
    3532:	00 00       	nop
    3534:	0f 90       	pop	r0
    3536:	0f 90       	pop	r0
    3538:	0f 90       	pop	r0
    353a:	0f 90       	pop	r0
    353c:	0f 90       	pop	r0
    353e:	df 91       	pop	r29
    3540:	cf 91       	pop	r28
    3542:	08 95       	ret

00003544 <xStreamBufferGenericCreate>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    3544:	0f 93       	push	r16
    3546:	cf 93       	push	r28
    3548:	df 93       	push	r29
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62
    354e:	28 97       	sbiw	r28, 0x08	; 8
    3550:	0f b6       	in	r0, 0x3f	; 63
    3552:	f8 94       	cli
    3554:	de bf       	out	0x3e, r29	; 62
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	cd bf       	out	0x3d, r28	; 61
    355a:	9d 83       	std	Y+5, r25	; 0x05
    355c:	8c 83       	std	Y+4, r24	; 0x04
    355e:	7f 83       	std	Y+7, r23	; 0x07
    3560:	6e 83       	std	Y+6, r22	; 0x06
    3562:	48 87       	std	Y+8, r20	; 0x08
    3564:	88 85       	ldd	r24, Y+8	; 0x08
    3566:	81 30       	cpi	r24, 0x01	; 1
    3568:	19 f4       	brne	.+6      	; 0x3570 <xStreamBufferGenericCreate+0x2c>
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	8b 83       	std	Y+3, r24	; 0x03
    356e:	01 c0       	rjmp	.+2      	; 0x3572 <xStreamBufferGenericCreate+0x2e>
    3570:	1b 82       	std	Y+3, r1	; 0x03
    3572:	8e 81       	ldd	r24, Y+6	; 0x06
    3574:	9f 81       	ldd	r25, Y+7	; 0x07
    3576:	89 2b       	or	r24, r25
    3578:	21 f4       	brne	.+8      	; 0x3582 <xStreamBufferGenericCreate+0x3e>
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	9f 83       	std	Y+7, r25	; 0x07
    3580:	8e 83       	std	Y+6, r24	; 0x06
    3582:	8c 81       	ldd	r24, Y+4	; 0x04
    3584:	9d 81       	ldd	r25, Y+5	; 0x05
    3586:	9c 01       	movw	r18, r24
    3588:	20 5f       	subi	r18, 0xF0	; 240
    358a:	3f 4f       	sbci	r19, 0xFF	; 255
    358c:	8c 81       	ldd	r24, Y+4	; 0x04
    358e:	9d 81       	ldd	r25, Y+5	; 0x05
    3590:	82 17       	cp	r24, r18
    3592:	93 07       	cpc	r25, r19
    3594:	60 f4       	brcc	.+24     	; 0x35ae <xStreamBufferGenericCreate+0x6a>
    3596:	8c 81       	ldd	r24, Y+4	; 0x04
    3598:	9d 81       	ldd	r25, Y+5	; 0x05
    359a:	01 96       	adiw	r24, 0x01	; 1
    359c:	9d 83       	std	Y+5, r25	; 0x05
    359e:	8c 83       	std	Y+4, r24	; 0x04
    35a0:	8c 81       	ldd	r24, Y+4	; 0x04
    35a2:	9d 81       	ldd	r25, Y+5	; 0x05
    35a4:	0f 96       	adiw	r24, 0x0f	; 15
    35a6:	5f d8       	rcall	.-3906   	; 0x2666 <pvPortMalloc>
    35a8:	9a 83       	std	Y+2, r25	; 0x02
    35aa:	89 83       	std	Y+1, r24	; 0x01
    35ac:	02 c0       	rjmp	.+4      	; 0x35b2 <xStreamBufferGenericCreate+0x6e>
    35ae:	1a 82       	std	Y+2, r1	; 0x02
    35b0:	19 82       	std	Y+1, r1	; 0x01
    35b2:	89 81       	ldd	r24, Y+1	; 0x01
    35b4:	9a 81       	ldd	r25, Y+2	; 0x02
    35b6:	89 2b       	or	r24, r25
    35b8:	69 f0       	breq	.+26     	; 0x35d4 <xStreamBufferGenericCreate+0x90>
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
    35bc:	9a 81       	ldd	r25, Y+2	; 0x02
    35be:	bc 01       	movw	r22, r24
    35c0:	61 5f       	subi	r22, 0xF1	; 241
    35c2:	7f 4f       	sbci	r23, 0xFF	; 255
    35c4:	2e 81       	ldd	r18, Y+6	; 0x06
    35c6:	3f 81       	ldd	r19, Y+7	; 0x07
    35c8:	4c 81       	ldd	r20, Y+4	; 0x04
    35ca:	5d 81       	ldd	r21, Y+5	; 0x05
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	9a 81       	ldd	r25, Y+2	; 0x02
    35d0:	0b 81       	ldd	r16, Y+3	; 0x03
    35d2:	df d3       	rcall	.+1982   	; 0x3d92 <prvInitialiseNewStreamBuffer>
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	9a 81       	ldd	r25, Y+2	; 0x02
    35d8:	28 96       	adiw	r28, 0x08	; 8
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	de bf       	out	0x3e, r29	; 62
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	cd bf       	out	0x3d, r28	; 61
    35e4:	df 91       	pop	r29
    35e6:	cf 91       	pop	r28
    35e8:	0f 91       	pop	r16
    35ea:	08 95       	ret

000035ec <xStreamBufferSpacesAvailable>:
    35ec:	cf 93       	push	r28
    35ee:	df 93       	push	r29
    35f0:	00 d0       	rcall	.+0      	; 0x35f2 <xStreamBufferSpacesAvailable+0x6>
    35f2:	00 d0       	rcall	.+0      	; 0x35f4 <xStreamBufferSpacesAvailable+0x8>
    35f4:	cd b7       	in	r28, 0x3d	; 61
    35f6:	de b7       	in	r29, 0x3e	; 62
    35f8:	9e 83       	std	Y+6, r25	; 0x06
    35fa:	8d 83       	std	Y+5, r24	; 0x05
    35fc:	8d 81       	ldd	r24, Y+5	; 0x05
    35fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3600:	9c 83       	std	Y+4, r25	; 0x04
    3602:	8b 83       	std	Y+3, r24	; 0x03
    3604:	8b 81       	ldd	r24, Y+3	; 0x03
    3606:	9c 81       	ldd	r25, Y+4	; 0x04
    3608:	fc 01       	movw	r30, r24
    360a:	24 81       	ldd	r18, Z+4	; 0x04
    360c:	35 81       	ldd	r19, Z+5	; 0x05
    360e:	8b 81       	ldd	r24, Y+3	; 0x03
    3610:	9c 81       	ldd	r25, Y+4	; 0x04
    3612:	fc 01       	movw	r30, r24
    3614:	80 81       	ld	r24, Z
    3616:	91 81       	ldd	r25, Z+1	; 0x01
    3618:	82 0f       	add	r24, r18
    361a:	93 1f       	adc	r25, r19
    361c:	9a 83       	std	Y+2, r25	; 0x02
    361e:	89 83       	std	Y+1, r24	; 0x01
    3620:	8b 81       	ldd	r24, Y+3	; 0x03
    3622:	9c 81       	ldd	r25, Y+4	; 0x04
    3624:	fc 01       	movw	r30, r24
    3626:	82 81       	ldd	r24, Z+2	; 0x02
    3628:	93 81       	ldd	r25, Z+3	; 0x03
    362a:	29 81       	ldd	r18, Y+1	; 0x01
    362c:	3a 81       	ldd	r19, Y+2	; 0x02
    362e:	a9 01       	movw	r20, r18
    3630:	48 1b       	sub	r20, r24
    3632:	59 0b       	sbc	r21, r25
    3634:	ca 01       	movw	r24, r20
    3636:	9a 83       	std	Y+2, r25	; 0x02
    3638:	89 83       	std	Y+1, r24	; 0x01
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	9a 81       	ldd	r25, Y+2	; 0x02
    363e:	01 97       	sbiw	r24, 0x01	; 1
    3640:	9a 83       	std	Y+2, r25	; 0x02
    3642:	89 83       	std	Y+1, r24	; 0x01
    3644:	8b 81       	ldd	r24, Y+3	; 0x03
    3646:	9c 81       	ldd	r25, Y+4	; 0x04
    3648:	fc 01       	movw	r30, r24
    364a:	24 81       	ldd	r18, Z+4	; 0x04
    364c:	35 81       	ldd	r19, Z+5	; 0x05
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	9a 81       	ldd	r25, Y+2	; 0x02
    3652:	82 17       	cp	r24, r18
    3654:	93 07       	cpc	r25, r19
    3656:	68 f0       	brcs	.+26     	; 0x3672 <xStreamBufferSpacesAvailable+0x86>
    3658:	8b 81       	ldd	r24, Y+3	; 0x03
    365a:	9c 81       	ldd	r25, Y+4	; 0x04
    365c:	fc 01       	movw	r30, r24
    365e:	84 81       	ldd	r24, Z+4	; 0x04
    3660:	95 81       	ldd	r25, Z+5	; 0x05
    3662:	29 81       	ldd	r18, Y+1	; 0x01
    3664:	3a 81       	ldd	r19, Y+2	; 0x02
    3666:	a9 01       	movw	r20, r18
    3668:	48 1b       	sub	r20, r24
    366a:	59 0b       	sbc	r21, r25
    366c:	ca 01       	movw	r24, r20
    366e:	9a 83       	std	Y+2, r25	; 0x02
    3670:	89 83       	std	Y+1, r24	; 0x01
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	26 96       	adiw	r28, 0x06	; 6
    3678:	0f b6       	in	r0, 0x3f	; 63
    367a:	f8 94       	cli
    367c:	de bf       	out	0x3e, r29	; 62
    367e:	0f be       	out	0x3f, r0	; 63
    3680:	cd bf       	out	0x3d, r28	; 61
    3682:	df 91       	pop	r29
    3684:	cf 91       	pop	r28
    3686:	08 95       	ret

00003688 <xStreamBufferBytesAvailable>:
    3688:	cf 93       	push	r28
    368a:	df 93       	push	r29
    368c:	00 d0       	rcall	.+0      	; 0x368e <xStreamBufferBytesAvailable+0x6>
    368e:	00 d0       	rcall	.+0      	; 0x3690 <xStreamBufferBytesAvailable+0x8>
    3690:	cd b7       	in	r28, 0x3d	; 61
    3692:	de b7       	in	r29, 0x3e	; 62
    3694:	9e 83       	std	Y+6, r25	; 0x06
    3696:	8d 83       	std	Y+5, r24	; 0x05
    3698:	8d 81       	ldd	r24, Y+5	; 0x05
    369a:	9e 81       	ldd	r25, Y+6	; 0x06
    369c:	9a 83       	std	Y+2, r25	; 0x02
    369e:	89 83       	std	Y+1, r24	; 0x01
    36a0:	89 81       	ldd	r24, Y+1	; 0x01
    36a2:	9a 81       	ldd	r25, Y+2	; 0x02
    36a4:	33 d3       	rcall	.+1638   	; 0x3d0c <prvBytesInBuffer>
    36a6:	9c 83       	std	Y+4, r25	; 0x04
    36a8:	8b 83       	std	Y+3, r24	; 0x03
    36aa:	8b 81       	ldd	r24, Y+3	; 0x03
    36ac:	9c 81       	ldd	r25, Y+4	; 0x04
    36ae:	26 96       	adiw	r28, 0x06	; 6
    36b0:	0f b6       	in	r0, 0x3f	; 63
    36b2:	f8 94       	cli
    36b4:	de bf       	out	0x3e, r29	; 62
    36b6:	0f be       	out	0x3f, r0	; 63
    36b8:	cd bf       	out	0x3d, r28	; 61
    36ba:	df 91       	pop	r29
    36bc:	cf 91       	pop	r28
    36be:	08 95       	ret

000036c0 <xStreamBufferSendFromISR>:
    36c0:	cf 92       	push	r12
    36c2:	df 92       	push	r13
    36c4:	ef 92       	push	r14
    36c6:	ff 92       	push	r15
    36c8:	0f 93       	push	r16
    36ca:	1f 93       	push	r17
    36cc:	cf 93       	push	r28
    36ce:	df 93       	push	r29
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    36d4:	61 97       	sbiw	r28, 0x11	; 17
    36d6:	0f b6       	in	r0, 0x3f	; 63
    36d8:	f8 94       	cli
    36da:	de bf       	out	0x3e, r29	; 62
    36dc:	0f be       	out	0x3f, r0	; 63
    36de:	cd bf       	out	0x3d, r28	; 61
    36e0:	9b 87       	std	Y+11, r25	; 0x0b
    36e2:	8a 87       	std	Y+10, r24	; 0x0a
    36e4:	7d 87       	std	Y+13, r23	; 0x0d
    36e6:	6c 87       	std	Y+12, r22	; 0x0c
    36e8:	5f 87       	std	Y+15, r21	; 0x0f
    36ea:	4e 87       	std	Y+14, r20	; 0x0e
    36ec:	39 8b       	std	Y+17, r19	; 0x11
    36ee:	28 8b       	std	Y+16, r18	; 0x10
    36f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    36f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    36f4:	9c 83       	std	Y+4, r25	; 0x04
    36f6:	8b 83       	std	Y+3, r24	; 0x03
    36f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    36fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    36fc:	9a 83       	std	Y+2, r25	; 0x02
    36fe:	89 83       	std	Y+1, r24	; 0x01
    3700:	8b 81       	ldd	r24, Y+3	; 0x03
    3702:	9c 81       	ldd	r25, Y+4	; 0x04
    3704:	fc 01       	movw	r30, r24
    3706:	86 85       	ldd	r24, Z+14	; 0x0e
    3708:	88 2f       	mov	r24, r24
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	81 70       	andi	r24, 0x01	; 1
    370e:	99 27       	eor	r25, r25
    3710:	89 2b       	or	r24, r25
    3712:	29 f0       	breq	.+10     	; 0x371e <xStreamBufferSendFromISR+0x5e>
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	9a 81       	ldd	r25, Y+2	; 0x02
    3718:	02 96       	adiw	r24, 0x02	; 2
    371a:	9a 83       	std	Y+2, r25	; 0x02
    371c:	89 83       	std	Y+1, r24	; 0x01
    371e:	8b 81       	ldd	r24, Y+3	; 0x03
    3720:	9c 81       	ldd	r25, Y+4	; 0x04
    3722:	64 df       	rcall	.-312    	; 0x35ec <xStreamBufferSpacesAvailable>
    3724:	9e 83       	std	Y+6, r25	; 0x06
    3726:	8d 83       	std	Y+5, r24	; 0x05
    3728:	e9 81       	ldd	r30, Y+1	; 0x01
    372a:	fa 81       	ldd	r31, Y+2	; 0x02
    372c:	2d 81       	ldd	r18, Y+5	; 0x05
    372e:	3e 81       	ldd	r19, Y+6	; 0x06
    3730:	4e 85       	ldd	r20, Y+14	; 0x0e
    3732:	5f 85       	ldd	r21, Y+15	; 0x0f
    3734:	6c 85       	ldd	r22, Y+12	; 0x0c
    3736:	7d 85       	ldd	r23, Y+13	; 0x0d
    3738:	8b 81       	ldd	r24, Y+3	; 0x03
    373a:	9c 81       	ldd	r25, Y+4	; 0x04
    373c:	8f 01       	movw	r16, r30
    373e:	41 d0       	rcall	.+130    	; 0x37c2 <prvWriteMessageToBuffer>
    3740:	98 87       	std	Y+8, r25	; 0x08
    3742:	8f 83       	std	Y+7, r24	; 0x07
    3744:	8f 81       	ldd	r24, Y+7	; 0x07
    3746:	98 85       	ldd	r25, Y+8	; 0x08
    3748:	89 2b       	or	r24, r25
    374a:	51 f1       	breq	.+84     	; 0x37a0 <xStreamBufferSendFromISR+0xe0>
    374c:	8b 81       	ldd	r24, Y+3	; 0x03
    374e:	9c 81       	ldd	r25, Y+4	; 0x04
    3750:	dd d2       	rcall	.+1466   	; 0x3d0c <prvBytesInBuffer>
    3752:	9c 01       	movw	r18, r24
    3754:	8b 81       	ldd	r24, Y+3	; 0x03
    3756:	9c 81       	ldd	r25, Y+4	; 0x04
    3758:	fc 01       	movw	r30, r24
    375a:	86 81       	ldd	r24, Z+6	; 0x06
    375c:	97 81       	ldd	r25, Z+7	; 0x07
    375e:	28 17       	cp	r18, r24
    3760:	39 07       	cpc	r19, r25
    3762:	f0 f0       	brcs	.+60     	; 0x37a0 <xStreamBufferSendFromISR+0xe0>
    3764:	19 86       	std	Y+9, r1	; 0x09
    3766:	8b 81       	ldd	r24, Y+3	; 0x03
    3768:	9c 81       	ldd	r25, Y+4	; 0x04
    376a:	fc 01       	movw	r30, r24
    376c:	80 85       	ldd	r24, Z+8	; 0x08
    376e:	91 85       	ldd	r25, Z+9	; 0x09
    3770:	89 2b       	or	r24, r25
    3772:	b1 f0       	breq	.+44     	; 0x37a0 <xStreamBufferSendFromISR+0xe0>
    3774:	8b 81       	ldd	r24, Y+3	; 0x03
    3776:	9c 81       	ldd	r25, Y+4	; 0x04
    3778:	fc 01       	movw	r30, r24
    377a:	80 85       	ldd	r24, Z+8	; 0x08
    377c:	91 85       	ldd	r25, Z+9	; 0x09
    377e:	28 89       	ldd	r18, Y+16	; 0x10
    3780:	39 89       	ldd	r19, Y+17	; 0x11
    3782:	69 01       	movw	r12, r18
    3784:	e1 2c       	mov	r14, r1
    3786:	f1 2c       	mov	r15, r1
    3788:	00 e0       	ldi	r16, 0x00	; 0
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	a9 01       	movw	r20, r18
    3790:	60 e0       	ldi	r22, 0x00	; 0
    3792:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <xTaskGenericNotifyFromISR>
    3796:	8b 81       	ldd	r24, Y+3	; 0x03
    3798:	9c 81       	ldd	r25, Y+4	; 0x04
    379a:	fc 01       	movw	r30, r24
    379c:	11 86       	std	Z+9, r1	; 0x09
    379e:	10 86       	std	Z+8, r1	; 0x08
    37a0:	8f 81       	ldd	r24, Y+7	; 0x07
    37a2:	98 85       	ldd	r25, Y+8	; 0x08
    37a4:	61 96       	adiw	r28, 0x11	; 17
    37a6:	0f b6       	in	r0, 0x3f	; 63
    37a8:	f8 94       	cli
    37aa:	de bf       	out	0x3e, r29	; 62
    37ac:	0f be       	out	0x3f, r0	; 63
    37ae:	cd bf       	out	0x3d, r28	; 61
    37b0:	df 91       	pop	r29
    37b2:	cf 91       	pop	r28
    37b4:	1f 91       	pop	r17
    37b6:	0f 91       	pop	r16
    37b8:	ff 90       	pop	r15
    37ba:	ef 90       	pop	r14
    37bc:	df 90       	pop	r13
    37be:	cf 90       	pop	r12
    37c0:	08 95       	ret

000037c2 <prvWriteMessageToBuffer>:
    37c2:	0f 93       	push	r16
    37c4:	1f 93       	push	r17
    37c6:	cf 93       	push	r28
    37c8:	df 93       	push	r29
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
    37ce:	2d 97       	sbiw	r28, 0x0d	; 13
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	f8 94       	cli
    37d4:	de bf       	out	0x3e, r29	; 62
    37d6:	0f be       	out	0x3f, r0	; 63
    37d8:	cd bf       	out	0x3d, r28	; 61
    37da:	9d 83       	std	Y+5, r25	; 0x05
    37dc:	8c 83       	std	Y+4, r24	; 0x04
    37de:	7f 83       	std	Y+7, r23	; 0x07
    37e0:	6e 83       	std	Y+6, r22	; 0x06
    37e2:	59 87       	std	Y+9, r21	; 0x09
    37e4:	48 87       	std	Y+8, r20	; 0x08
    37e6:	3b 87       	std	Y+11, r19	; 0x0b
    37e8:	2a 87       	std	Y+10, r18	; 0x0a
    37ea:	1d 87       	std	Y+13, r17	; 0x0d
    37ec:	0c 87       	std	Y+12, r16	; 0x0c
    37ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    37f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    37f2:	89 2b       	or	r24, r25
    37f4:	11 f4       	brne	.+4      	; 0x37fa <prvWriteMessageToBuffer+0x38>
    37f6:	19 82       	std	Y+1, r1	; 0x01
    37f8:	2b c0       	rjmp	.+86     	; 0x3850 <prvWriteMessageToBuffer+0x8e>
    37fa:	8c 81       	ldd	r24, Y+4	; 0x04
    37fc:	9d 81       	ldd	r25, Y+5	; 0x05
    37fe:	fc 01       	movw	r30, r24
    3800:	86 85       	ldd	r24, Z+14	; 0x0e
    3802:	88 2f       	mov	r24, r24
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	81 70       	andi	r24, 0x01	; 1
    3808:	99 27       	eor	r25, r25
    380a:	89 2b       	or	r24, r25
    380c:	69 f4       	brne	.+26     	; 0x3828 <prvWriteMessageToBuffer+0x66>
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	89 83       	std	Y+1, r24	; 0x01
    3812:	28 85       	ldd	r18, Y+8	; 0x08
    3814:	39 85       	ldd	r19, Y+9	; 0x09
    3816:	8a 85       	ldd	r24, Y+10	; 0x0a
    3818:	9b 85       	ldd	r25, Y+11	; 0x0b
    381a:	28 17       	cp	r18, r24
    381c:	39 07       	cpc	r19, r25
    381e:	08 f4       	brcc	.+2      	; 0x3822 <prvWriteMessageToBuffer+0x60>
    3820:	c9 01       	movw	r24, r18
    3822:	99 87       	std	Y+9, r25	; 0x09
    3824:	88 87       	std	Y+8, r24	; 0x08
    3826:	14 c0       	rjmp	.+40     	; 0x3850 <prvWriteMessageToBuffer+0x8e>
    3828:	2a 85       	ldd	r18, Y+10	; 0x0a
    382a:	3b 85       	ldd	r19, Y+11	; 0x0b
    382c:	8c 85       	ldd	r24, Y+12	; 0x0c
    382e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3830:	28 17       	cp	r18, r24
    3832:	39 07       	cpc	r19, r25
    3834:	60 f0       	brcs	.+24     	; 0x384e <prvWriteMessageToBuffer+0x8c>
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	89 83       	std	Y+1, r24	; 0x01
    383a:	9e 01       	movw	r18, r28
    383c:	28 5f       	subi	r18, 0xF8	; 248
    383e:	3f 4f       	sbci	r19, 0xFF	; 255
    3840:	8c 81       	ldd	r24, Y+4	; 0x04
    3842:	9d 81       	ldd	r25, Y+5	; 0x05
    3844:	42 e0       	ldi	r20, 0x02	; 2
    3846:	50 e0       	ldi	r21, 0x00	; 0
    3848:	b9 01       	movw	r22, r18
    384a:	42 d1       	rcall	.+644    	; 0x3ad0 <prvWriteBytesToBuffer>
    384c:	01 c0       	rjmp	.+2      	; 0x3850 <prvWriteMessageToBuffer+0x8e>
    384e:	19 82       	std	Y+1, r1	; 0x01
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	88 23       	and	r24, r24
    3854:	59 f0       	breq	.+22     	; 0x386c <prvWriteMessageToBuffer+0xaa>
    3856:	48 85       	ldd	r20, Y+8	; 0x08
    3858:	59 85       	ldd	r21, Y+9	; 0x09
    385a:	2e 81       	ldd	r18, Y+6	; 0x06
    385c:	3f 81       	ldd	r19, Y+7	; 0x07
    385e:	8c 81       	ldd	r24, Y+4	; 0x04
    3860:	9d 81       	ldd	r25, Y+5	; 0x05
    3862:	b9 01       	movw	r22, r18
    3864:	35 d1       	rcall	.+618    	; 0x3ad0 <prvWriteBytesToBuffer>
    3866:	9b 83       	std	Y+3, r25	; 0x03
    3868:	8a 83       	std	Y+2, r24	; 0x02
    386a:	02 c0       	rjmp	.+4      	; 0x3870 <prvWriteMessageToBuffer+0xae>
    386c:	1b 82       	std	Y+3, r1	; 0x03
    386e:	1a 82       	std	Y+2, r1	; 0x02
    3870:	8a 81       	ldd	r24, Y+2	; 0x02
    3872:	9b 81       	ldd	r25, Y+3	; 0x03
    3874:	2d 96       	adiw	r28, 0x0d	; 13
    3876:	0f b6       	in	r0, 0x3f	; 63
    3878:	f8 94       	cli
    387a:	de bf       	out	0x3e, r29	; 62
    387c:	0f be       	out	0x3f, r0	; 63
    387e:	cd bf       	out	0x3d, r28	; 61
    3880:	df 91       	pop	r29
    3882:	cf 91       	pop	r28
    3884:	1f 91       	pop	r17
    3886:	0f 91       	pop	r16
    3888:	08 95       	ret

0000388a <xStreamBufferReceive>:
    388a:	cf 92       	push	r12
    388c:	df 92       	push	r13
    388e:	ef 92       	push	r14
    3890:	ff 92       	push	r15
    3892:	0f 93       	push	r16
    3894:	1f 93       	push	r17
    3896:	cf 93       	push	r28
    3898:	df 93       	push	r29
    389a:	cd b7       	in	r28, 0x3d	; 61
    389c:	de b7       	in	r29, 0x3e	; 62
    389e:	60 97       	sbiw	r28, 0x10	; 16
    38a0:	0f b6       	in	r0, 0x3f	; 63
    38a2:	f8 94       	cli
    38a4:	de bf       	out	0x3e, r29	; 62
    38a6:	0f be       	out	0x3f, r0	; 63
    38a8:	cd bf       	out	0x3d, r28	; 61
    38aa:	9a 87       	std	Y+10, r25	; 0x0a
    38ac:	89 87       	std	Y+9, r24	; 0x09
    38ae:	7c 87       	std	Y+12, r23	; 0x0c
    38b0:	6b 87       	std	Y+11, r22	; 0x0b
    38b2:	5e 87       	std	Y+14, r21	; 0x0e
    38b4:	4d 87       	std	Y+13, r20	; 0x0d
    38b6:	38 8b       	std	Y+16, r19	; 0x10
    38b8:	2f 87       	std	Y+15, r18	; 0x0f
    38ba:	89 85       	ldd	r24, Y+9	; 0x09
    38bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38be:	98 87       	std	Y+8, r25	; 0x08
    38c0:	8f 83       	std	Y+7, r24	; 0x07
    38c2:	1a 82       	std	Y+2, r1	; 0x02
    38c4:	19 82       	std	Y+1, r1	; 0x01
    38c6:	8f 81       	ldd	r24, Y+7	; 0x07
    38c8:	98 85       	ldd	r25, Y+8	; 0x08
    38ca:	fc 01       	movw	r30, r24
    38cc:	86 85       	ldd	r24, Z+14	; 0x0e
    38ce:	88 2f       	mov	r24, r24
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	81 70       	andi	r24, 0x01	; 1
    38d4:	99 27       	eor	r25, r25
    38d6:	89 2b       	or	r24, r25
    38d8:	29 f0       	breq	.+10     	; 0x38e4 <xStreamBufferReceive+0x5a>
    38da:	82 e0       	ldi	r24, 0x02	; 2
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	9e 83       	std	Y+6, r25	; 0x06
    38e0:	8d 83       	std	Y+5, r24	; 0x05
    38e2:	02 c0       	rjmp	.+4      	; 0x38e8 <xStreamBufferReceive+0x5e>
    38e4:	1e 82       	std	Y+6, r1	; 0x06
    38e6:	1d 82       	std	Y+5, r1	; 0x05
    38e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ea:	98 89       	ldd	r25, Y+16	; 0x10
    38ec:	89 2b       	or	r24, r25
    38ee:	09 f4       	brne	.+2      	; 0x38f2 <xStreamBufferReceive+0x68>
    38f0:	3e c0       	rjmp	.+124    	; 0x396e <xStreamBufferReceive+0xe4>
    38f2:	0f b6       	in	r0, 0x3f	; 63
    38f4:	f8 94       	cli
    38f6:	0f 92       	push	r0
    38f8:	8f 81       	ldd	r24, Y+7	; 0x07
    38fa:	98 85       	ldd	r25, Y+8	; 0x08
    38fc:	07 d2       	rcall	.+1038   	; 0x3d0c <prvBytesInBuffer>
    38fe:	9c 83       	std	Y+4, r25	; 0x04
    3900:	8b 83       	std	Y+3, r24	; 0x03
    3902:	2b 81       	ldd	r18, Y+3	; 0x03
    3904:	3c 81       	ldd	r19, Y+4	; 0x04
    3906:	8d 81       	ldd	r24, Y+5	; 0x05
    3908:	9e 81       	ldd	r25, Y+6	; 0x06
    390a:	82 17       	cp	r24, r18
    390c:	93 07       	cpc	r25, r19
    390e:	68 f0       	brcs	.+26     	; 0x392a <xStreamBufferReceive+0xa0>
    3910:	60 e0       	ldi	r22, 0x00	; 0
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	0e 94 f6 28 	call	0x51ec	; 0x51ec <xTaskGenericNotifyStateClear>
    391a:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <xTaskGetCurrentTaskHandle>
    391e:	9c 01       	movw	r18, r24
    3920:	8f 81       	ldd	r24, Y+7	; 0x07
    3922:	98 85       	ldd	r25, Y+8	; 0x08
    3924:	fc 01       	movw	r30, r24
    3926:	31 87       	std	Z+9, r19	; 0x09
    3928:	20 87       	std	Z+8, r18	; 0x08
    392a:	0f 90       	pop	r0
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	2b 81       	ldd	r18, Y+3	; 0x03
    3930:	3c 81       	ldd	r19, Y+4	; 0x04
    3932:	8d 81       	ldd	r24, Y+5	; 0x05
    3934:	9e 81       	ldd	r25, Y+6	; 0x06
    3936:	82 17       	cp	r24, r18
    3938:	93 07       	cpc	r25, r19
    393a:	f0 f0       	brcs	.+60     	; 0x3978 <xStreamBufferReceive+0xee>
    393c:	8f 85       	ldd	r24, Y+15	; 0x0f
    393e:	98 89       	ldd	r25, Y+16	; 0x10
    3940:	6c 01       	movw	r12, r24
    3942:	e1 2c       	mov	r14, r1
    3944:	f1 2c       	mov	r15, r1
    3946:	00 e0       	ldi	r16, 0x00	; 0
    3948:	10 e0       	ldi	r17, 0x00	; 0
    394a:	98 01       	movw	r18, r16
    394c:	40 e0       	ldi	r20, 0x00	; 0
    394e:	50 e0       	ldi	r21, 0x00	; 0
    3950:	ba 01       	movw	r22, r20
    3952:	80 e0       	ldi	r24, 0x00	; 0
    3954:	0e 94 67 25 	call	0x4ace	; 0x4ace <xTaskGenericNotifyWait>
    3958:	8f 81       	ldd	r24, Y+7	; 0x07
    395a:	98 85       	ldd	r25, Y+8	; 0x08
    395c:	fc 01       	movw	r30, r24
    395e:	11 86       	std	Z+9, r1	; 0x09
    3960:	10 86       	std	Z+8, r1	; 0x08
    3962:	8f 81       	ldd	r24, Y+7	; 0x07
    3964:	98 85       	ldd	r25, Y+8	; 0x08
    3966:	d2 d1       	rcall	.+932    	; 0x3d0c <prvBytesInBuffer>
    3968:	9c 83       	std	Y+4, r25	; 0x04
    396a:	8b 83       	std	Y+3, r24	; 0x03
    396c:	05 c0       	rjmp	.+10     	; 0x3978 <xStreamBufferReceive+0xee>
    396e:	8f 81       	ldd	r24, Y+7	; 0x07
    3970:	98 85       	ldd	r25, Y+8	; 0x08
    3972:	cc d1       	rcall	.+920    	; 0x3d0c <prvBytesInBuffer>
    3974:	9c 83       	std	Y+4, r25	; 0x04
    3976:	8b 83       	std	Y+3, r24	; 0x03
    3978:	2b 81       	ldd	r18, Y+3	; 0x03
    397a:	3c 81       	ldd	r19, Y+4	; 0x04
    397c:	8d 81       	ldd	r24, Y+5	; 0x05
    397e:	9e 81       	ldd	r25, Y+6	; 0x06
    3980:	82 17       	cp	r24, r18
    3982:	93 07       	cpc	r25, r19
    3984:	70 f5       	brcc	.+92     	; 0x39e2 <xStreamBufferReceive+0x158>
    3986:	ed 81       	ldd	r30, Y+5	; 0x05
    3988:	fe 81       	ldd	r31, Y+6	; 0x06
    398a:	2b 81       	ldd	r18, Y+3	; 0x03
    398c:	3c 81       	ldd	r19, Y+4	; 0x04
    398e:	4d 85       	ldd	r20, Y+13	; 0x0d
    3990:	5e 85       	ldd	r21, Y+14	; 0x0e
    3992:	6b 85       	ldd	r22, Y+11	; 0x0b
    3994:	7c 85       	ldd	r23, Y+12	; 0x0c
    3996:	8f 81       	ldd	r24, Y+7	; 0x07
    3998:	98 85       	ldd	r25, Y+8	; 0x08
    399a:	8f 01       	movw	r16, r30
    399c:	33 d0       	rcall	.+102    	; 0x3a04 <prvReadMessageFromBuffer>
    399e:	9a 83       	std	Y+2, r25	; 0x02
    39a0:	89 83       	std	Y+1, r24	; 0x01
    39a2:	89 81       	ldd	r24, Y+1	; 0x01
    39a4:	9a 81       	ldd	r25, Y+2	; 0x02
    39a6:	89 2b       	or	r24, r25
    39a8:	e1 f0       	breq	.+56     	; 0x39e2 <xStreamBufferReceive+0x158>
    39aa:	ca d4       	rcall	.+2452   	; 0x4340 <vTaskSuspendAll>
    39ac:	8f 81       	ldd	r24, Y+7	; 0x07
    39ae:	98 85       	ldd	r25, Y+8	; 0x08
    39b0:	fc 01       	movw	r30, r24
    39b2:	82 85       	ldd	r24, Z+10	; 0x0a
    39b4:	93 85       	ldd	r25, Z+11	; 0x0b
    39b6:	89 2b       	or	r24, r25
    39b8:	99 f0       	breq	.+38     	; 0x39e0 <xStreamBufferReceive+0x156>
    39ba:	8f 81       	ldd	r24, Y+7	; 0x07
    39bc:	98 85       	ldd	r25, Y+8	; 0x08
    39be:	fc 01       	movw	r30, r24
    39c0:	82 85       	ldd	r24, Z+10	; 0x0a
    39c2:	93 85       	ldd	r25, Z+11	; 0x0b
    39c4:	e1 2c       	mov	r14, r1
    39c6:	f1 2c       	mov	r15, r1
    39c8:	00 e0       	ldi	r16, 0x00	; 0
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	a9 01       	movw	r20, r18
    39d0:	60 e0       	ldi	r22, 0x00	; 0
    39d2:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <xTaskGenericNotify>
    39d6:	8f 81       	ldd	r24, Y+7	; 0x07
    39d8:	98 85       	ldd	r25, Y+8	; 0x08
    39da:	fc 01       	movw	r30, r24
    39dc:	13 86       	std	Z+11, r1	; 0x0b
    39de:	12 86       	std	Z+10, r1	; 0x0a
    39e0:	bc d4       	rcall	.+2424   	; 0x435a <xTaskResumeAll>
    39e2:	89 81       	ldd	r24, Y+1	; 0x01
    39e4:	9a 81       	ldd	r25, Y+2	; 0x02
    39e6:	60 96       	adiw	r28, 0x10	; 16
    39e8:	0f b6       	in	r0, 0x3f	; 63
    39ea:	f8 94       	cli
    39ec:	de bf       	out	0x3e, r29	; 62
    39ee:	0f be       	out	0x3f, r0	; 63
    39f0:	cd bf       	out	0x3d, r28	; 61
    39f2:	df 91       	pop	r29
    39f4:	cf 91       	pop	r28
    39f6:	1f 91       	pop	r17
    39f8:	0f 91       	pop	r16
    39fa:	ff 90       	pop	r15
    39fc:	ef 90       	pop	r14
    39fe:	df 90       	pop	r13
    3a00:	cf 90       	pop	r12
    3a02:	08 95       	ret

00003a04 <prvReadMessageFromBuffer>:
    3a04:	0f 93       	push	r16
    3a06:	1f 93       	push	r17
    3a08:	cf 93       	push	r28
    3a0a:	df 93       	push	r29
    3a0c:	cd b7       	in	r28, 0x3d	; 61
    3a0e:	de b7       	in	r29, 0x3e	; 62
    3a10:	62 97       	sbiw	r28, 0x12	; 18
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	f8 94       	cli
    3a16:	de bf       	out	0x3e, r29	; 62
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	cd bf       	out	0x3d, r28	; 61
    3a1c:	9a 87       	std	Y+10, r25	; 0x0a
    3a1e:	89 87       	std	Y+9, r24	; 0x09
    3a20:	7c 87       	std	Y+12, r23	; 0x0c
    3a22:	6b 87       	std	Y+11, r22	; 0x0b
    3a24:	5e 87       	std	Y+14, r21	; 0x0e
    3a26:	4d 87       	std	Y+13, r20	; 0x0d
    3a28:	38 8b       	std	Y+16, r19	; 0x10
    3a2a:	2f 87       	std	Y+15, r18	; 0x0f
    3a2c:	1a 8b       	std	Y+18, r17	; 0x12
    3a2e:	09 8b       	std	Y+17, r16	; 0x11
    3a30:	89 89       	ldd	r24, Y+17	; 0x11
    3a32:	9a 89       	ldd	r25, Y+18	; 0x12
    3a34:	89 2b       	or	r24, r25
    3a36:	81 f1       	breq	.+96     	; 0x3a98 <prvReadMessageFromBuffer+0x94>
    3a38:	89 85       	ldd	r24, Y+9	; 0x09
    3a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	80 81       	ld	r24, Z
    3a40:	91 81       	ldd	r25, Z+1	; 0x01
    3a42:	9c 83       	std	Y+4, r25	; 0x04
    3a44:	8b 83       	std	Y+3, r24	; 0x03
    3a46:	2f 85       	ldd	r18, Y+15	; 0x0f
    3a48:	38 89       	ldd	r19, Y+16	; 0x10
    3a4a:	49 89       	ldd	r20, Y+17	; 0x11
    3a4c:	5a 89       	ldd	r21, Y+18	; 0x12
    3a4e:	be 01       	movw	r22, r28
    3a50:	69 5f       	subi	r22, 0xF9	; 249
    3a52:	7f 4f       	sbci	r23, 0xFF	; 255
    3a54:	89 85       	ldd	r24, Y+9	; 0x09
    3a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a58:	c2 d0       	rcall	.+388    	; 0x3bde <prvReadBytesFromBuffer>
    3a5a:	8f 81       	ldd	r24, Y+7	; 0x07
    3a5c:	98 85       	ldd	r25, Y+8	; 0x08
    3a5e:	9a 83       	std	Y+2, r25	; 0x02
    3a60:	89 83       	std	Y+1, r24	; 0x01
    3a62:	2f 85       	ldd	r18, Y+15	; 0x0f
    3a64:	38 89       	ldd	r19, Y+16	; 0x10
    3a66:	89 89       	ldd	r24, Y+17	; 0x11
    3a68:	9a 89       	ldd	r25, Y+18	; 0x12
    3a6a:	a9 01       	movw	r20, r18
    3a6c:	48 1b       	sub	r20, r24
    3a6e:	59 0b       	sbc	r21, r25
    3a70:	ca 01       	movw	r24, r20
    3a72:	98 8b       	std	Y+16, r25	; 0x10
    3a74:	8f 87       	std	Y+15, r24	; 0x0f
    3a76:	29 81       	ldd	r18, Y+1	; 0x01
    3a78:	3a 81       	ldd	r19, Y+2	; 0x02
    3a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a7e:	82 17       	cp	r24, r18
    3a80:	93 07       	cpc	r25, r19
    3a82:	70 f4       	brcc	.+28     	; 0x3aa0 <prvReadMessageFromBuffer+0x9c>
    3a84:	89 85       	ldd	r24, Y+9	; 0x09
    3a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a88:	2b 81       	ldd	r18, Y+3	; 0x03
    3a8a:	3c 81       	ldd	r19, Y+4	; 0x04
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	31 83       	std	Z+1, r19	; 0x01
    3a90:	20 83       	st	Z, r18
    3a92:	1a 82       	std	Y+2, r1	; 0x02
    3a94:	19 82       	std	Y+1, r1	; 0x01
    3a96:	04 c0       	rjmp	.+8      	; 0x3aa0 <prvReadMessageFromBuffer+0x9c>
    3a98:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a9c:	9a 83       	std	Y+2, r25	; 0x02
    3a9e:	89 83       	std	Y+1, r24	; 0x01
    3aa0:	2f 85       	ldd	r18, Y+15	; 0x0f
    3aa2:	38 89       	ldd	r19, Y+16	; 0x10
    3aa4:	49 81       	ldd	r20, Y+1	; 0x01
    3aa6:	5a 81       	ldd	r21, Y+2	; 0x02
    3aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aac:	89 85       	ldd	r24, Y+9	; 0x09
    3aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab0:	96 d0       	rcall	.+300    	; 0x3bde <prvReadBytesFromBuffer>
    3ab2:	9e 83       	std	Y+6, r25	; 0x06
    3ab4:	8d 83       	std	Y+5, r24	; 0x05
    3ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aba:	62 96       	adiw	r28, 0x12	; 18
    3abc:	0f b6       	in	r0, 0x3f	; 63
    3abe:	f8 94       	cli
    3ac0:	de bf       	out	0x3e, r29	; 62
    3ac2:	0f be       	out	0x3f, r0	; 63
    3ac4:	cd bf       	out	0x3d, r28	; 61
    3ac6:	df 91       	pop	r29
    3ac8:	cf 91       	pop	r28
    3aca:	1f 91       	pop	r17
    3acc:	0f 91       	pop	r16
    3ace:	08 95       	ret

00003ad0 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount )
{
    3ad0:	cf 93       	push	r28
    3ad2:	df 93       	push	r29
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
    3ad8:	2a 97       	sbiw	r28, 0x0a	; 10
    3ada:	0f b6       	in	r0, 0x3f	; 63
    3adc:	f8 94       	cli
    3ade:	de bf       	out	0x3e, r29	; 62
    3ae0:	0f be       	out	0x3f, r0	; 63
    3ae2:	cd bf       	out	0x3d, r28	; 61
    3ae4:	9e 83       	std	Y+6, r25	; 0x06
    3ae6:	8d 83       	std	Y+5, r24	; 0x05
    3ae8:	78 87       	std	Y+8, r23	; 0x08
    3aea:	6f 83       	std	Y+7, r22	; 0x07
    3aec:	5a 87       	std	Y+10, r21	; 0x0a
    3aee:	49 87       	std	Y+9, r20	; 0x09
    size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );

    xNextHead = pxStreamBuffer->xHead;
    3af0:	8d 81       	ldd	r24, Y+5	; 0x05
    3af2:	9e 81       	ldd	r25, Y+6	; 0x06
    3af4:	fc 01       	movw	r30, r24
    3af6:	82 81       	ldd	r24, Z+2	; 0x02
    3af8:	93 81       	ldd	r25, Z+3	; 0x03
    3afa:	9a 83       	std	Y+2, r25	; 0x02
    3afc:	89 83       	std	Y+1, r24	; 0x01

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    3afe:	8d 81       	ldd	r24, Y+5	; 0x05
    3b00:	9e 81       	ldd	r25, Y+6	; 0x06
    3b02:	fc 01       	movw	r30, r24
    3b04:	24 81       	ldd	r18, Z+4	; 0x04
    3b06:	35 81       	ldd	r19, Z+5	; 0x05
    3b08:	89 81       	ldd	r24, Y+1	; 0x01
    3b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b0c:	a9 01       	movw	r20, r18
    3b0e:	48 1b       	sub	r20, r24
    3b10:	59 0b       	sbc	r21, r25
    3b12:	ca 01       	movw	r24, r20
    3b14:	29 85       	ldd	r18, Y+9	; 0x09
    3b16:	3a 85       	ldd	r19, Y+10	; 0x0a
    3b18:	28 17       	cp	r18, r24
    3b1a:	39 07       	cpc	r19, r25
    3b1c:	08 f4       	brcc	.+2      	; 0x3b20 <prvWriteBytesToBuffer+0x50>
    3b1e:	c9 01       	movw	r24, r18
    3b20:	9c 83       	std	Y+4, r25	; 0x04
    3b22:	8b 83       	std	Y+3, r24	; 0x03

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    3b24:	8d 81       	ldd	r24, Y+5	; 0x05
    3b26:	9e 81       	ldd	r25, Y+6	; 0x06
    3b28:	fc 01       	movw	r30, r24
    3b2a:	24 85       	ldd	r18, Z+12	; 0x0c
    3b2c:	35 85       	ldd	r19, Z+13	; 0x0d
    3b2e:	89 81       	ldd	r24, Y+1	; 0x01
    3b30:	9a 81       	ldd	r25, Y+2	; 0x02
    3b32:	82 0f       	add	r24, r18
    3b34:	93 1f       	adc	r25, r19
    3b36:	4b 81       	ldd	r20, Y+3	; 0x03
    3b38:	5c 81       	ldd	r21, Y+4	; 0x04
    3b3a:	2f 81       	ldd	r18, Y+7	; 0x07
    3b3c:	38 85       	ldd	r19, Y+8	; 0x08
    3b3e:	b9 01       	movw	r22, r18
    3b40:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
    3b44:	29 85       	ldd	r18, Y+9	; 0x09
    3b46:	3a 85       	ldd	r19, Y+10	; 0x0a
    3b48:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b4c:	82 17       	cp	r24, r18
    3b4e:	93 07       	cpc	r25, r19
    3b50:	a8 f4       	brcc	.+42     	; 0x3b7c <prvWriteBytesToBuffer+0xac>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    3b52:	29 85       	ldd	r18, Y+9	; 0x09
    3b54:	3a 85       	ldd	r19, Y+10	; 0x0a
    3b56:	8b 81       	ldd	r24, Y+3	; 0x03
    3b58:	9c 81       	ldd	r25, Y+4	; 0x04
    3b5a:	a9 01       	movw	r20, r18
    3b5c:	48 1b       	sub	r20, r24
    3b5e:	59 0b       	sbc	r21, r25
    3b60:	2f 81       	ldd	r18, Y+7	; 0x07
    3b62:	38 85       	ldd	r19, Y+8	; 0x08
    3b64:	8b 81       	ldd	r24, Y+3	; 0x03
    3b66:	9c 81       	ldd	r25, Y+4	; 0x04
    3b68:	28 0f       	add	r18, r24
    3b6a:	39 1f       	adc	r19, r25
    3b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b70:	fc 01       	movw	r30, r24
    3b72:	84 85       	ldd	r24, Z+12	; 0x0c
    3b74:	95 85       	ldd	r25, Z+13	; 0x0d
    3b76:	b9 01       	movw	r22, r18
    3b78:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
    3b7c:	29 81       	ldd	r18, Y+1	; 0x01
    3b7e:	3a 81       	ldd	r19, Y+2	; 0x02
    3b80:	89 85       	ldd	r24, Y+9	; 0x09
    3b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b84:	82 0f       	add	r24, r18
    3b86:	93 1f       	adc	r25, r19
    3b88:	9a 83       	std	Y+2, r25	; 0x02
    3b8a:	89 83       	std	Y+1, r24	; 0x01

    if( xNextHead >= pxStreamBuffer->xLength )
    3b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b90:	fc 01       	movw	r30, r24
    3b92:	24 81       	ldd	r18, Z+4	; 0x04
    3b94:	35 81       	ldd	r19, Z+5	; 0x05
    3b96:	89 81       	ldd	r24, Y+1	; 0x01
    3b98:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9a:	82 17       	cp	r24, r18
    3b9c:	93 07       	cpc	r25, r19
    3b9e:	68 f0       	brcs	.+26     	; 0x3bba <prvWriteBytesToBuffer+0xea>
    {
        xNextHead -= pxStreamBuffer->xLength;
    3ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba4:	fc 01       	movw	r30, r24
    3ba6:	84 81       	ldd	r24, Z+4	; 0x04
    3ba8:	95 81       	ldd	r25, Z+5	; 0x05
    3baa:	29 81       	ldd	r18, Y+1	; 0x01
    3bac:	3a 81       	ldd	r19, Y+2	; 0x02
    3bae:	a9 01       	movw	r20, r18
    3bb0:	48 1b       	sub	r20, r24
    3bb2:	59 0b       	sbc	r21, r25
    3bb4:	ca 01       	movw	r24, r20
    3bb6:	9a 83       	std	Y+2, r25	; 0x02
    3bb8:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
    3bba:	8d 81       	ldd	r24, Y+5	; 0x05
    3bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bbe:	29 81       	ldd	r18, Y+1	; 0x01
    3bc0:	3a 81       	ldd	r19, Y+2	; 0x02
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	33 83       	std	Z+3, r19	; 0x03
    3bc6:	22 83       	std	Z+2, r18	; 0x02

    return xCount;
    3bc8:	89 85       	ldd	r24, Y+9	; 0x09
    3bca:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    3bcc:	2a 96       	adiw	r28, 0x0a	; 10
    3bce:	0f b6       	in	r0, 0x3f	; 63
    3bd0:	f8 94       	cli
    3bd2:	de bf       	out	0x3e, r29	; 62
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	cd bf       	out	0x3d, r28	; 61
    3bd8:	df 91       	pop	r29
    3bda:	cf 91       	pop	r28
    3bdc:	08 95       	ret

00003bde <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xMaxCount,
                                      size_t xBytesAvailable )
{
    3bde:	cf 93       	push	r28
    3be0:	df 93       	push	r29
    3be2:	cd b7       	in	r28, 0x3d	; 61
    3be4:	de b7       	in	r29, 0x3e	; 62
    3be6:	2e 97       	sbiw	r28, 0x0e	; 14
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	98 87       	std	Y+8, r25	; 0x08
    3bf4:	8f 83       	std	Y+7, r24	; 0x07
    3bf6:	7a 87       	std	Y+10, r23	; 0x0a
    3bf8:	69 87       	std	Y+9, r22	; 0x09
    3bfa:	5c 87       	std	Y+12, r21	; 0x0c
    3bfc:	4b 87       	std	Y+11, r20	; 0x0b
    3bfe:	3e 87       	std	Y+14, r19	; 0x0e
    3c00:	2d 87       	std	Y+13, r18	; 0x0d
    size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
    3c02:	2d 85       	ldd	r18, Y+13	; 0x0d
    3c04:	3e 85       	ldd	r19, Y+14	; 0x0e
    3c06:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c08:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c0a:	28 17       	cp	r18, r24
    3c0c:	39 07       	cpc	r19, r25
    3c0e:	08 f4       	brcc	.+2      	; 0x3c12 <prvReadBytesFromBuffer+0x34>
    3c10:	c9 01       	movw	r24, r18
    3c12:	9c 83       	std	Y+4, r25	; 0x04
    3c14:	8b 83       	std	Y+3, r24	; 0x03

    if( xCount > ( size_t ) 0 )
    3c16:	8b 81       	ldd	r24, Y+3	; 0x03
    3c18:	9c 81       	ldd	r25, Y+4	; 0x04
    3c1a:	89 2b       	or	r24, r25
    3c1c:	09 f4       	brne	.+2      	; 0x3c20 <prvReadBytesFromBuffer+0x42>
    3c1e:	6b c0       	rjmp	.+214    	; 0x3cf6 <prvReadBytesFromBuffer+0x118>
    {
        xNextTail = pxStreamBuffer->xTail;
    3c20:	8f 81       	ldd	r24, Y+7	; 0x07
    3c22:	98 85       	ldd	r25, Y+8	; 0x08
    3c24:	fc 01       	movw	r30, r24
    3c26:	80 81       	ld	r24, Z
    3c28:	91 81       	ldd	r25, Z+1	; 0x01
    3c2a:	9a 83       	std	Y+2, r25	; 0x02
    3c2c:	89 83       	std	Y+1, r24	; 0x01

        /* Calculate the number of bytes that can be read - which may be
         * less than the number wanted if the data wraps around to the start of
         * the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    3c2e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c30:	98 85       	ldd	r25, Y+8	; 0x08
    3c32:	fc 01       	movw	r30, r24
    3c34:	24 81       	ldd	r18, Z+4	; 0x04
    3c36:	35 81       	ldd	r19, Z+5	; 0x05
    3c38:	89 81       	ldd	r24, Y+1	; 0x01
    3c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3c:	a9 01       	movw	r20, r18
    3c3e:	48 1b       	sub	r20, r24
    3c40:	59 0b       	sbc	r21, r25
    3c42:	ca 01       	movw	r24, r20
    3c44:	2b 81       	ldd	r18, Y+3	; 0x03
    3c46:	3c 81       	ldd	r19, Y+4	; 0x04
    3c48:	28 17       	cp	r18, r24
    3c4a:	39 07       	cpc	r19, r25
    3c4c:	08 f4       	brcc	.+2      	; 0x3c50 <prvReadBytesFromBuffer+0x72>
    3c4e:	c9 01       	movw	r24, r18
    3c50:	9e 83       	std	Y+6, r25	; 0x06
    3c52:	8d 83       	std	Y+5, r24	; 0x05

        /* Obtain the number of bytes it is possible to obtain in the first
         * read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    3c54:	8f 81       	ldd	r24, Y+7	; 0x07
    3c56:	98 85       	ldd	r25, Y+8	; 0x08
    3c58:	fc 01       	movw	r30, r24
    3c5a:	24 85       	ldd	r18, Z+12	; 0x0c
    3c5c:	35 85       	ldd	r19, Z+13	; 0x0d
    3c5e:	89 81       	ldd	r24, Y+1	; 0x01
    3c60:	9a 81       	ldd	r25, Y+2	; 0x02
    3c62:	28 0f       	add	r18, r24
    3c64:	39 1f       	adc	r19, r25
    3c66:	4d 81       	ldd	r20, Y+5	; 0x05
    3c68:	5e 81       	ldd	r21, Y+6	; 0x06
    3c6a:	89 85       	ldd	r24, Y+9	; 0x09
    3c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c6e:	b9 01       	movw	r22, r18
    3c70:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <memcpy>

        /* If the total number of wanted bytes is greater than the number
         * that could be read in the first read... */
        if( xCount > xFirstLength )
    3c74:	2b 81       	ldd	r18, Y+3	; 0x03
    3c76:	3c 81       	ldd	r19, Y+4	; 0x04
    3c78:	8d 81       	ldd	r24, Y+5	; 0x05
    3c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c7c:	82 17       	cp	r24, r18
    3c7e:	93 07       	cpc	r25, r19
    3c80:	a0 f4       	brcc	.+40     	; 0x3caa <prvReadBytesFromBuffer+0xcc>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    3c82:	2b 81       	ldd	r18, Y+3	; 0x03
    3c84:	3c 81       	ldd	r19, Y+4	; 0x04
    3c86:	8d 81       	ldd	r24, Y+5	; 0x05
    3c88:	9e 81       	ldd	r25, Y+6	; 0x06
    3c8a:	a9 01       	movw	r20, r18
    3c8c:	48 1b       	sub	r20, r24
    3c8e:	59 0b       	sbc	r21, r25
    3c90:	8f 81       	ldd	r24, Y+7	; 0x07
    3c92:	98 85       	ldd	r25, Y+8	; 0x08
    3c94:	fc 01       	movw	r30, r24
    3c96:	64 85       	ldd	r22, Z+12	; 0x0c
    3c98:	75 85       	ldd	r23, Z+13	; 0x0d
    3c9a:	29 85       	ldd	r18, Y+9	; 0x09
    3c9c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca2:	82 0f       	add	r24, r18
    3ca4:	93 1f       	adc	r25, r19
    3ca6:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
         * the buffer. */
        xNextTail += xCount;
    3caa:	29 81       	ldd	r18, Y+1	; 0x01
    3cac:	3a 81       	ldd	r19, Y+2	; 0x02
    3cae:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb2:	82 0f       	add	r24, r18
    3cb4:	93 1f       	adc	r25, r19
    3cb6:	9a 83       	std	Y+2, r25	; 0x02
    3cb8:	89 83       	std	Y+1, r24	; 0x01

        if( xNextTail >= pxStreamBuffer->xLength )
    3cba:	8f 81       	ldd	r24, Y+7	; 0x07
    3cbc:	98 85       	ldd	r25, Y+8	; 0x08
    3cbe:	fc 01       	movw	r30, r24
    3cc0:	24 81       	ldd	r18, Z+4	; 0x04
    3cc2:	35 81       	ldd	r19, Z+5	; 0x05
    3cc4:	89 81       	ldd	r24, Y+1	; 0x01
    3cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc8:	82 17       	cp	r24, r18
    3cca:	93 07       	cpc	r25, r19
    3ccc:	68 f0       	brcs	.+26     	; 0x3ce8 <prvReadBytesFromBuffer+0x10a>
        {
            xNextTail -= pxStreamBuffer->xLength;
    3cce:	8f 81       	ldd	r24, Y+7	; 0x07
    3cd0:	98 85       	ldd	r25, Y+8	; 0x08
    3cd2:	fc 01       	movw	r30, r24
    3cd4:	84 81       	ldd	r24, Z+4	; 0x04
    3cd6:	95 81       	ldd	r25, Z+5	; 0x05
    3cd8:	29 81       	ldd	r18, Y+1	; 0x01
    3cda:	3a 81       	ldd	r19, Y+2	; 0x02
    3cdc:	a9 01       	movw	r20, r18
    3cde:	48 1b       	sub	r20, r24
    3ce0:	59 0b       	sbc	r21, r25
    3ce2:	ca 01       	movw	r24, r20
    3ce4:	9a 83       	std	Y+2, r25	; 0x02
    3ce6:	89 83       	std	Y+1, r24	; 0x01
        }

        pxStreamBuffer->xTail = xNextTail;
    3ce8:	8f 81       	ldd	r24, Y+7	; 0x07
    3cea:	98 85       	ldd	r25, Y+8	; 0x08
    3cec:	29 81       	ldd	r18, Y+1	; 0x01
    3cee:	3a 81       	ldd	r19, Y+2	; 0x02
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	31 83       	std	Z+1, r19	; 0x01
    3cf4:	20 83       	st	Z, r18
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    3cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf8:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3cfa:	2e 96       	adiw	r28, 0x0e	; 14
    3cfc:	0f b6       	in	r0, 0x3f	; 63
    3cfe:	f8 94       	cli
    3d00:	de bf       	out	0x3e, r29	; 62
    3d02:	0f be       	out	0x3f, r0	; 63
    3d04:	cd bf       	out	0x3d, r28	; 61
    3d06:	df 91       	pop	r29
    3d08:	cf 91       	pop	r28
    3d0a:	08 95       	ret

00003d0c <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    3d0c:	cf 93       	push	r28
    3d0e:	df 93       	push	r29
    3d10:	00 d0       	rcall	.+0      	; 0x3d12 <prvBytesInBuffer+0x6>
    3d12:	1f 92       	push	r1
    3d14:	cd b7       	in	r28, 0x3d	; 61
    3d16:	de b7       	in	r29, 0x3e	; 62
    3d18:	9c 83       	std	Y+4, r25	; 0x04
    3d1a:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    3d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d20:	fc 01       	movw	r30, r24
    3d22:	24 81       	ldd	r18, Z+4	; 0x04
    3d24:	35 81       	ldd	r19, Z+5	; 0x05
    3d26:	8b 81       	ldd	r24, Y+3	; 0x03
    3d28:	9c 81       	ldd	r25, Y+4	; 0x04
    3d2a:	fc 01       	movw	r30, r24
    3d2c:	82 81       	ldd	r24, Z+2	; 0x02
    3d2e:	93 81       	ldd	r25, Z+3	; 0x03
    3d30:	82 0f       	add	r24, r18
    3d32:	93 1f       	adc	r25, r19
    3d34:	9a 83       	std	Y+2, r25	; 0x02
    3d36:	89 83       	std	Y+1, r24	; 0x01
    xCount -= pxStreamBuffer->xTail;
    3d38:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d3c:	fc 01       	movw	r30, r24
    3d3e:	80 81       	ld	r24, Z
    3d40:	91 81       	ldd	r25, Z+1	; 0x01
    3d42:	29 81       	ldd	r18, Y+1	; 0x01
    3d44:	3a 81       	ldd	r19, Y+2	; 0x02
    3d46:	a9 01       	movw	r20, r18
    3d48:	48 1b       	sub	r20, r24
    3d4a:	59 0b       	sbc	r21, r25
    3d4c:	ca 01       	movw	r24, r20
    3d4e:	9a 83       	std	Y+2, r25	; 0x02
    3d50:	89 83       	std	Y+1, r24	; 0x01

    if( xCount >= pxStreamBuffer->xLength )
    3d52:	8b 81       	ldd	r24, Y+3	; 0x03
    3d54:	9c 81       	ldd	r25, Y+4	; 0x04
    3d56:	fc 01       	movw	r30, r24
    3d58:	24 81       	ldd	r18, Z+4	; 0x04
    3d5a:	35 81       	ldd	r19, Z+5	; 0x05
    3d5c:	89 81       	ldd	r24, Y+1	; 0x01
    3d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d60:	82 17       	cp	r24, r18
    3d62:	93 07       	cpc	r25, r19
    3d64:	68 f0       	brcs	.+26     	; 0x3d80 <prvBytesInBuffer+0x74>
    {
        xCount -= pxStreamBuffer->xLength;
    3d66:	8b 81       	ldd	r24, Y+3	; 0x03
    3d68:	9c 81       	ldd	r25, Y+4	; 0x04
    3d6a:	fc 01       	movw	r30, r24
    3d6c:	84 81       	ldd	r24, Z+4	; 0x04
    3d6e:	95 81       	ldd	r25, Z+5	; 0x05
    3d70:	29 81       	ldd	r18, Y+1	; 0x01
    3d72:	3a 81       	ldd	r19, Y+2	; 0x02
    3d74:	a9 01       	movw	r20, r18
    3d76:	48 1b       	sub	r20, r24
    3d78:	59 0b       	sbc	r21, r25
    3d7a:	ca 01       	movw	r24, r20
    3d7c:	9a 83       	std	Y+2, r25	; 0x02
    3d7e:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    3d80:	89 81       	ldd	r24, Y+1	; 0x01
    3d82:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3d84:	0f 90       	pop	r0
    3d86:	0f 90       	pop	r0
    3d88:	0f 90       	pop	r0
    3d8a:	0f 90       	pop	r0
    3d8c:	df 91       	pop	r29
    3d8e:	cf 91       	pop	r28
    3d90:	08 95       	ret

00003d92 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
    3d92:	0f 93       	push	r16
    3d94:	cf 93       	push	r28
    3d96:	df 93       	push	r29
    3d98:	cd b7       	in	r28, 0x3d	; 61
    3d9a:	de b7       	in	r29, 0x3e	; 62
    3d9c:	29 97       	sbiw	r28, 0x09	; 9
    3d9e:	0f b6       	in	r0, 0x3f	; 63
    3da0:	f8 94       	cli
    3da2:	de bf       	out	0x3e, r29	; 62
    3da4:	0f be       	out	0x3f, r0	; 63
    3da6:	cd bf       	out	0x3d, r28	; 61
    3da8:	9a 83       	std	Y+2, r25	; 0x02
    3daa:	89 83       	std	Y+1, r24	; 0x01
    3dac:	7c 83       	std	Y+4, r23	; 0x04
    3dae:	6b 83       	std	Y+3, r22	; 0x03
    3db0:	5e 83       	std	Y+6, r21	; 0x06
    3db2:	4d 83       	std	Y+5, r20	; 0x05
    3db4:	38 87       	std	Y+8, r19	; 0x08
    3db6:	2f 83       	std	Y+7, r18	; 0x07
    3db8:	09 87       	std	Y+9, r16	; 0x09
            const BaseType_t xWriteValue = 0x55;
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dbe:	4f e0       	ldi	r20, 0x0F	; 15
    3dc0:	50 e0       	ldi	r21, 0x00	; 0
    3dc2:	60 e0       	ldi	r22, 0x00	; 0
    3dc4:	70 e0       	ldi	r23, 0x00	; 0
    3dc6:	0e 94 1f 37 	call	0x6e3e	; 0x6e3e <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
    3dca:	89 81       	ldd	r24, Y+1	; 0x01
    3dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dce:	2b 81       	ldd	r18, Y+3	; 0x03
    3dd0:	3c 81       	ldd	r19, Y+4	; 0x04
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	35 87       	std	Z+13, r19	; 0x0d
    3dd6:	24 87       	std	Z+12, r18	; 0x0c
    pxStreamBuffer->xLength = xBufferSizeBytes;
    3dd8:	89 81       	ldd	r24, Y+1	; 0x01
    3dda:	9a 81       	ldd	r25, Y+2	; 0x02
    3ddc:	2d 81       	ldd	r18, Y+5	; 0x05
    3dde:	3e 81       	ldd	r19, Y+6	; 0x06
    3de0:	fc 01       	movw	r30, r24
    3de2:	35 83       	std	Z+5, r19	; 0x05
    3de4:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    3de6:	89 81       	ldd	r24, Y+1	; 0x01
    3de8:	9a 81       	ldd	r25, Y+2	; 0x02
    3dea:	2f 81       	ldd	r18, Y+7	; 0x07
    3dec:	38 85       	ldd	r19, Y+8	; 0x08
    3dee:	fc 01       	movw	r30, r24
    3df0:	37 83       	std	Z+7, r19	; 0x07
    3df2:	26 83       	std	Z+6, r18	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
    3df6:	9a 81       	ldd	r25, Y+2	; 0x02
    3df8:	29 85       	ldd	r18, Y+9	; 0x09
    3dfa:	fc 01       	movw	r30, r24
    3dfc:	26 87       	std	Z+14, r18	; 0x0e
}
    3dfe:	00 00       	nop
    3e00:	29 96       	adiw	r28, 0x09	; 9
    3e02:	0f b6       	in	r0, 0x3f	; 63
    3e04:	f8 94       	cli
    3e06:	de bf       	out	0x3e, r29	; 62
    3e08:	0f be       	out	0x3f, r0	; 63
    3e0a:	cd bf       	out	0x3d, r28	; 61
    3e0c:	df 91       	pop	r29
    3e0e:	cf 91       	pop	r28
    3e10:	0f 91       	pop	r16
    3e12:	08 95       	ret

00003e14 <xTaskCreate>:
    3e14:	8f 92       	push	r8
    3e16:	9f 92       	push	r9
    3e18:	af 92       	push	r10
    3e1a:	bf 92       	push	r11
    3e1c:	cf 92       	push	r12
    3e1e:	df 92       	push	r13
    3e20:	ef 92       	push	r14
    3e22:	ff 92       	push	r15
    3e24:	0f 93       	push	r16
    3e26:	1f 93       	push	r17
    3e28:	cf 93       	push	r28
    3e2a:	df 93       	push	r29
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
    3e30:	60 97       	sbiw	r28, 0x10	; 16
    3e32:	0f b6       	in	r0, 0x3f	; 63
    3e34:	f8 94       	cli
    3e36:	de bf       	out	0x3e, r29	; 62
    3e38:	0f be       	out	0x3f, r0	; 63
    3e3a:	cd bf       	out	0x3d, r28	; 61
    3e3c:	9f 83       	std	Y+7, r25	; 0x07
    3e3e:	8e 83       	std	Y+6, r24	; 0x06
    3e40:	79 87       	std	Y+9, r23	; 0x09
    3e42:	68 87       	std	Y+8, r22	; 0x08
    3e44:	5b 87       	std	Y+11, r21	; 0x0b
    3e46:	4a 87       	std	Y+10, r20	; 0x0a
    3e48:	3d 87       	std	Y+13, r19	; 0x0d
    3e4a:	2c 87       	std	Y+12, r18	; 0x0c
    3e4c:	0e 87       	std	Y+14, r16	; 0x0e
    3e4e:	f8 8a       	std	Y+16, r15	; 0x10
    3e50:	ef 86       	std	Y+15, r14	; 0x0f
    3e52:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e54:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e56:	0e 94 33 13 	call	0x2666	; 0x2666 <pvPortMalloc>
    3e5a:	9d 83       	std	Y+5, r25	; 0x05
    3e5c:	8c 83       	std	Y+4, r24	; 0x04
    3e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3e60:	9d 81       	ldd	r25, Y+5	; 0x05
    3e62:	89 2b       	or	r24, r25
    3e64:	b9 f0       	breq	.+46     	; 0x3e94 <xTaskCreate+0x80>
    3e66:	86 e2       	ldi	r24, 0x26	; 38
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	0e 94 33 13 	call	0x2666	; 0x2666 <pvPortMalloc>
    3e6e:	9a 83       	std	Y+2, r25	; 0x02
    3e70:	89 83       	std	Y+1, r24	; 0x01
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
    3e74:	9a 81       	ldd	r25, Y+2	; 0x02
    3e76:	89 2b       	or	r24, r25
    3e78:	41 f0       	breq	.+16     	; 0x3e8a <xTaskCreate+0x76>
    3e7a:	89 81       	ldd	r24, Y+1	; 0x01
    3e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e7e:	2c 81       	ldd	r18, Y+4	; 0x04
    3e80:	3d 81       	ldd	r19, Y+5	; 0x05
    3e82:	fc 01       	movw	r30, r24
    3e84:	30 8f       	std	Z+24, r19	; 0x18
    3e86:	27 8b       	std	Z+23, r18	; 0x17
    3e88:	07 c0       	rjmp	.+14     	; 0x3e98 <xTaskCreate+0x84>
    3e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    3e8e:	0e 94 8c 13 	call	0x2718	; 0x2718 <vPortFree>
    3e92:	02 c0       	rjmp	.+4      	; 0x3e98 <xTaskCreate+0x84>
    3e94:	1a 82       	std	Y+2, r1	; 0x02
    3e96:	19 82       	std	Y+1, r1	; 0x01
    3e98:	89 81       	ldd	r24, Y+1	; 0x01
    3e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9c:	89 2b       	or	r24, r25
    3e9e:	f9 f0       	breq	.+62     	; 0x3ede <xTaskCreate+0xca>
    3ea0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ea2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ea4:	cc 01       	movw	r24, r24
    3ea6:	a0 e0       	ldi	r26, 0x00	; 0
    3ea8:	b0 e0       	ldi	r27, 0x00	; 0
    3eaa:	09 81       	ldd	r16, Y+1	; 0x01
    3eac:	1a 81       	ldd	r17, Y+2	; 0x02
    3eae:	4f 85       	ldd	r20, Y+15	; 0x0f
    3eb0:	58 89       	ldd	r21, Y+16	; 0x10
    3eb2:	2c 85       	ldd	r18, Y+12	; 0x0c
    3eb4:	3d 85       	ldd	r19, Y+13	; 0x0d
    3eb6:	68 85       	ldd	r22, Y+8	; 0x08
    3eb8:	79 85       	ldd	r23, Y+9	; 0x09
    3eba:	ee 81       	ldd	r30, Y+6	; 0x06
    3ebc:	ff 81       	ldd	r31, Y+7	; 0x07
    3ebe:	81 2c       	mov	r8, r1
    3ec0:	91 2c       	mov	r9, r1
    3ec2:	58 01       	movw	r10, r16
    3ec4:	6a 01       	movw	r12, r20
    3ec6:	ee 84       	ldd	r14, Y+14	; 0x0e
    3ec8:	89 01       	movw	r16, r18
    3eca:	9c 01       	movw	r18, r24
    3ecc:	ad 01       	movw	r20, r26
    3ece:	cf 01       	movw	r24, r30
    3ed0:	1c d0       	rcall	.+56     	; 0x3f0a <prvInitialiseNewTask>
    3ed2:	89 81       	ldd	r24, Y+1	; 0x01
    3ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed6:	ea d0       	rcall	.+468    	; 0x40ac <prvAddNewTaskToReadyList>
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	8b 83       	std	Y+3, r24	; 0x03
    3edc:	02 c0       	rjmp	.+4      	; 0x3ee2 <xTaskCreate+0xce>
    3ede:	8f ef       	ldi	r24, 0xFF	; 255
    3ee0:	8b 83       	std	Y+3, r24	; 0x03
    3ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee4:	60 96       	adiw	r28, 0x10	; 16
    3ee6:	0f b6       	in	r0, 0x3f	; 63
    3ee8:	f8 94       	cli
    3eea:	de bf       	out	0x3e, r29	; 62
    3eec:	0f be       	out	0x3f, r0	; 63
    3eee:	cd bf       	out	0x3d, r28	; 61
    3ef0:	df 91       	pop	r29
    3ef2:	cf 91       	pop	r28
    3ef4:	1f 91       	pop	r17
    3ef6:	0f 91       	pop	r16
    3ef8:	ff 90       	pop	r15
    3efa:	ef 90       	pop	r14
    3efc:	df 90       	pop	r13
    3efe:	cf 90       	pop	r12
    3f00:	bf 90       	pop	r11
    3f02:	af 90       	pop	r10
    3f04:	9f 90       	pop	r9
    3f06:	8f 90       	pop	r8
    3f08:	08 95       	ret

00003f0a <prvInitialiseNewTask>:
    3f0a:	8f 92       	push	r8
    3f0c:	9f 92       	push	r9
    3f0e:	af 92       	push	r10
    3f10:	bf 92       	push	r11
    3f12:	cf 92       	push	r12
    3f14:	df 92       	push	r13
    3f16:	ef 92       	push	r14
    3f18:	0f 93       	push	r16
    3f1a:	1f 93       	push	r17
    3f1c:	cf 93       	push	r28
    3f1e:	df 93       	push	r29
    3f20:	cd b7       	in	r28, 0x3d	; 61
    3f22:	de b7       	in	r29, 0x3e	; 62
    3f24:	64 97       	sbiw	r28, 0x14	; 20
    3f26:	0f b6       	in	r0, 0x3f	; 63
    3f28:	f8 94       	cli
    3f2a:	de bf       	out	0x3e, r29	; 62
    3f2c:	0f be       	out	0x3f, r0	; 63
    3f2e:	cd bf       	out	0x3d, r28	; 61
    3f30:	9d 83       	std	Y+5, r25	; 0x05
    3f32:	8c 83       	std	Y+4, r24	; 0x04
    3f34:	7f 83       	std	Y+7, r23	; 0x07
    3f36:	6e 83       	std	Y+6, r22	; 0x06
    3f38:	28 87       	std	Y+8, r18	; 0x08
    3f3a:	39 87       	std	Y+9, r19	; 0x09
    3f3c:	4a 87       	std	Y+10, r20	; 0x0a
    3f3e:	5b 87       	std	Y+11, r21	; 0x0b
    3f40:	1d 87       	std	Y+13, r17	; 0x0d
    3f42:	0c 87       	std	Y+12, r16	; 0x0c
    3f44:	ee 86       	std	Y+14, r14	; 0x0e
    3f46:	d8 8a       	std	Y+16, r13	; 0x10
    3f48:	cf 86       	std	Y+15, r12	; 0x0f
    3f4a:	ba 8a       	std	Y+18, r11	; 0x12
    3f4c:	a9 8a       	std	Y+17, r10	; 0x11
    3f4e:	9c 8a       	std	Y+20, r9	; 0x14
    3f50:	8b 8a       	std	Y+19, r8	; 0x13
    3f52:	89 89       	ldd	r24, Y+17	; 0x11
    3f54:	9a 89       	ldd	r25, Y+18	; 0x12
    3f56:	fc 01       	movw	r30, r24
    3f58:	27 89       	ldd	r18, Z+23	; 0x17
    3f5a:	30 8d       	ldd	r19, Z+24	; 0x18
    3f5c:	88 85       	ldd	r24, Y+8	; 0x08
    3f5e:	99 85       	ldd	r25, Y+9	; 0x09
    3f60:	01 97       	sbiw	r24, 0x01	; 1
    3f62:	82 0f       	add	r24, r18
    3f64:	93 1f       	adc	r25, r19
    3f66:	9b 83       	std	Y+3, r25	; 0x03
    3f68:	8a 83       	std	Y+2, r24	; 0x02
    3f6a:	8e 81       	ldd	r24, Y+6	; 0x06
    3f6c:	9f 81       	ldd	r25, Y+7	; 0x07
    3f6e:	89 2b       	or	r24, r25
    3f70:	69 f1       	breq	.+90     	; 0x3fcc <prvInitialiseNewTask+0xc2>
    3f72:	19 82       	std	Y+1, r1	; 0x01
    3f74:	21 c0       	rjmp	.+66     	; 0x3fb8 <prvInitialiseNewTask+0xae>
    3f76:	89 81       	ldd	r24, Y+1	; 0x01
    3f78:	88 2f       	mov	r24, r24
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	29 81       	ldd	r18, Y+1	; 0x01
    3f7e:	22 2f       	mov	r18, r18
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	4e 81       	ldd	r20, Y+6	; 0x06
    3f84:	5f 81       	ldd	r21, Y+7	; 0x07
    3f86:	24 0f       	add	r18, r20
    3f88:	35 1f       	adc	r19, r21
    3f8a:	f9 01       	movw	r30, r18
    3f8c:	40 81       	ld	r20, Z
    3f8e:	29 89       	ldd	r18, Y+17	; 0x11
    3f90:	3a 89       	ldd	r19, Y+18	; 0x12
    3f92:	82 0f       	add	r24, r18
    3f94:	93 1f       	adc	r25, r19
    3f96:	49 96       	adiw	r24, 0x19	; 25
    3f98:	fc 01       	movw	r30, r24
    3f9a:	40 83       	st	Z, r20
    3f9c:	89 81       	ldd	r24, Y+1	; 0x01
    3f9e:	88 2f       	mov	r24, r24
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	2e 81       	ldd	r18, Y+6	; 0x06
    3fa4:	3f 81       	ldd	r19, Y+7	; 0x07
    3fa6:	82 0f       	add	r24, r18
    3fa8:	93 1f       	adc	r25, r19
    3faa:	fc 01       	movw	r30, r24
    3fac:	80 81       	ld	r24, Z
    3fae:	88 23       	and	r24, r24
    3fb0:	39 f0       	breq	.+14     	; 0x3fc0 <prvInitialiseNewTask+0xb6>
    3fb2:	89 81       	ldd	r24, Y+1	; 0x01
    3fb4:	8f 5f       	subi	r24, 0xFF	; 255
    3fb6:	89 83       	std	Y+1, r24	; 0x01
    3fb8:	89 81       	ldd	r24, Y+1	; 0x01
    3fba:	88 30       	cpi	r24, 0x08	; 8
    3fbc:	e0 f2       	brcs	.-72     	; 0x3f76 <prvInitialiseNewTask+0x6c>
    3fbe:	01 c0       	rjmp	.+2      	; 0x3fc2 <prvInitialiseNewTask+0xb8>
    3fc0:	00 00       	nop
    3fc2:	89 89       	ldd	r24, Y+17	; 0x11
    3fc4:	9a 89       	ldd	r25, Y+18	; 0x12
    3fc6:	fc 01       	movw	r30, r24
    3fc8:	10 a2       	std	Z+32, r1	; 0x20
    3fca:	04 c0       	rjmp	.+8      	; 0x3fd4 <prvInitialiseNewTask+0xca>
    3fcc:	89 89       	ldd	r24, Y+17	; 0x11
    3fce:	9a 89       	ldd	r25, Y+18	; 0x12
    3fd0:	fc 01       	movw	r30, r24
    3fd2:	11 8e       	std	Z+25, r1	; 0x19
    3fd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fd6:	88 23       	and	r24, r24
    3fd8:	09 f0       	breq	.+2      	; 0x3fdc <prvInitialiseNewTask+0xd2>
    3fda:	1e 86       	std	Y+14, r1	; 0x0e
    3fdc:	89 89       	ldd	r24, Y+17	; 0x11
    3fde:	9a 89       	ldd	r25, Y+18	; 0x12
    3fe0:	2e 85       	ldd	r18, Y+14	; 0x0e
    3fe2:	fc 01       	movw	r30, r24
    3fe4:	26 8b       	std	Z+22, r18	; 0x16
    3fe6:	89 89       	ldd	r24, Y+17	; 0x11
    3fe8:	9a 89       	ldd	r25, Y+18	; 0x12
    3fea:	02 96       	adiw	r24, 0x02	; 2
    3fec:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <vListInitialiseItem>
    3ff0:	89 89       	ldd	r24, Y+17	; 0x11
    3ff2:	9a 89       	ldd	r25, Y+18	; 0x12
    3ff4:	0c 96       	adiw	r24, 0x0c	; 12
    3ff6:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <vListInitialiseItem>
    3ffa:	89 89       	ldd	r24, Y+17	; 0x11
    3ffc:	9a 89       	ldd	r25, Y+18	; 0x12
    3ffe:	29 89       	ldd	r18, Y+17	; 0x11
    4000:	3a 89       	ldd	r19, Y+18	; 0x12
    4002:	fc 01       	movw	r30, r24
    4004:	31 87       	std	Z+9, r19	; 0x09
    4006:	20 87       	std	Z+8, r18	; 0x08
    4008:	8e 85       	ldd	r24, Y+14	; 0x0e
    400a:	88 2f       	mov	r24, r24
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	21 e0       	ldi	r18, 0x01	; 1
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	28 1b       	sub	r18, r24
    4014:	39 0b       	sbc	r19, r25
    4016:	89 89       	ldd	r24, Y+17	; 0x11
    4018:	9a 89       	ldd	r25, Y+18	; 0x12
    401a:	fc 01       	movw	r30, r24
    401c:	35 87       	std	Z+13, r19	; 0x0d
    401e:	24 87       	std	Z+12, r18	; 0x0c
    4020:	89 89       	ldd	r24, Y+17	; 0x11
    4022:	9a 89       	ldd	r25, Y+18	; 0x12
    4024:	29 89       	ldd	r18, Y+17	; 0x11
    4026:	3a 89       	ldd	r19, Y+18	; 0x12
    4028:	fc 01       	movw	r30, r24
    402a:	33 8b       	std	Z+19, r19	; 0x13
    402c:	22 8b       	std	Z+18, r18	; 0x12
    402e:	89 89       	ldd	r24, Y+17	; 0x11
    4030:	9a 89       	ldd	r25, Y+18	; 0x12
    4032:	81 96       	adiw	r24, 0x21	; 33
    4034:	44 e0       	ldi	r20, 0x04	; 4
    4036:	50 e0       	ldi	r21, 0x00	; 0
    4038:	60 e0       	ldi	r22, 0x00	; 0
    403a:	70 e0       	ldi	r23, 0x00	; 0
    403c:	0e 94 1f 37 	call	0x6e3e	; 0x6e3e <memset>
    4040:	89 89       	ldd	r24, Y+17	; 0x11
    4042:	9a 89       	ldd	r25, Y+18	; 0x12
    4044:	85 96       	adiw	r24, 0x25	; 37
    4046:	41 e0       	ldi	r20, 0x01	; 1
    4048:	50 e0       	ldi	r21, 0x00	; 0
    404a:	60 e0       	ldi	r22, 0x00	; 0
    404c:	70 e0       	ldi	r23, 0x00	; 0
    404e:	0e 94 1f 37 	call	0x6e3e	; 0x6e3e <memset>
    4052:	4c 85       	ldd	r20, Y+12	; 0x0c
    4054:	5d 85       	ldd	r21, Y+13	; 0x0d
    4056:	2c 81       	ldd	r18, Y+4	; 0x04
    4058:	3d 81       	ldd	r19, Y+5	; 0x05
    405a:	8a 81       	ldd	r24, Y+2	; 0x02
    405c:	9b 81       	ldd	r25, Y+3	; 0x03
    405e:	b9 01       	movw	r22, r18
    4060:	0e 94 01 15 	call	0x2a02	; 0x2a02 <pxPortInitialiseStack>
    4064:	9c 01       	movw	r18, r24
    4066:	89 89       	ldd	r24, Y+17	; 0x11
    4068:	9a 89       	ldd	r25, Y+18	; 0x12
    406a:	fc 01       	movw	r30, r24
    406c:	31 83       	std	Z+1, r19	; 0x01
    406e:	20 83       	st	Z, r18
    4070:	8f 85       	ldd	r24, Y+15	; 0x0f
    4072:	98 89       	ldd	r25, Y+16	; 0x10
    4074:	89 2b       	or	r24, r25
    4076:	39 f0       	breq	.+14     	; 0x4086 <prvInitialiseNewTask+0x17c>
    4078:	8f 85       	ldd	r24, Y+15	; 0x0f
    407a:	98 89       	ldd	r25, Y+16	; 0x10
    407c:	29 89       	ldd	r18, Y+17	; 0x11
    407e:	3a 89       	ldd	r19, Y+18	; 0x12
    4080:	fc 01       	movw	r30, r24
    4082:	31 83       	std	Z+1, r19	; 0x01
    4084:	20 83       	st	Z, r18
    4086:	00 00       	nop
    4088:	64 96       	adiw	r28, 0x14	; 20
    408a:	0f b6       	in	r0, 0x3f	; 63
    408c:	f8 94       	cli
    408e:	de bf       	out	0x3e, r29	; 62
    4090:	0f be       	out	0x3f, r0	; 63
    4092:	cd bf       	out	0x3d, r28	; 61
    4094:	df 91       	pop	r29
    4096:	cf 91       	pop	r28
    4098:	1f 91       	pop	r17
    409a:	0f 91       	pop	r16
    409c:	ef 90       	pop	r14
    409e:	df 90       	pop	r13
    40a0:	cf 90       	pop	r12
    40a2:	bf 90       	pop	r11
    40a4:	af 90       	pop	r10
    40a6:	9f 90       	pop	r9
    40a8:	8f 90       	pop	r8
    40aa:	08 95       	ret

000040ac <prvAddNewTaskToReadyList>:
    40ac:	cf 93       	push	r28
    40ae:	df 93       	push	r29
    40b0:	1f 92       	push	r1
    40b2:	1f 92       	push	r1
    40b4:	cd b7       	in	r28, 0x3d	; 61
    40b6:	de b7       	in	r29, 0x3e	; 62
    40b8:	9a 83       	std	Y+2, r25	; 0x02
    40ba:	89 83       	std	Y+1, r24	; 0x01
    40bc:	0f b6       	in	r0, 0x3f	; 63
    40be:	f8 94       	cli
    40c0:	0f 92       	push	r0
    40c2:	80 91 b2 13 	lds	r24, 0x13B2	; 0x8013b2 <uxCurrentNumberOfTasks>
    40c6:	8f 5f       	subi	r24, 0xFF	; 255
    40c8:	80 93 b2 13 	sts	0x13B2, r24	; 0x8013b2 <uxCurrentNumberOfTasks>
    40cc:	80 91 88 13 	lds	r24, 0x1388	; 0x801388 <pxCurrentTCB>
    40d0:	90 91 89 13 	lds	r25, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    40d4:	89 2b       	or	r24, r25
    40d6:	61 f4       	brne	.+24     	; 0x40f0 <prvAddNewTaskToReadyList+0x44>
    40d8:	89 81       	ldd	r24, Y+1	; 0x01
    40da:	9a 81       	ldd	r25, Y+2	; 0x02
    40dc:	90 93 89 13 	sts	0x1389, r25	; 0x801389 <pxCurrentTCB+0x1>
    40e0:	80 93 88 13 	sts	0x1388, r24	; 0x801388 <pxCurrentTCB>
    40e4:	80 91 b2 13 	lds	r24, 0x13B2	; 0x8013b2 <uxCurrentNumberOfTasks>
    40e8:	81 30       	cpi	r24, 0x01	; 1
    40ea:	c1 f4       	brne	.+48     	; 0x411c <prvAddNewTaskToReadyList+0x70>
    40ec:	76 d4       	rcall	.+2284   	; 0x49da <prvInitialiseTaskLists>
    40ee:	16 c0       	rjmp	.+44     	; 0x411c <prvAddNewTaskToReadyList+0x70>
    40f0:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <xSchedulerRunning>
    40f4:	88 23       	and	r24, r24
    40f6:	91 f4       	brne	.+36     	; 0x411c <prvAddNewTaskToReadyList+0x70>
    40f8:	80 91 88 13 	lds	r24, 0x1388	; 0x801388 <pxCurrentTCB>
    40fc:	90 91 89 13 	lds	r25, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    4100:	fc 01       	movw	r30, r24
    4102:	26 89       	ldd	r18, Z+22	; 0x16
    4104:	89 81       	ldd	r24, Y+1	; 0x01
    4106:	9a 81       	ldd	r25, Y+2	; 0x02
    4108:	fc 01       	movw	r30, r24
    410a:	86 89       	ldd	r24, Z+22	; 0x16
    410c:	82 17       	cp	r24, r18
    410e:	30 f0       	brcs	.+12     	; 0x411c <prvAddNewTaskToReadyList+0x70>
    4110:	89 81       	ldd	r24, Y+1	; 0x01
    4112:	9a 81       	ldd	r25, Y+2	; 0x02
    4114:	90 93 89 13 	sts	0x1389, r25	; 0x801389 <pxCurrentTCB+0x1>
    4118:	80 93 88 13 	sts	0x1388, r24	; 0x801388 <pxCurrentTCB>
    411c:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <uxTaskNumber>
    4120:	8f 5f       	subi	r24, 0xFF	; 255
    4122:	80 93 bb 13 	sts	0x13BB, r24	; 0x8013bb <uxTaskNumber>
    4126:	89 81       	ldd	r24, Y+1	; 0x01
    4128:	9a 81       	ldd	r25, Y+2	; 0x02
    412a:	fc 01       	movw	r30, r24
    412c:	96 89       	ldd	r25, Z+22	; 0x16
    412e:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    4132:	89 17       	cp	r24, r25
    4134:	30 f4       	brcc	.+12     	; 0x4142 <prvAddNewTaskToReadyList+0x96>
    4136:	89 81       	ldd	r24, Y+1	; 0x01
    4138:	9a 81       	ldd	r25, Y+2	; 0x02
    413a:	fc 01       	movw	r30, r24
    413c:	86 89       	ldd	r24, Z+22	; 0x16
    413e:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <uxTopReadyPriority>
    4142:	89 81       	ldd	r24, Y+1	; 0x01
    4144:	9a 81       	ldd	r25, Y+2	; 0x02
    4146:	ac 01       	movw	r20, r24
    4148:	4e 5f       	subi	r20, 0xFE	; 254
    414a:	5f 4f       	sbci	r21, 0xFF	; 255
    414c:	89 81       	ldd	r24, Y+1	; 0x01
    414e:	9a 81       	ldd	r25, Y+2	; 0x02
    4150:	fc 01       	movw	r30, r24
    4152:	86 89       	ldd	r24, Z+22	; 0x16
    4154:	28 2f       	mov	r18, r24
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	c9 01       	movw	r24, r18
    415a:	88 0f       	add	r24, r24
    415c:	99 1f       	adc	r25, r25
    415e:	88 0f       	add	r24, r24
    4160:	99 1f       	adc	r25, r25
    4162:	88 0f       	add	r24, r24
    4164:	99 1f       	adc	r25, r25
    4166:	82 0f       	add	r24, r18
    4168:	93 1f       	adc	r25, r19
    416a:	86 57       	subi	r24, 0x76	; 118
    416c:	9c 4e       	sbci	r25, 0xEC	; 236
    416e:	ba 01       	movw	r22, r20
    4170:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <vListInsertEnd>
    4174:	0f 90       	pop	r0
    4176:	0f be       	out	0x3f, r0	; 63
    4178:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <xSchedulerRunning>
    417c:	88 23       	and	r24, r24
    417e:	71 f0       	breq	.+28     	; 0x419c <prvAddNewTaskToReadyList+0xf0>
    4180:	80 91 88 13 	lds	r24, 0x1388	; 0x801388 <pxCurrentTCB>
    4184:	90 91 89 13 	lds	r25, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    4188:	fc 01       	movw	r30, r24
    418a:	26 89       	ldd	r18, Z+22	; 0x16
    418c:	89 81       	ldd	r24, Y+1	; 0x01
    418e:	9a 81       	ldd	r25, Y+2	; 0x02
    4190:	fc 01       	movw	r30, r24
    4192:	86 89       	ldd	r24, Z+22	; 0x16
    4194:	28 17       	cp	r18, r24
    4196:	10 f4       	brcc	.+4      	; 0x419c <prvAddNewTaskToReadyList+0xf0>
    4198:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <vPortYield>
    419c:	00 00       	nop
    419e:	0f 90       	pop	r0
    41a0:	0f 90       	pop	r0
    41a2:	df 91       	pop	r29
    41a4:	cf 91       	pop	r28
    41a6:	08 95       	ret

000041a8 <xTaskDelayUntil>:
    41a8:	cf 93       	push	r28
    41aa:	df 93       	push	r29
    41ac:	cd b7       	in	r28, 0x3d	; 61
    41ae:	de b7       	in	r29, 0x3e	; 62
    41b0:	2a 97       	sbiw	r28, 0x0a	; 10
    41b2:	0f b6       	in	r0, 0x3f	; 63
    41b4:	f8 94       	cli
    41b6:	de bf       	out	0x3e, r29	; 62
    41b8:	0f be       	out	0x3f, r0	; 63
    41ba:	cd bf       	out	0x3d, r28	; 61
    41bc:	98 87       	std	Y+8, r25	; 0x08
    41be:	8f 83       	std	Y+7, r24	; 0x07
    41c0:	7a 87       	std	Y+10, r23	; 0x0a
    41c2:	69 87       	std	Y+9, r22	; 0x09
    41c4:	19 82       	std	Y+1, r1	; 0x01
    41c6:	bc d0       	rcall	.+376    	; 0x4340 <vTaskSuspendAll>
    41c8:	80 91 b3 13 	lds	r24, 0x13B3	; 0x8013b3 <xTickCount>
    41cc:	90 91 b4 13 	lds	r25, 0x13B4	; 0x8013b4 <xTickCount+0x1>
    41d0:	9b 83       	std	Y+3, r25	; 0x03
    41d2:	8a 83       	std	Y+2, r24	; 0x02
    41d4:	8f 81       	ldd	r24, Y+7	; 0x07
    41d6:	98 85       	ldd	r25, Y+8	; 0x08
    41d8:	fc 01       	movw	r30, r24
    41da:	20 81       	ld	r18, Z
    41dc:	31 81       	ldd	r19, Z+1	; 0x01
    41de:	89 85       	ldd	r24, Y+9	; 0x09
    41e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41e2:	82 0f       	add	r24, r18
    41e4:	93 1f       	adc	r25, r19
    41e6:	9d 83       	std	Y+5, r25	; 0x05
    41e8:	8c 83       	std	Y+4, r24	; 0x04
    41ea:	8f 81       	ldd	r24, Y+7	; 0x07
    41ec:	98 85       	ldd	r25, Y+8	; 0x08
    41ee:	fc 01       	movw	r30, r24
    41f0:	20 81       	ld	r18, Z
    41f2:	31 81       	ldd	r19, Z+1	; 0x01
    41f4:	8a 81       	ldd	r24, Y+2	; 0x02
    41f6:	9b 81       	ldd	r25, Y+3	; 0x03
    41f8:	82 17       	cp	r24, r18
    41fa:	93 07       	cpc	r25, r19
    41fc:	a0 f4       	brcc	.+40     	; 0x4226 <xTaskDelayUntil+0x7e>
    41fe:	8f 81       	ldd	r24, Y+7	; 0x07
    4200:	98 85       	ldd	r25, Y+8	; 0x08
    4202:	fc 01       	movw	r30, r24
    4204:	20 81       	ld	r18, Z
    4206:	31 81       	ldd	r19, Z+1	; 0x01
    4208:	8c 81       	ldd	r24, Y+4	; 0x04
    420a:	9d 81       	ldd	r25, Y+5	; 0x05
    420c:	82 17       	cp	r24, r18
    420e:	93 07       	cpc	r25, r19
    4210:	e8 f4       	brcc	.+58     	; 0x424c <xTaskDelayUntil+0xa4>
    4212:	2c 81       	ldd	r18, Y+4	; 0x04
    4214:	3d 81       	ldd	r19, Y+5	; 0x05
    4216:	8a 81       	ldd	r24, Y+2	; 0x02
    4218:	9b 81       	ldd	r25, Y+3	; 0x03
    421a:	82 17       	cp	r24, r18
    421c:	93 07       	cpc	r25, r19
    421e:	b0 f4       	brcc	.+44     	; 0x424c <xTaskDelayUntil+0xa4>
    4220:	81 e0       	ldi	r24, 0x01	; 1
    4222:	89 83       	std	Y+1, r24	; 0x01
    4224:	13 c0       	rjmp	.+38     	; 0x424c <xTaskDelayUntil+0xa4>
    4226:	8f 81       	ldd	r24, Y+7	; 0x07
    4228:	98 85       	ldd	r25, Y+8	; 0x08
    422a:	fc 01       	movw	r30, r24
    422c:	20 81       	ld	r18, Z
    422e:	31 81       	ldd	r19, Z+1	; 0x01
    4230:	8c 81       	ldd	r24, Y+4	; 0x04
    4232:	9d 81       	ldd	r25, Y+5	; 0x05
    4234:	82 17       	cp	r24, r18
    4236:	93 07       	cpc	r25, r19
    4238:	38 f0       	brcs	.+14     	; 0x4248 <xTaskDelayUntil+0xa0>
    423a:	2c 81       	ldd	r18, Y+4	; 0x04
    423c:	3d 81       	ldd	r19, Y+5	; 0x05
    423e:	8a 81       	ldd	r24, Y+2	; 0x02
    4240:	9b 81       	ldd	r25, Y+3	; 0x03
    4242:	82 17       	cp	r24, r18
    4244:	93 07       	cpc	r25, r19
    4246:	10 f4       	brcc	.+4      	; 0x424c <xTaskDelayUntil+0xa4>
    4248:	81 e0       	ldi	r24, 0x01	; 1
    424a:	89 83       	std	Y+1, r24	; 0x01
    424c:	8f 81       	ldd	r24, Y+7	; 0x07
    424e:	98 85       	ldd	r25, Y+8	; 0x08
    4250:	2c 81       	ldd	r18, Y+4	; 0x04
    4252:	3d 81       	ldd	r19, Y+5	; 0x05
    4254:	fc 01       	movw	r30, r24
    4256:	31 83       	std	Z+1, r19	; 0x01
    4258:	20 83       	st	Z, r18
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	88 23       	and	r24, r24
    425e:	51 f0       	breq	.+20     	; 0x4274 <xTaskDelayUntil+0xcc>
    4260:	2c 81       	ldd	r18, Y+4	; 0x04
    4262:	3d 81       	ldd	r19, Y+5	; 0x05
    4264:	8a 81       	ldd	r24, Y+2	; 0x02
    4266:	9b 81       	ldd	r25, Y+3	; 0x03
    4268:	a9 01       	movw	r20, r18
    426a:	48 1b       	sub	r20, r24
    426c:	59 0b       	sbc	r21, r25
    426e:	ca 01       	movw	r24, r20
    4270:	60 e0       	ldi	r22, 0x00	; 0
    4272:	fb d7       	rcall	.+4086   	; 0x526a <prvAddCurrentTaskToDelayedList>
    4274:	72 d0       	rcall	.+228    	; 0x435a <xTaskResumeAll>
    4276:	8e 83       	std	Y+6, r24	; 0x06
    4278:	8e 81       	ldd	r24, Y+6	; 0x06
    427a:	88 23       	and	r24, r24
    427c:	11 f4       	brne	.+4      	; 0x4282 <xTaskDelayUntil+0xda>
    427e:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <vPortYield>
    4282:	89 81       	ldd	r24, Y+1	; 0x01
    4284:	2a 96       	adiw	r28, 0x0a	; 10
    4286:	0f b6       	in	r0, 0x3f	; 63
    4288:	f8 94       	cli
    428a:	de bf       	out	0x3e, r29	; 62
    428c:	0f be       	out	0x3f, r0	; 63
    428e:	cd bf       	out	0x3d, r28	; 61
    4290:	df 91       	pop	r29
    4292:	cf 91       	pop	r28
    4294:	08 95       	ret

00004296 <vTaskDelay>:
    4296:	cf 93       	push	r28
    4298:	df 93       	push	r29
    429a:	00 d0       	rcall	.+0      	; 0x429c <vTaskDelay+0x6>
    429c:	cd b7       	in	r28, 0x3d	; 61
    429e:	de b7       	in	r29, 0x3e	; 62
    42a0:	9b 83       	std	Y+3, r25	; 0x03
    42a2:	8a 83       	std	Y+2, r24	; 0x02
    42a4:	19 82       	std	Y+1, r1	; 0x01
    42a6:	8a 81       	ldd	r24, Y+2	; 0x02
    42a8:	9b 81       	ldd	r25, Y+3	; 0x03
    42aa:	89 2b       	or	r24, r25
    42ac:	39 f0       	breq	.+14     	; 0x42bc <vTaskDelay+0x26>
    42ae:	48 d0       	rcall	.+144    	; 0x4340 <vTaskSuspendAll>
    42b0:	8a 81       	ldd	r24, Y+2	; 0x02
    42b2:	9b 81       	ldd	r25, Y+3	; 0x03
    42b4:	60 e0       	ldi	r22, 0x00	; 0
    42b6:	d9 d7       	rcall	.+4018   	; 0x526a <prvAddCurrentTaskToDelayedList>
    42b8:	50 d0       	rcall	.+160    	; 0x435a <xTaskResumeAll>
    42ba:	89 83       	std	Y+1, r24	; 0x01
    42bc:	89 81       	ldd	r24, Y+1	; 0x01
    42be:	88 23       	and	r24, r24
    42c0:	11 f4       	brne	.+4      	; 0x42c6 <vTaskDelay+0x30>
    42c2:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <vPortYield>
    42c6:	00 00       	nop
    42c8:	0f 90       	pop	r0
    42ca:	0f 90       	pop	r0
    42cc:	0f 90       	pop	r0
    42ce:	df 91       	pop	r29
    42d0:	cf 91       	pop	r28
    42d2:	08 95       	ret

000042d4 <vTaskStartScheduler>:
    42d4:	ef 92       	push	r14
    42d6:	ff 92       	push	r15
    42d8:	0f 93       	push	r16
    42da:	cf 93       	push	r28
    42dc:	df 93       	push	r29
    42de:	1f 92       	push	r1
    42e0:	cd b7       	in	r28, 0x3d	; 61
    42e2:	de b7       	in	r29, 0x3e	; 62
    42e4:	0f 2e       	mov	r0, r31
    42e6:	fe eb       	ldi	r31, 0xBE	; 190
    42e8:	ef 2e       	mov	r14, r31
    42ea:	f3 e1       	ldi	r31, 0x13	; 19
    42ec:	ff 2e       	mov	r15, r31
    42ee:	f0 2d       	mov	r31, r0
    42f0:	00 e0       	ldi	r16, 0x00	; 0
    42f2:	20 e0       	ldi	r18, 0x00	; 0
    42f4:	30 e0       	ldi	r19, 0x00	; 0
    42f6:	4c e2       	ldi	r20, 0x2C	; 44
    42f8:	51 e0       	ldi	r21, 0x01	; 1
    42fa:	6e e9       	ldi	r22, 0x9E	; 158
    42fc:	78 e0       	ldi	r23, 0x08	; 8
    42fe:	82 e7       	ldi	r24, 0x72	; 114
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	88 dd       	rcall	.-1264   	; 0x3e14 <xTaskCreate>
    4304:	89 83       	std	Y+1, r24	; 0x01
    4306:	89 81       	ldd	r24, Y+1	; 0x01
    4308:	81 30       	cpi	r24, 0x01	; 1
    430a:	81 f4       	brne	.+32     	; 0x432c <vTaskStartScheduler+0x58>
    430c:	f8 94       	cli
    430e:	8f ef       	ldi	r24, 0xFF	; 255
    4310:	9f ef       	ldi	r25, 0xFF	; 255
    4312:	90 93 bd 13 	sts	0x13BD, r25	; 0x8013bd <xNextTaskUnblockTime+0x1>
    4316:	80 93 bc 13 	sts	0x13BC, r24	; 0x8013bc <xNextTaskUnblockTime>
    431a:	81 e0       	ldi	r24, 0x01	; 1
    431c:	80 93 b6 13 	sts	0x13B6, r24	; 0x8013b6 <xSchedulerRunning>
    4320:	10 92 b4 13 	sts	0x13B4, r1	; 0x8013b4 <xTickCount+0x1>
    4324:	10 92 b3 13 	sts	0x13B3, r1	; 0x8013b3 <xTickCount>
    4328:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <xPortStartScheduler>
    432c:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <uxTopUsedPriority>
    4330:	00 00       	nop
    4332:	0f 90       	pop	r0
    4334:	df 91       	pop	r29
    4336:	cf 91       	pop	r28
    4338:	0f 91       	pop	r16
    433a:	ff 90       	pop	r15
    433c:	ef 90       	pop	r14
    433e:	08 95       	ret

00004340 <vTaskSuspendAll>:
    4340:	cf 93       	push	r28
    4342:	df 93       	push	r29
    4344:	cd b7       	in	r28, 0x3d	; 61
    4346:	de b7       	in	r29, 0x3e	; 62
    4348:	80 91 c0 13 	lds	r24, 0x13C0	; 0x8013c0 <uxSchedulerSuspended>
    434c:	8f 5f       	subi	r24, 0xFF	; 255
    434e:	80 93 c0 13 	sts	0x13C0, r24	; 0x8013c0 <uxSchedulerSuspended>
    4352:	00 00       	nop
    4354:	df 91       	pop	r29
    4356:	cf 91       	pop	r28
    4358:	08 95       	ret

0000435a <xTaskResumeAll>:
    435a:	cf 93       	push	r28
    435c:	df 93       	push	r29
    435e:	00 d0       	rcall	.+0      	; 0x4360 <xTaskResumeAll+0x6>
    4360:	1f 92       	push	r1
    4362:	1f 92       	push	r1
    4364:	cd b7       	in	r28, 0x3d	; 61
    4366:	de b7       	in	r29, 0x3e	; 62
    4368:	1a 82       	std	Y+2, r1	; 0x02
    436a:	19 82       	std	Y+1, r1	; 0x01
    436c:	1b 82       	std	Y+3, r1	; 0x03
    436e:	0f b6       	in	r0, 0x3f	; 63
    4370:	f8 94       	cli
    4372:	0f 92       	push	r0
    4374:	80 91 c0 13 	lds	r24, 0x13C0	; 0x8013c0 <uxSchedulerSuspended>
    4378:	81 50       	subi	r24, 0x01	; 1
    437a:	80 93 c0 13 	sts	0x13C0, r24	; 0x8013c0 <uxSchedulerSuspended>
    437e:	80 91 c0 13 	lds	r24, 0x13C0	; 0x8013c0 <uxSchedulerSuspended>
    4382:	88 23       	and	r24, r24
    4384:	09 f0       	breq	.+2      	; 0x4388 <xTaskResumeAll+0x2e>
    4386:	7e c0       	rjmp	.+252    	; 0x4484 <xTaskResumeAll+0x12a>
    4388:	80 91 b2 13 	lds	r24, 0x13B2	; 0x8013b2 <uxCurrentNumberOfTasks>
    438c:	88 23       	and	r24, r24
    438e:	09 f4       	brne	.+2      	; 0x4392 <xTaskResumeAll+0x38>
    4390:	79 c0       	rjmp	.+242    	; 0x4484 <xTaskResumeAll+0x12a>
    4392:	49 c0       	rjmp	.+146    	; 0x4426 <xTaskResumeAll+0xcc>
    4394:	80 91 ae 13 	lds	r24, 0x13AE	; 0x8013ae <xPendingReadyList+0x5>
    4398:	90 91 af 13 	lds	r25, 0x13AF	; 0x8013af <xPendingReadyList+0x6>
    439c:	fc 01       	movw	r30, r24
    439e:	86 81       	ldd	r24, Z+6	; 0x06
    43a0:	97 81       	ldd	r25, Z+7	; 0x07
    43a2:	9a 83       	std	Y+2, r25	; 0x02
    43a4:	89 83       	std	Y+1, r24	; 0x01
    43a6:	89 81       	ldd	r24, Y+1	; 0x01
    43a8:	9a 81       	ldd	r25, Y+2	; 0x02
    43aa:	0c 96       	adiw	r24, 0x0c	; 12
    43ac:	0e 94 aa 14 	call	0x2954	; 0x2954 <uxListRemove>
    43b0:	89 81       	ldd	r24, Y+1	; 0x01
    43b2:	9a 81       	ldd	r25, Y+2	; 0x02
    43b4:	02 96       	adiw	r24, 0x02	; 2
    43b6:	0e 94 aa 14 	call	0x2954	; 0x2954 <uxListRemove>
    43ba:	89 81       	ldd	r24, Y+1	; 0x01
    43bc:	9a 81       	ldd	r25, Y+2	; 0x02
    43be:	fc 01       	movw	r30, r24
    43c0:	96 89       	ldd	r25, Z+22	; 0x16
    43c2:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    43c6:	89 17       	cp	r24, r25
    43c8:	30 f4       	brcc	.+12     	; 0x43d6 <xTaskResumeAll+0x7c>
    43ca:	89 81       	ldd	r24, Y+1	; 0x01
    43cc:	9a 81       	ldd	r25, Y+2	; 0x02
    43ce:	fc 01       	movw	r30, r24
    43d0:	86 89       	ldd	r24, Z+22	; 0x16
    43d2:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <uxTopReadyPriority>
    43d6:	89 81       	ldd	r24, Y+1	; 0x01
    43d8:	9a 81       	ldd	r25, Y+2	; 0x02
    43da:	ac 01       	movw	r20, r24
    43dc:	4e 5f       	subi	r20, 0xFE	; 254
    43de:	5f 4f       	sbci	r21, 0xFF	; 255
    43e0:	89 81       	ldd	r24, Y+1	; 0x01
    43e2:	9a 81       	ldd	r25, Y+2	; 0x02
    43e4:	fc 01       	movw	r30, r24
    43e6:	86 89       	ldd	r24, Z+22	; 0x16
    43e8:	28 2f       	mov	r18, r24
    43ea:	30 e0       	ldi	r19, 0x00	; 0
    43ec:	c9 01       	movw	r24, r18
    43ee:	88 0f       	add	r24, r24
    43f0:	99 1f       	adc	r25, r25
    43f2:	88 0f       	add	r24, r24
    43f4:	99 1f       	adc	r25, r25
    43f6:	88 0f       	add	r24, r24
    43f8:	99 1f       	adc	r25, r25
    43fa:	82 0f       	add	r24, r18
    43fc:	93 1f       	adc	r25, r19
    43fe:	86 57       	subi	r24, 0x76	; 118
    4400:	9c 4e       	sbci	r25, 0xEC	; 236
    4402:	ba 01       	movw	r22, r20
    4404:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <vListInsertEnd>
    4408:	89 81       	ldd	r24, Y+1	; 0x01
    440a:	9a 81       	ldd	r25, Y+2	; 0x02
    440c:	fc 01       	movw	r30, r24
    440e:	26 89       	ldd	r18, Z+22	; 0x16
    4410:	80 91 88 13 	lds	r24, 0x1388	; 0x801388 <pxCurrentTCB>
    4414:	90 91 89 13 	lds	r25, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    4418:	fc 01       	movw	r30, r24
    441a:	86 89       	ldd	r24, Z+22	; 0x16
    441c:	28 17       	cp	r18, r24
    441e:	18 f0       	brcs	.+6      	; 0x4426 <xTaskResumeAll+0xcc>
    4420:	81 e0       	ldi	r24, 0x01	; 1
    4422:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <xYieldPending>
    4426:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <xPendingReadyList>
    442a:	88 23       	and	r24, r24
    442c:	09 f0       	breq	.+2      	; 0x4430 <xTaskResumeAll+0xd6>
    442e:	b2 cf       	rjmp	.-156    	; 0x4394 <xTaskResumeAll+0x3a>
    4430:	89 81       	ldd	r24, Y+1	; 0x01
    4432:	9a 81       	ldd	r25, Y+2	; 0x02
    4434:	89 2b       	or	r24, r25
    4436:	09 f0       	breq	.+2      	; 0x443a <xTaskResumeAll+0xe0>
    4438:	12 d3       	rcall	.+1572   	; 0x4a5e <prvResetNextTaskUnblockTime>
    443a:	80 91 b7 13 	lds	r24, 0x13B7	; 0x8013b7 <xPendedTicks>
    443e:	90 91 b8 13 	lds	r25, 0x13B8	; 0x8013b8 <xPendedTicks+0x1>
    4442:	9d 83       	std	Y+5, r25	; 0x05
    4444:	8c 83       	std	Y+4, r24	; 0x04
    4446:	8c 81       	ldd	r24, Y+4	; 0x04
    4448:	9d 81       	ldd	r25, Y+5	; 0x05
    444a:	89 2b       	or	r24, r25
    444c:	99 f0       	breq	.+38     	; 0x4474 <xTaskResumeAll+0x11a>
    444e:	3d d0       	rcall	.+122    	; 0x44ca <xTaskIncrementTick>
    4450:	88 23       	and	r24, r24
    4452:	19 f0       	breq	.+6      	; 0x445a <xTaskResumeAll+0x100>
    4454:	81 e0       	ldi	r24, 0x01	; 1
    4456:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <xYieldPending>
    445a:	8c 81       	ldd	r24, Y+4	; 0x04
    445c:	9d 81       	ldd	r25, Y+5	; 0x05
    445e:	01 97       	sbiw	r24, 0x01	; 1
    4460:	9d 83       	std	Y+5, r25	; 0x05
    4462:	8c 83       	std	Y+4, r24	; 0x04
    4464:	8c 81       	ldd	r24, Y+4	; 0x04
    4466:	9d 81       	ldd	r25, Y+5	; 0x05
    4468:	89 2b       	or	r24, r25
    446a:	89 f7       	brne	.-30     	; 0x444e <xTaskResumeAll+0xf4>
    446c:	10 92 b8 13 	sts	0x13B8, r1	; 0x8013b8 <xPendedTicks+0x1>
    4470:	10 92 b7 13 	sts	0x13B7, r1	; 0x8013b7 <xPendedTicks>
    4474:	80 91 b9 13 	lds	r24, 0x13B9	; 0x8013b9 <xYieldPending>
    4478:	88 23       	and	r24, r24
    447a:	21 f0       	breq	.+8      	; 0x4484 <xTaskResumeAll+0x12a>
    447c:	81 e0       	ldi	r24, 0x01	; 1
    447e:	8b 83       	std	Y+3, r24	; 0x03
    4480:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <vPortYield>
    4484:	0f 90       	pop	r0
    4486:	0f be       	out	0x3f, r0	; 63
    4488:	8b 81       	ldd	r24, Y+3	; 0x03
    448a:	0f 90       	pop	r0
    448c:	0f 90       	pop	r0
    448e:	0f 90       	pop	r0
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	df 91       	pop	r29
    4496:	cf 91       	pop	r28
    4498:	08 95       	ret

0000449a <xTaskGetTickCount>:
    449a:	cf 93       	push	r28
    449c:	df 93       	push	r29
    449e:	1f 92       	push	r1
    44a0:	1f 92       	push	r1
    44a2:	cd b7       	in	r28, 0x3d	; 61
    44a4:	de b7       	in	r29, 0x3e	; 62
    44a6:	0f b6       	in	r0, 0x3f	; 63
    44a8:	f8 94       	cli
    44aa:	0f 92       	push	r0
    44ac:	80 91 b3 13 	lds	r24, 0x13B3	; 0x8013b3 <xTickCount>
    44b0:	90 91 b4 13 	lds	r25, 0x13B4	; 0x8013b4 <xTickCount+0x1>
    44b4:	9a 83       	std	Y+2, r25	; 0x02
    44b6:	89 83       	std	Y+1, r24	; 0x01
    44b8:	0f 90       	pop	r0
    44ba:	0f be       	out	0x3f, r0	; 63
    44bc:	89 81       	ldd	r24, Y+1	; 0x01
    44be:	9a 81       	ldd	r25, Y+2	; 0x02
    44c0:	0f 90       	pop	r0
    44c2:	0f 90       	pop	r0
    44c4:	df 91       	pop	r29
    44c6:	cf 91       	pop	r28
    44c8:	08 95       	ret

000044ca <xTaskIncrementTick>:
    44ca:	cf 93       	push	r28
    44cc:	df 93       	push	r29
    44ce:	cd b7       	in	r28, 0x3d	; 61
    44d0:	de b7       	in	r29, 0x3e	; 62
    44d2:	29 97       	sbiw	r28, 0x09	; 9
    44d4:	0f b6       	in	r0, 0x3f	; 63
    44d6:	f8 94       	cli
    44d8:	de bf       	out	0x3e, r29	; 62
    44da:	0f be       	out	0x3f, r0	; 63
    44dc:	cd bf       	out	0x3d, r28	; 61
    44de:	19 82       	std	Y+1, r1	; 0x01
    44e0:	80 91 c0 13 	lds	r24, 0x13C0	; 0x8013c0 <uxSchedulerSuspended>
    44e4:	88 23       	and	r24, r24
    44e6:	09 f0       	breq	.+2      	; 0x44ea <xTaskIncrementTick+0x20>
    44e8:	cd c0       	rjmp	.+410    	; 0x4684 <xTaskIncrementTick+0x1ba>
    44ea:	80 91 b3 13 	lds	r24, 0x13B3	; 0x8013b3 <xTickCount>
    44ee:	90 91 b4 13 	lds	r25, 0x13B4	; 0x8013b4 <xTickCount+0x1>
    44f2:	01 96       	adiw	r24, 0x01	; 1
    44f4:	9b 83       	std	Y+3, r25	; 0x03
    44f6:	8a 83       	std	Y+2, r24	; 0x02
    44f8:	8a 81       	ldd	r24, Y+2	; 0x02
    44fa:	9b 81       	ldd	r25, Y+3	; 0x03
    44fc:	90 93 b4 13 	sts	0x13B4, r25	; 0x8013b4 <xTickCount+0x1>
    4500:	80 93 b3 13 	sts	0x13B3, r24	; 0x8013b3 <xTickCount>
    4504:	8a 81       	ldd	r24, Y+2	; 0x02
    4506:	9b 81       	ldd	r25, Y+3	; 0x03
    4508:	89 2b       	or	r24, r25
    450a:	d1 f4       	brne	.+52     	; 0x4540 <xTaskIncrementTick+0x76>
    450c:	80 91 a5 13 	lds	r24, 0x13A5	; 0x8013a5 <pxDelayedTaskList>
    4510:	90 91 a6 13 	lds	r25, 0x13A6	; 0x8013a6 <pxDelayedTaskList+0x1>
    4514:	9d 83       	std	Y+5, r25	; 0x05
    4516:	8c 83       	std	Y+4, r24	; 0x04
    4518:	80 91 a7 13 	lds	r24, 0x13A7	; 0x8013a7 <pxOverflowDelayedTaskList>
    451c:	90 91 a8 13 	lds	r25, 0x13A8	; 0x8013a8 <pxOverflowDelayedTaskList+0x1>
    4520:	90 93 a6 13 	sts	0x13A6, r25	; 0x8013a6 <pxDelayedTaskList+0x1>
    4524:	80 93 a5 13 	sts	0x13A5, r24	; 0x8013a5 <pxDelayedTaskList>
    4528:	8c 81       	ldd	r24, Y+4	; 0x04
    452a:	9d 81       	ldd	r25, Y+5	; 0x05
    452c:	90 93 a8 13 	sts	0x13A8, r25	; 0x8013a8 <pxOverflowDelayedTaskList+0x1>
    4530:	80 93 a7 13 	sts	0x13A7, r24	; 0x8013a7 <pxOverflowDelayedTaskList>
    4534:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <xNumOfOverflows>
    4538:	8f 5f       	subi	r24, 0xFF	; 255
    453a:	80 93 ba 13 	sts	0x13BA, r24	; 0x8013ba <xNumOfOverflows>
    453e:	8f d2       	rcall	.+1310   	; 0x4a5e <prvResetNextTaskUnblockTime>
    4540:	80 91 bc 13 	lds	r24, 0x13BC	; 0x8013bc <xNextTaskUnblockTime>
    4544:	90 91 bd 13 	lds	r25, 0x13BD	; 0x8013bd <xNextTaskUnblockTime+0x1>
    4548:	2a 81       	ldd	r18, Y+2	; 0x02
    454a:	3b 81       	ldd	r19, Y+3	; 0x03
    454c:	28 17       	cp	r18, r24
    454e:	39 07       	cpc	r19, r25
    4550:	08 f4       	brcc	.+2      	; 0x4554 <xTaskIncrementTick+0x8a>
    4552:	78 c0       	rjmp	.+240    	; 0x4644 <xTaskIncrementTick+0x17a>
    4554:	80 91 a5 13 	lds	r24, 0x13A5	; 0x8013a5 <pxDelayedTaskList>
    4558:	90 91 a6 13 	lds	r25, 0x13A6	; 0x8013a6 <pxDelayedTaskList+0x1>
    455c:	fc 01       	movw	r30, r24
    455e:	80 81       	ld	r24, Z
    4560:	88 23       	and	r24, r24
    4562:	39 f4       	brne	.+14     	; 0x4572 <xTaskIncrementTick+0xa8>
    4564:	8f ef       	ldi	r24, 0xFF	; 255
    4566:	9f ef       	ldi	r25, 0xFF	; 255
    4568:	90 93 bd 13 	sts	0x13BD, r25	; 0x8013bd <xNextTaskUnblockTime+0x1>
    456c:	80 93 bc 13 	sts	0x13BC, r24	; 0x8013bc <xNextTaskUnblockTime>
    4570:	69 c0       	rjmp	.+210    	; 0x4644 <xTaskIncrementTick+0x17a>
    4572:	80 91 a5 13 	lds	r24, 0x13A5	; 0x8013a5 <pxDelayedTaskList>
    4576:	90 91 a6 13 	lds	r25, 0x13A6	; 0x8013a6 <pxDelayedTaskList+0x1>
    457a:	fc 01       	movw	r30, r24
    457c:	85 81       	ldd	r24, Z+5	; 0x05
    457e:	96 81       	ldd	r25, Z+6	; 0x06
    4580:	fc 01       	movw	r30, r24
    4582:	86 81       	ldd	r24, Z+6	; 0x06
    4584:	97 81       	ldd	r25, Z+7	; 0x07
    4586:	9f 83       	std	Y+7, r25	; 0x07
    4588:	8e 83       	std	Y+6, r24	; 0x06
    458a:	8e 81       	ldd	r24, Y+6	; 0x06
    458c:	9f 81       	ldd	r25, Y+7	; 0x07
    458e:	fc 01       	movw	r30, r24
    4590:	82 81       	ldd	r24, Z+2	; 0x02
    4592:	93 81       	ldd	r25, Z+3	; 0x03
    4594:	99 87       	std	Y+9, r25	; 0x09
    4596:	88 87       	std	Y+8, r24	; 0x08
    4598:	2a 81       	ldd	r18, Y+2	; 0x02
    459a:	3b 81       	ldd	r19, Y+3	; 0x03
    459c:	88 85       	ldd	r24, Y+8	; 0x08
    459e:	99 85       	ldd	r25, Y+9	; 0x09
    45a0:	28 17       	cp	r18, r24
    45a2:	39 07       	cpc	r19, r25
    45a4:	38 f4       	brcc	.+14     	; 0x45b4 <xTaskIncrementTick+0xea>
    45a6:	88 85       	ldd	r24, Y+8	; 0x08
    45a8:	99 85       	ldd	r25, Y+9	; 0x09
    45aa:	90 93 bd 13 	sts	0x13BD, r25	; 0x8013bd <xNextTaskUnblockTime+0x1>
    45ae:	80 93 bc 13 	sts	0x13BC, r24	; 0x8013bc <xNextTaskUnblockTime>
    45b2:	48 c0       	rjmp	.+144    	; 0x4644 <xTaskIncrementTick+0x17a>
    45b4:	8e 81       	ldd	r24, Y+6	; 0x06
    45b6:	9f 81       	ldd	r25, Y+7	; 0x07
    45b8:	02 96       	adiw	r24, 0x02	; 2
    45ba:	0e 94 aa 14 	call	0x2954	; 0x2954 <uxListRemove>
    45be:	8e 81       	ldd	r24, Y+6	; 0x06
    45c0:	9f 81       	ldd	r25, Y+7	; 0x07
    45c2:	fc 01       	movw	r30, r24
    45c4:	84 89       	ldd	r24, Z+20	; 0x14
    45c6:	95 89       	ldd	r25, Z+21	; 0x15
    45c8:	89 2b       	or	r24, r25
    45ca:	29 f0       	breq	.+10     	; 0x45d6 <xTaskIncrementTick+0x10c>
    45cc:	8e 81       	ldd	r24, Y+6	; 0x06
    45ce:	9f 81       	ldd	r25, Y+7	; 0x07
    45d0:	0c 96       	adiw	r24, 0x0c	; 12
    45d2:	0e 94 aa 14 	call	0x2954	; 0x2954 <uxListRemove>
    45d6:	8e 81       	ldd	r24, Y+6	; 0x06
    45d8:	9f 81       	ldd	r25, Y+7	; 0x07
    45da:	fc 01       	movw	r30, r24
    45dc:	96 89       	ldd	r25, Z+22	; 0x16
    45de:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    45e2:	89 17       	cp	r24, r25
    45e4:	30 f4       	brcc	.+12     	; 0x45f2 <xTaskIncrementTick+0x128>
    45e6:	8e 81       	ldd	r24, Y+6	; 0x06
    45e8:	9f 81       	ldd	r25, Y+7	; 0x07
    45ea:	fc 01       	movw	r30, r24
    45ec:	86 89       	ldd	r24, Z+22	; 0x16
    45ee:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <uxTopReadyPriority>
    45f2:	8e 81       	ldd	r24, Y+6	; 0x06
    45f4:	9f 81       	ldd	r25, Y+7	; 0x07
    45f6:	ac 01       	movw	r20, r24
    45f8:	4e 5f       	subi	r20, 0xFE	; 254
    45fa:	5f 4f       	sbci	r21, 0xFF	; 255
    45fc:	8e 81       	ldd	r24, Y+6	; 0x06
    45fe:	9f 81       	ldd	r25, Y+7	; 0x07
    4600:	fc 01       	movw	r30, r24
    4602:	86 89       	ldd	r24, Z+22	; 0x16
    4604:	28 2f       	mov	r18, r24
    4606:	30 e0       	ldi	r19, 0x00	; 0
    4608:	c9 01       	movw	r24, r18
    460a:	88 0f       	add	r24, r24
    460c:	99 1f       	adc	r25, r25
    460e:	88 0f       	add	r24, r24
    4610:	99 1f       	adc	r25, r25
    4612:	88 0f       	add	r24, r24
    4614:	99 1f       	adc	r25, r25
    4616:	82 0f       	add	r24, r18
    4618:	93 1f       	adc	r25, r19
    461a:	86 57       	subi	r24, 0x76	; 118
    461c:	9c 4e       	sbci	r25, 0xEC	; 236
    461e:	ba 01       	movw	r22, r20
    4620:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <vListInsertEnd>
    4624:	8e 81       	ldd	r24, Y+6	; 0x06
    4626:	9f 81       	ldd	r25, Y+7	; 0x07
    4628:	fc 01       	movw	r30, r24
    462a:	26 89       	ldd	r18, Z+22	; 0x16
    462c:	80 91 88 13 	lds	r24, 0x1388	; 0x801388 <pxCurrentTCB>
    4630:	90 91 89 13 	lds	r25, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    4634:	fc 01       	movw	r30, r24
    4636:	86 89       	ldd	r24, Z+22	; 0x16
    4638:	28 17       	cp	r18, r24
    463a:	08 f4       	brcc	.+2      	; 0x463e <xTaskIncrementTick+0x174>
    463c:	8b cf       	rjmp	.-234    	; 0x4554 <xTaskIncrementTick+0x8a>
    463e:	81 e0       	ldi	r24, 0x01	; 1
    4640:	89 83       	std	Y+1, r24	; 0x01
    4642:	88 cf       	rjmp	.-240    	; 0x4554 <xTaskIncrementTick+0x8a>
    4644:	80 91 88 13 	lds	r24, 0x1388	; 0x801388 <pxCurrentTCB>
    4648:	90 91 89 13 	lds	r25, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    464c:	fc 01       	movw	r30, r24
    464e:	86 89       	ldd	r24, Z+22	; 0x16
    4650:	28 2f       	mov	r18, r24
    4652:	30 e0       	ldi	r19, 0x00	; 0
    4654:	c9 01       	movw	r24, r18
    4656:	88 0f       	add	r24, r24
    4658:	99 1f       	adc	r25, r25
    465a:	88 0f       	add	r24, r24
    465c:	99 1f       	adc	r25, r25
    465e:	88 0f       	add	r24, r24
    4660:	99 1f       	adc	r25, r25
    4662:	82 0f       	add	r24, r18
    4664:	93 1f       	adc	r25, r19
    4666:	86 57       	subi	r24, 0x76	; 118
    4668:	9c 4e       	sbci	r25, 0xEC	; 236
    466a:	fc 01       	movw	r30, r24
    466c:	80 81       	ld	r24, Z
    466e:	82 30       	cpi	r24, 0x02	; 2
    4670:	10 f0       	brcs	.+4      	; 0x4676 <xTaskIncrementTick+0x1ac>
    4672:	81 e0       	ldi	r24, 0x01	; 1
    4674:	89 83       	std	Y+1, r24	; 0x01
    4676:	80 91 b9 13 	lds	r24, 0x13B9	; 0x8013b9 <xYieldPending>
    467a:	88 23       	and	r24, r24
    467c:	61 f0       	breq	.+24     	; 0x4696 <xTaskIncrementTick+0x1cc>
    467e:	81 e0       	ldi	r24, 0x01	; 1
    4680:	89 83       	std	Y+1, r24	; 0x01
    4682:	09 c0       	rjmp	.+18     	; 0x4696 <xTaskIncrementTick+0x1cc>
    4684:	80 91 b7 13 	lds	r24, 0x13B7	; 0x8013b7 <xPendedTicks>
    4688:	90 91 b8 13 	lds	r25, 0x13B8	; 0x8013b8 <xPendedTicks+0x1>
    468c:	01 96       	adiw	r24, 0x01	; 1
    468e:	90 93 b8 13 	sts	0x13B8, r25	; 0x8013b8 <xPendedTicks+0x1>
    4692:	80 93 b7 13 	sts	0x13B7, r24	; 0x8013b7 <xPendedTicks>
    4696:	89 81       	ldd	r24, Y+1	; 0x01
    4698:	29 96       	adiw	r28, 0x09	; 9
    469a:	0f b6       	in	r0, 0x3f	; 63
    469c:	f8 94       	cli
    469e:	de bf       	out	0x3e, r29	; 62
    46a0:	0f be       	out	0x3f, r0	; 63
    46a2:	cd bf       	out	0x3d, r28	; 61
    46a4:	df 91       	pop	r29
    46a6:	cf 91       	pop	r28
    46a8:	08 95       	ret

000046aa <vTaskSwitchContext>:
    46aa:	cf 93       	push	r28
    46ac:	df 93       	push	r29
    46ae:	00 d0       	rcall	.+0      	; 0x46b0 <vTaskSwitchContext+0x6>
    46b0:	cd b7       	in	r28, 0x3d	; 61
    46b2:	de b7       	in	r29, 0x3e	; 62
    46b4:	80 91 c0 13 	lds	r24, 0x13C0	; 0x8013c0 <uxSchedulerSuspended>
    46b8:	88 23       	and	r24, r24
    46ba:	21 f0       	breq	.+8      	; 0x46c4 <vTaskSwitchContext+0x1a>
    46bc:	81 e0       	ldi	r24, 0x01	; 1
    46be:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <xYieldPending>
    46c2:	5f c0       	rjmp	.+190    	; 0x4782 <vTaskSwitchContext+0xd8>
    46c4:	10 92 b9 13 	sts	0x13B9, r1	; 0x8013b9 <xYieldPending>
    46c8:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    46cc:	89 83       	std	Y+1, r24	; 0x01
    46ce:	03 c0       	rjmp	.+6      	; 0x46d6 <vTaskSwitchContext+0x2c>
    46d0:	89 81       	ldd	r24, Y+1	; 0x01
    46d2:	81 50       	subi	r24, 0x01	; 1
    46d4:	89 83       	std	Y+1, r24	; 0x01
    46d6:	89 81       	ldd	r24, Y+1	; 0x01
    46d8:	28 2f       	mov	r18, r24
    46da:	30 e0       	ldi	r19, 0x00	; 0
    46dc:	c9 01       	movw	r24, r18
    46de:	88 0f       	add	r24, r24
    46e0:	99 1f       	adc	r25, r25
    46e2:	88 0f       	add	r24, r24
    46e4:	99 1f       	adc	r25, r25
    46e6:	88 0f       	add	r24, r24
    46e8:	99 1f       	adc	r25, r25
    46ea:	82 0f       	add	r24, r18
    46ec:	93 1f       	adc	r25, r19
    46ee:	86 57       	subi	r24, 0x76	; 118
    46f0:	9c 4e       	sbci	r25, 0xEC	; 236
    46f2:	fc 01       	movw	r30, r24
    46f4:	80 81       	ld	r24, Z
    46f6:	88 23       	and	r24, r24
    46f8:	59 f3       	breq	.-42     	; 0x46d0 <vTaskSwitchContext+0x26>
    46fa:	89 81       	ldd	r24, Y+1	; 0x01
    46fc:	28 2f       	mov	r18, r24
    46fe:	30 e0       	ldi	r19, 0x00	; 0
    4700:	c9 01       	movw	r24, r18
    4702:	88 0f       	add	r24, r24
    4704:	99 1f       	adc	r25, r25
    4706:	88 0f       	add	r24, r24
    4708:	99 1f       	adc	r25, r25
    470a:	88 0f       	add	r24, r24
    470c:	99 1f       	adc	r25, r25
    470e:	82 0f       	add	r24, r18
    4710:	93 1f       	adc	r25, r19
    4712:	86 57       	subi	r24, 0x76	; 118
    4714:	9c 4e       	sbci	r25, 0xEC	; 236
    4716:	9b 83       	std	Y+3, r25	; 0x03
    4718:	8a 83       	std	Y+2, r24	; 0x02
    471a:	8a 81       	ldd	r24, Y+2	; 0x02
    471c:	9b 81       	ldd	r25, Y+3	; 0x03
    471e:	fc 01       	movw	r30, r24
    4720:	81 81       	ldd	r24, Z+1	; 0x01
    4722:	92 81       	ldd	r25, Z+2	; 0x02
    4724:	fc 01       	movw	r30, r24
    4726:	22 81       	ldd	r18, Z+2	; 0x02
    4728:	33 81       	ldd	r19, Z+3	; 0x03
    472a:	8a 81       	ldd	r24, Y+2	; 0x02
    472c:	9b 81       	ldd	r25, Y+3	; 0x03
    472e:	fc 01       	movw	r30, r24
    4730:	32 83       	std	Z+2, r19	; 0x02
    4732:	21 83       	std	Z+1, r18	; 0x01
    4734:	8a 81       	ldd	r24, Y+2	; 0x02
    4736:	9b 81       	ldd	r25, Y+3	; 0x03
    4738:	fc 01       	movw	r30, r24
    473a:	21 81       	ldd	r18, Z+1	; 0x01
    473c:	32 81       	ldd	r19, Z+2	; 0x02
    473e:	8a 81       	ldd	r24, Y+2	; 0x02
    4740:	9b 81       	ldd	r25, Y+3	; 0x03
    4742:	03 96       	adiw	r24, 0x03	; 3
    4744:	28 17       	cp	r18, r24
    4746:	39 07       	cpc	r19, r25
    4748:	69 f4       	brne	.+26     	; 0x4764 <vTaskSwitchContext+0xba>
    474a:	8a 81       	ldd	r24, Y+2	; 0x02
    474c:	9b 81       	ldd	r25, Y+3	; 0x03
    474e:	fc 01       	movw	r30, r24
    4750:	81 81       	ldd	r24, Z+1	; 0x01
    4752:	92 81       	ldd	r25, Z+2	; 0x02
    4754:	fc 01       	movw	r30, r24
    4756:	22 81       	ldd	r18, Z+2	; 0x02
    4758:	33 81       	ldd	r19, Z+3	; 0x03
    475a:	8a 81       	ldd	r24, Y+2	; 0x02
    475c:	9b 81       	ldd	r25, Y+3	; 0x03
    475e:	fc 01       	movw	r30, r24
    4760:	32 83       	std	Z+2, r19	; 0x02
    4762:	21 83       	std	Z+1, r18	; 0x01
    4764:	8a 81       	ldd	r24, Y+2	; 0x02
    4766:	9b 81       	ldd	r25, Y+3	; 0x03
    4768:	fc 01       	movw	r30, r24
    476a:	81 81       	ldd	r24, Z+1	; 0x01
    476c:	92 81       	ldd	r25, Z+2	; 0x02
    476e:	fc 01       	movw	r30, r24
    4770:	86 81       	ldd	r24, Z+6	; 0x06
    4772:	97 81       	ldd	r25, Z+7	; 0x07
    4774:	90 93 89 13 	sts	0x1389, r25	; 0x801389 <pxCurrentTCB+0x1>
    4778:	80 93 88 13 	sts	0x1388, r24	; 0x801388 <pxCurrentTCB>
    477c:	89 81       	ldd	r24, Y+1	; 0x01
    477e:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <uxTopReadyPriority>
    4782:	00 00       	nop
    4784:	0f 90       	pop	r0
    4786:	0f 90       	pop	r0
    4788:	0f 90       	pop	r0
    478a:	df 91       	pop	r29
    478c:	cf 91       	pop	r28
    478e:	08 95       	ret

00004790 <vTaskPlaceOnEventList>:
    4790:	cf 93       	push	r28
    4792:	df 93       	push	r29
    4794:	00 d0       	rcall	.+0      	; 0x4796 <vTaskPlaceOnEventList+0x6>
    4796:	1f 92       	push	r1
    4798:	cd b7       	in	r28, 0x3d	; 61
    479a:	de b7       	in	r29, 0x3e	; 62
    479c:	9a 83       	std	Y+2, r25	; 0x02
    479e:	89 83       	std	Y+1, r24	; 0x01
    47a0:	7c 83       	std	Y+4, r23	; 0x04
    47a2:	6b 83       	std	Y+3, r22	; 0x03
    47a4:	80 91 88 13 	lds	r24, 0x1388	; 0x801388 <pxCurrentTCB>
    47a8:	90 91 89 13 	lds	r25, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    47ac:	9c 01       	movw	r18, r24
    47ae:	24 5f       	subi	r18, 0xF4	; 244
    47b0:	3f 4f       	sbci	r19, 0xFF	; 255
    47b2:	89 81       	ldd	r24, Y+1	; 0x01
    47b4:	9a 81       	ldd	r25, Y+2	; 0x02
    47b6:	b9 01       	movw	r22, r18
    47b8:	0e 94 32 14 	call	0x2864	; 0x2864 <vListInsert>
    47bc:	8b 81       	ldd	r24, Y+3	; 0x03
    47be:	9c 81       	ldd	r25, Y+4	; 0x04
    47c0:	61 e0       	ldi	r22, 0x01	; 1
    47c2:	53 d5       	rcall	.+2726   	; 0x526a <prvAddCurrentTaskToDelayedList>
    47c4:	00 00       	nop
    47c6:	0f 90       	pop	r0
    47c8:	0f 90       	pop	r0
    47ca:	0f 90       	pop	r0
    47cc:	0f 90       	pop	r0
    47ce:	df 91       	pop	r29
    47d0:	cf 91       	pop	r28
    47d2:	08 95       	ret

000047d4 <xTaskRemoveFromEventList>:
    47d4:	cf 93       	push	r28
    47d6:	df 93       	push	r29
    47d8:	00 d0       	rcall	.+0      	; 0x47da <xTaskRemoveFromEventList+0x6>
    47da:	1f 92       	push	r1
    47dc:	1f 92       	push	r1
    47de:	cd b7       	in	r28, 0x3d	; 61
    47e0:	de b7       	in	r29, 0x3e	; 62
    47e2:	9d 83       	std	Y+5, r25	; 0x05
    47e4:	8c 83       	std	Y+4, r24	; 0x04
    47e6:	8c 81       	ldd	r24, Y+4	; 0x04
    47e8:	9d 81       	ldd	r25, Y+5	; 0x05
    47ea:	fc 01       	movw	r30, r24
    47ec:	85 81       	ldd	r24, Z+5	; 0x05
    47ee:	96 81       	ldd	r25, Z+6	; 0x06
    47f0:	fc 01       	movw	r30, r24
    47f2:	86 81       	ldd	r24, Z+6	; 0x06
    47f4:	97 81       	ldd	r25, Z+7	; 0x07
    47f6:	9b 83       	std	Y+3, r25	; 0x03
    47f8:	8a 83       	std	Y+2, r24	; 0x02
    47fa:	8a 81       	ldd	r24, Y+2	; 0x02
    47fc:	9b 81       	ldd	r25, Y+3	; 0x03
    47fe:	0c 96       	adiw	r24, 0x0c	; 12
    4800:	0e 94 aa 14 	call	0x2954	; 0x2954 <uxListRemove>
    4804:	80 91 c0 13 	lds	r24, 0x13C0	; 0x8013c0 <uxSchedulerSuspended>
    4808:	88 23       	and	r24, r24
    480a:	69 f5       	brne	.+90     	; 0x4866 <xTaskRemoveFromEventList+0x92>
    480c:	8a 81       	ldd	r24, Y+2	; 0x02
    480e:	9b 81       	ldd	r25, Y+3	; 0x03
    4810:	02 96       	adiw	r24, 0x02	; 2
    4812:	0e 94 aa 14 	call	0x2954	; 0x2954 <uxListRemove>
    4816:	8a 81       	ldd	r24, Y+2	; 0x02
    4818:	9b 81       	ldd	r25, Y+3	; 0x03
    481a:	fc 01       	movw	r30, r24
    481c:	96 89       	ldd	r25, Z+22	; 0x16
    481e:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    4822:	89 17       	cp	r24, r25
    4824:	30 f4       	brcc	.+12     	; 0x4832 <xTaskRemoveFromEventList+0x5e>
    4826:	8a 81       	ldd	r24, Y+2	; 0x02
    4828:	9b 81       	ldd	r25, Y+3	; 0x03
    482a:	fc 01       	movw	r30, r24
    482c:	86 89       	ldd	r24, Z+22	; 0x16
    482e:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <uxTopReadyPriority>
    4832:	8a 81       	ldd	r24, Y+2	; 0x02
    4834:	9b 81       	ldd	r25, Y+3	; 0x03
    4836:	ac 01       	movw	r20, r24
    4838:	4e 5f       	subi	r20, 0xFE	; 254
    483a:	5f 4f       	sbci	r21, 0xFF	; 255
    483c:	8a 81       	ldd	r24, Y+2	; 0x02
    483e:	9b 81       	ldd	r25, Y+3	; 0x03
    4840:	fc 01       	movw	r30, r24
    4842:	86 89       	ldd	r24, Z+22	; 0x16
    4844:	28 2f       	mov	r18, r24
    4846:	30 e0       	ldi	r19, 0x00	; 0
    4848:	c9 01       	movw	r24, r18
    484a:	88 0f       	add	r24, r24
    484c:	99 1f       	adc	r25, r25
    484e:	88 0f       	add	r24, r24
    4850:	99 1f       	adc	r25, r25
    4852:	88 0f       	add	r24, r24
    4854:	99 1f       	adc	r25, r25
    4856:	82 0f       	add	r24, r18
    4858:	93 1f       	adc	r25, r19
    485a:	86 57       	subi	r24, 0x76	; 118
    485c:	9c 4e       	sbci	r25, 0xEC	; 236
    485e:	ba 01       	movw	r22, r20
    4860:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <vListInsertEnd>
    4864:	08 c0       	rjmp	.+16     	; 0x4876 <xTaskRemoveFromEventList+0xa2>
    4866:	8a 81       	ldd	r24, Y+2	; 0x02
    4868:	9b 81       	ldd	r25, Y+3	; 0x03
    486a:	0c 96       	adiw	r24, 0x0c	; 12
    486c:	bc 01       	movw	r22, r24
    486e:	89 ea       	ldi	r24, 0xA9	; 169
    4870:	93 e1       	ldi	r25, 0x13	; 19
    4872:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <vListInsertEnd>
    4876:	8a 81       	ldd	r24, Y+2	; 0x02
    4878:	9b 81       	ldd	r25, Y+3	; 0x03
    487a:	fc 01       	movw	r30, r24
    487c:	26 89       	ldd	r18, Z+22	; 0x16
    487e:	80 91 88 13 	lds	r24, 0x1388	; 0x801388 <pxCurrentTCB>
    4882:	90 91 89 13 	lds	r25, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    4886:	fc 01       	movw	r30, r24
    4888:	86 89       	ldd	r24, Z+22	; 0x16
    488a:	82 17       	cp	r24, r18
    488c:	30 f4       	brcc	.+12     	; 0x489a <xTaskRemoveFromEventList+0xc6>
    488e:	81 e0       	ldi	r24, 0x01	; 1
    4890:	89 83       	std	Y+1, r24	; 0x01
    4892:	81 e0       	ldi	r24, 0x01	; 1
    4894:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <xYieldPending>
    4898:	01 c0       	rjmp	.+2      	; 0x489c <xTaskRemoveFromEventList+0xc8>
    489a:	19 82       	std	Y+1, r1	; 0x01
    489c:	89 81       	ldd	r24, Y+1	; 0x01
    489e:	0f 90       	pop	r0
    48a0:	0f 90       	pop	r0
    48a2:	0f 90       	pop	r0
    48a4:	0f 90       	pop	r0
    48a6:	0f 90       	pop	r0
    48a8:	df 91       	pop	r29
    48aa:	cf 91       	pop	r28
    48ac:	08 95       	ret

000048ae <vTaskInternalSetTimeOutState>:
    48ae:	cf 93       	push	r28
    48b0:	df 93       	push	r29
    48b2:	1f 92       	push	r1
    48b4:	1f 92       	push	r1
    48b6:	cd b7       	in	r28, 0x3d	; 61
    48b8:	de b7       	in	r29, 0x3e	; 62
    48ba:	9a 83       	std	Y+2, r25	; 0x02
    48bc:	89 83       	std	Y+1, r24	; 0x01
    48be:	20 91 ba 13 	lds	r18, 0x13BA	; 0x8013ba <xNumOfOverflows>
    48c2:	89 81       	ldd	r24, Y+1	; 0x01
    48c4:	9a 81       	ldd	r25, Y+2	; 0x02
    48c6:	fc 01       	movw	r30, r24
    48c8:	20 83       	st	Z, r18
    48ca:	20 91 b3 13 	lds	r18, 0x13B3	; 0x8013b3 <xTickCount>
    48ce:	30 91 b4 13 	lds	r19, 0x13B4	; 0x8013b4 <xTickCount+0x1>
    48d2:	89 81       	ldd	r24, Y+1	; 0x01
    48d4:	9a 81       	ldd	r25, Y+2	; 0x02
    48d6:	fc 01       	movw	r30, r24
    48d8:	32 83       	std	Z+2, r19	; 0x02
    48da:	21 83       	std	Z+1, r18	; 0x01
    48dc:	00 00       	nop
    48de:	0f 90       	pop	r0
    48e0:	0f 90       	pop	r0
    48e2:	df 91       	pop	r29
    48e4:	cf 91       	pop	r28
    48e6:	08 95       	ret

000048e8 <xTaskCheckForTimeOut>:
    48e8:	cf 93       	push	r28
    48ea:	df 93       	push	r29
    48ec:	cd b7       	in	r28, 0x3d	; 61
    48ee:	de b7       	in	r29, 0x3e	; 62
    48f0:	29 97       	sbiw	r28, 0x09	; 9
    48f2:	0f b6       	in	r0, 0x3f	; 63
    48f4:	f8 94       	cli
    48f6:	de bf       	out	0x3e, r29	; 62
    48f8:	0f be       	out	0x3f, r0	; 63
    48fa:	cd bf       	out	0x3d, r28	; 61
    48fc:	9f 83       	std	Y+7, r25	; 0x07
    48fe:	8e 83       	std	Y+6, r24	; 0x06
    4900:	79 87       	std	Y+9, r23	; 0x09
    4902:	68 87       	std	Y+8, r22	; 0x08
    4904:	0f b6       	in	r0, 0x3f	; 63
    4906:	f8 94       	cli
    4908:	0f 92       	push	r0
    490a:	80 91 b3 13 	lds	r24, 0x13B3	; 0x8013b3 <xTickCount>
    490e:	90 91 b4 13 	lds	r25, 0x13B4	; 0x8013b4 <xTickCount+0x1>
    4912:	9b 83       	std	Y+3, r25	; 0x03
    4914:	8a 83       	std	Y+2, r24	; 0x02
    4916:	8e 81       	ldd	r24, Y+6	; 0x06
    4918:	9f 81       	ldd	r25, Y+7	; 0x07
    491a:	fc 01       	movw	r30, r24
    491c:	81 81       	ldd	r24, Z+1	; 0x01
    491e:	92 81       	ldd	r25, Z+2	; 0x02
    4920:	2a 81       	ldd	r18, Y+2	; 0x02
    4922:	3b 81       	ldd	r19, Y+3	; 0x03
    4924:	a9 01       	movw	r20, r18
    4926:	48 1b       	sub	r20, r24
    4928:	59 0b       	sbc	r21, r25
    492a:	ca 01       	movw	r24, r20
    492c:	9d 83       	std	Y+5, r25	; 0x05
    492e:	8c 83       	std	Y+4, r24	; 0x04
    4930:	8e 81       	ldd	r24, Y+6	; 0x06
    4932:	9f 81       	ldd	r25, Y+7	; 0x07
    4934:	fc 01       	movw	r30, r24
    4936:	90 81       	ld	r25, Z
    4938:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <xNumOfOverflows>
    493c:	98 17       	cp	r25, r24
    493e:	91 f0       	breq	.+36     	; 0x4964 <xTaskCheckForTimeOut+0x7c>
    4940:	8e 81       	ldd	r24, Y+6	; 0x06
    4942:	9f 81       	ldd	r25, Y+7	; 0x07
    4944:	fc 01       	movw	r30, r24
    4946:	21 81       	ldd	r18, Z+1	; 0x01
    4948:	32 81       	ldd	r19, Z+2	; 0x02
    494a:	8a 81       	ldd	r24, Y+2	; 0x02
    494c:	9b 81       	ldd	r25, Y+3	; 0x03
    494e:	82 17       	cp	r24, r18
    4950:	93 07       	cpc	r25, r19
    4952:	40 f0       	brcs	.+16     	; 0x4964 <xTaskCheckForTimeOut+0x7c>
    4954:	81 e0       	ldi	r24, 0x01	; 1
    4956:	89 83       	std	Y+1, r24	; 0x01
    4958:	88 85       	ldd	r24, Y+8	; 0x08
    495a:	99 85       	ldd	r25, Y+9	; 0x09
    495c:	fc 01       	movw	r30, r24
    495e:	11 82       	std	Z+1, r1	; 0x01
    4960:	10 82       	st	Z, r1
    4962:	24 c0       	rjmp	.+72     	; 0x49ac <xTaskCheckForTimeOut+0xc4>
    4964:	88 85       	ldd	r24, Y+8	; 0x08
    4966:	99 85       	ldd	r25, Y+9	; 0x09
    4968:	fc 01       	movw	r30, r24
    496a:	20 81       	ld	r18, Z
    496c:	31 81       	ldd	r19, Z+1	; 0x01
    496e:	8c 81       	ldd	r24, Y+4	; 0x04
    4970:	9d 81       	ldd	r25, Y+5	; 0x05
    4972:	82 17       	cp	r24, r18
    4974:	93 07       	cpc	r25, r19
    4976:	98 f4       	brcc	.+38     	; 0x499e <xTaskCheckForTimeOut+0xb6>
    4978:	88 85       	ldd	r24, Y+8	; 0x08
    497a:	99 85       	ldd	r25, Y+9	; 0x09
    497c:	fc 01       	movw	r30, r24
    497e:	20 81       	ld	r18, Z
    4980:	31 81       	ldd	r19, Z+1	; 0x01
    4982:	8c 81       	ldd	r24, Y+4	; 0x04
    4984:	9d 81       	ldd	r25, Y+5	; 0x05
    4986:	28 1b       	sub	r18, r24
    4988:	39 0b       	sbc	r19, r25
    498a:	88 85       	ldd	r24, Y+8	; 0x08
    498c:	99 85       	ldd	r25, Y+9	; 0x09
    498e:	fc 01       	movw	r30, r24
    4990:	31 83       	std	Z+1, r19	; 0x01
    4992:	20 83       	st	Z, r18
    4994:	8e 81       	ldd	r24, Y+6	; 0x06
    4996:	9f 81       	ldd	r25, Y+7	; 0x07
    4998:	8a df       	rcall	.-236    	; 0x48ae <vTaskInternalSetTimeOutState>
    499a:	19 82       	std	Y+1, r1	; 0x01
    499c:	07 c0       	rjmp	.+14     	; 0x49ac <xTaskCheckForTimeOut+0xc4>
    499e:	88 85       	ldd	r24, Y+8	; 0x08
    49a0:	99 85       	ldd	r25, Y+9	; 0x09
    49a2:	fc 01       	movw	r30, r24
    49a4:	11 82       	std	Z+1, r1	; 0x01
    49a6:	10 82       	st	Z, r1
    49a8:	81 e0       	ldi	r24, 0x01	; 1
    49aa:	89 83       	std	Y+1, r24	; 0x01
    49ac:	0f 90       	pop	r0
    49ae:	0f be       	out	0x3f, r0	; 63
    49b0:	89 81       	ldd	r24, Y+1	; 0x01
    49b2:	29 96       	adiw	r28, 0x09	; 9
    49b4:	0f b6       	in	r0, 0x3f	; 63
    49b6:	f8 94       	cli
    49b8:	de bf       	out	0x3e, r29	; 62
    49ba:	0f be       	out	0x3f, r0	; 63
    49bc:	cd bf       	out	0x3d, r28	; 61
    49be:	df 91       	pop	r29
    49c0:	cf 91       	pop	r28
    49c2:	08 95       	ret

000049c4 <vTaskMissedYield>:
    49c4:	cf 93       	push	r28
    49c6:	df 93       	push	r29
    49c8:	cd b7       	in	r28, 0x3d	; 61
    49ca:	de b7       	in	r29, 0x3e	; 62
    49cc:	81 e0       	ldi	r24, 0x01	; 1
    49ce:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <xYieldPending>
    49d2:	00 00       	nop
    49d4:	df 91       	pop	r29
    49d6:	cf 91       	pop	r28
    49d8:	08 95       	ret

000049da <prvInitialiseTaskLists>:
    49da:	cf 93       	push	r28
    49dc:	df 93       	push	r29
    49de:	1f 92       	push	r1
    49e0:	cd b7       	in	r28, 0x3d	; 61
    49e2:	de b7       	in	r29, 0x3e	; 62
    49e4:	19 82       	std	Y+1, r1	; 0x01
    49e6:	13 c0       	rjmp	.+38     	; 0x4a0e <prvInitialiseTaskLists+0x34>
    49e8:	89 81       	ldd	r24, Y+1	; 0x01
    49ea:	28 2f       	mov	r18, r24
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	c9 01       	movw	r24, r18
    49f0:	88 0f       	add	r24, r24
    49f2:	99 1f       	adc	r25, r25
    49f4:	88 0f       	add	r24, r24
    49f6:	99 1f       	adc	r25, r25
    49f8:	88 0f       	add	r24, r24
    49fa:	99 1f       	adc	r25, r25
    49fc:	82 0f       	add	r24, r18
    49fe:	93 1f       	adc	r25, r19
    4a00:	86 57       	subi	r24, 0x76	; 118
    4a02:	9c 4e       	sbci	r25, 0xEC	; 236
    4a04:	0e 94 9a 13 	call	0x2734	; 0x2734 <vListInitialise>
    4a08:	89 81       	ldd	r24, Y+1	; 0x01
    4a0a:	8f 5f       	subi	r24, 0xFF	; 255
    4a0c:	89 83       	std	Y+1, r24	; 0x01
    4a0e:	89 81       	ldd	r24, Y+1	; 0x01
    4a10:	88 23       	and	r24, r24
    4a12:	51 f3       	breq	.-44     	; 0x49e8 <prvInitialiseTaskLists+0xe>
    4a14:	83 e9       	ldi	r24, 0x93	; 147
    4a16:	93 e1       	ldi	r25, 0x13	; 19
    4a18:	0e 94 9a 13 	call	0x2734	; 0x2734 <vListInitialise>
    4a1c:	8c e9       	ldi	r24, 0x9C	; 156
    4a1e:	93 e1       	ldi	r25, 0x13	; 19
    4a20:	0e 94 9a 13 	call	0x2734	; 0x2734 <vListInitialise>
    4a24:	89 ea       	ldi	r24, 0xA9	; 169
    4a26:	93 e1       	ldi	r25, 0x13	; 19
    4a28:	0e 94 9a 13 	call	0x2734	; 0x2734 <vListInitialise>
    4a2c:	83 e9       	ldi	r24, 0x93	; 147
    4a2e:	93 e1       	ldi	r25, 0x13	; 19
    4a30:	90 93 a6 13 	sts	0x13A6, r25	; 0x8013a6 <pxDelayedTaskList+0x1>
    4a34:	80 93 a5 13 	sts	0x13A5, r24	; 0x8013a5 <pxDelayedTaskList>
    4a38:	8c e9       	ldi	r24, 0x9C	; 156
    4a3a:	93 e1       	ldi	r25, 0x13	; 19
    4a3c:	90 93 a8 13 	sts	0x13A8, r25	; 0x8013a8 <pxOverflowDelayedTaskList+0x1>
    4a40:	80 93 a7 13 	sts	0x13A7, r24	; 0x8013a7 <pxOverflowDelayedTaskList>
    4a44:	00 00       	nop
    4a46:	0f 90       	pop	r0
    4a48:	df 91       	pop	r29
    4a4a:	cf 91       	pop	r28
    4a4c:	08 95       	ret

00004a4e <prvCheckTasksWaitingTermination>:
    4a4e:	cf 93       	push	r28
    4a50:	df 93       	push	r29
    4a52:	cd b7       	in	r28, 0x3d	; 61
    4a54:	de b7       	in	r29, 0x3e	; 62
    4a56:	00 00       	nop
    4a58:	df 91       	pop	r29
    4a5a:	cf 91       	pop	r28
    4a5c:	08 95       	ret

00004a5e <prvResetNextTaskUnblockTime>:
    4a5e:	cf 93       	push	r28
    4a60:	df 93       	push	r29
    4a62:	cd b7       	in	r28, 0x3d	; 61
    4a64:	de b7       	in	r29, 0x3e	; 62
    4a66:	80 91 a5 13 	lds	r24, 0x13A5	; 0x8013a5 <pxDelayedTaskList>
    4a6a:	90 91 a6 13 	lds	r25, 0x13A6	; 0x8013a6 <pxDelayedTaskList+0x1>
    4a6e:	fc 01       	movw	r30, r24
    4a70:	80 81       	ld	r24, Z
    4a72:	88 23       	and	r24, r24
    4a74:	39 f4       	brne	.+14     	; 0x4a84 <prvResetNextTaskUnblockTime+0x26>
    4a76:	8f ef       	ldi	r24, 0xFF	; 255
    4a78:	9f ef       	ldi	r25, 0xFF	; 255
    4a7a:	90 93 bd 13 	sts	0x13BD, r25	; 0x8013bd <xNextTaskUnblockTime+0x1>
    4a7e:	80 93 bc 13 	sts	0x13BC, r24	; 0x8013bc <xNextTaskUnblockTime>
    4a82:	0e c0       	rjmp	.+28     	; 0x4aa0 <prvResetNextTaskUnblockTime+0x42>
    4a84:	80 91 a5 13 	lds	r24, 0x13A5	; 0x8013a5 <pxDelayedTaskList>
    4a88:	90 91 a6 13 	lds	r25, 0x13A6	; 0x8013a6 <pxDelayedTaskList+0x1>
    4a8c:	fc 01       	movw	r30, r24
    4a8e:	85 81       	ldd	r24, Z+5	; 0x05
    4a90:	96 81       	ldd	r25, Z+6	; 0x06
    4a92:	fc 01       	movw	r30, r24
    4a94:	80 81       	ld	r24, Z
    4a96:	91 81       	ldd	r25, Z+1	; 0x01
    4a98:	90 93 bd 13 	sts	0x13BD, r25	; 0x8013bd <xNextTaskUnblockTime+0x1>
    4a9c:	80 93 bc 13 	sts	0x13BC, r24	; 0x8013bc <xNextTaskUnblockTime>
    4aa0:	00 00       	nop
    4aa2:	df 91       	pop	r29
    4aa4:	cf 91       	pop	r28
    4aa6:	08 95       	ret

00004aa8 <xTaskGetCurrentTaskHandle>:
    4aa8:	cf 93       	push	r28
    4aaa:	df 93       	push	r29
    4aac:	1f 92       	push	r1
    4aae:	1f 92       	push	r1
    4ab0:	cd b7       	in	r28, 0x3d	; 61
    4ab2:	de b7       	in	r29, 0x3e	; 62
    4ab4:	80 91 88 13 	lds	r24, 0x1388	; 0x801388 <pxCurrentTCB>
    4ab8:	90 91 89 13 	lds	r25, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    4abc:	9a 83       	std	Y+2, r25	; 0x02
    4abe:	89 83       	std	Y+1, r24	; 0x01
    4ac0:	89 81       	ldd	r24, Y+1	; 0x01
    4ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ac4:	0f 90       	pop	r0
    4ac6:	0f 90       	pop	r0
    4ac8:	df 91       	pop	r29
    4aca:	cf 91       	pop	r28
    4acc:	08 95       	ret

00004ace <xTaskGenericNotifyWait>:
    4ace:	cf 92       	push	r12
    4ad0:	df 92       	push	r13
    4ad2:	ef 92       	push	r14
    4ad4:	ff 92       	push	r15
    4ad6:	0f 93       	push	r16
    4ad8:	1f 93       	push	r17
    4ada:	cf 93       	push	r28
    4adc:	df 93       	push	r29
    4ade:	cd b7       	in	r28, 0x3d	; 61
    4ae0:	de b7       	in	r29, 0x3e	; 62
    4ae2:	2e 97       	sbiw	r28, 0x0e	; 14
    4ae4:	0f b6       	in	r0, 0x3f	; 63
    4ae6:	f8 94       	cli
    4ae8:	de bf       	out	0x3e, r29	; 62
    4aea:	0f be       	out	0x3f, r0	; 63
    4aec:	cd bf       	out	0x3d, r28	; 61
    4aee:	8a 83       	std	Y+2, r24	; 0x02
    4af0:	4b 83       	std	Y+3, r20	; 0x03
    4af2:	5c 83       	std	Y+4, r21	; 0x04
    4af4:	6d 83       	std	Y+5, r22	; 0x05
    4af6:	7e 83       	std	Y+6, r23	; 0x06
    4af8:	0f 83       	std	Y+7, r16	; 0x07
    4afa:	18 87       	std	Y+8, r17	; 0x08
    4afc:	29 87       	std	Y+9, r18	; 0x09
    4afe:	3a 87       	std	Y+10, r19	; 0x0a
    4b00:	fc 86       	std	Y+12, r15	; 0x0c
    4b02:	eb 86       	std	Y+11, r14	; 0x0b
    4b04:	de 86       	std	Y+14, r13	; 0x0e
    4b06:	cd 86       	std	Y+13, r12	; 0x0d
    4b08:	0f b6       	in	r0, 0x3f	; 63
    4b0a:	f8 94       	cli
    4b0c:	0f 92       	push	r0
    4b0e:	20 91 88 13 	lds	r18, 0x1388	; 0x801388 <pxCurrentTCB>
    4b12:	30 91 89 13 	lds	r19, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    4b16:	8a 81       	ldd	r24, Y+2	; 0x02
    4b18:	88 2f       	mov	r24, r24
    4b1a:	90 e0       	ldi	r25, 0x00	; 0
    4b1c:	82 0f       	add	r24, r18
    4b1e:	93 1f       	adc	r25, r19
    4b20:	85 96       	adiw	r24, 0x25	; 37
    4b22:	dc 01       	movw	r26, r24
    4b24:	8c 91       	ld	r24, X
    4b26:	82 30       	cpi	r24, 0x02	; 2
    4b28:	09 f4       	brne	.+2      	; 0x4b2c <xTaskGenericNotifyWait+0x5e>
    4b2a:	47 c0       	rjmp	.+142    	; 0x4bba <xTaskGenericNotifyWait+0xec>
    4b2c:	60 91 88 13 	lds	r22, 0x1388	; 0x801388 <pxCurrentTCB>
    4b30:	70 91 89 13 	lds	r23, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    4b34:	8a 81       	ldd	r24, Y+2	; 0x02
    4b36:	e8 2f       	mov	r30, r24
    4b38:	f0 e0       	ldi	r31, 0x00	; 0
    4b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b3c:	88 2f       	mov	r24, r24
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	88 0f       	add	r24, r24
    4b42:	99 1f       	adc	r25, r25
    4b44:	88 0f       	add	r24, r24
    4b46:	99 1f       	adc	r25, r25
    4b48:	86 0f       	add	r24, r22
    4b4a:	97 1f       	adc	r25, r23
    4b4c:	81 96       	adiw	r24, 0x21	; 33
    4b4e:	dc 01       	movw	r26, r24
    4b50:	2d 91       	ld	r18, X+
    4b52:	3d 91       	ld	r19, X+
    4b54:	4d 91       	ld	r20, X+
    4b56:	5c 91       	ld	r21, X
    4b58:	8b 81       	ldd	r24, Y+3	; 0x03
    4b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b5c:	ad 81       	ldd	r26, Y+5	; 0x05
    4b5e:	be 81       	ldd	r27, Y+6	; 0x06
    4b60:	80 95       	com	r24
    4b62:	90 95       	com	r25
    4b64:	a0 95       	com	r26
    4b66:	b0 95       	com	r27
    4b68:	82 23       	and	r24, r18
    4b6a:	93 23       	and	r25, r19
    4b6c:	a4 23       	and	r26, r20
    4b6e:	b5 23       	and	r27, r21
    4b70:	9f 01       	movw	r18, r30
    4b72:	22 0f       	add	r18, r18
    4b74:	33 1f       	adc	r19, r19
    4b76:	22 0f       	add	r18, r18
    4b78:	33 1f       	adc	r19, r19
    4b7a:	26 0f       	add	r18, r22
    4b7c:	37 1f       	adc	r19, r23
    4b7e:	2f 5d       	subi	r18, 0xDF	; 223
    4b80:	3f 4f       	sbci	r19, 0xFF	; 255
    4b82:	f9 01       	movw	r30, r18
    4b84:	80 83       	st	Z, r24
    4b86:	91 83       	std	Z+1, r25	; 0x01
    4b88:	a2 83       	std	Z+2, r26	; 0x02
    4b8a:	b3 83       	std	Z+3, r27	; 0x03
    4b8c:	20 91 88 13 	lds	r18, 0x1388	; 0x801388 <pxCurrentTCB>
    4b90:	30 91 89 13 	lds	r19, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    4b94:	8a 81       	ldd	r24, Y+2	; 0x02
    4b96:	88 2f       	mov	r24, r24
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	82 0f       	add	r24, r18
    4b9c:	93 1f       	adc	r25, r19
    4b9e:	85 96       	adiw	r24, 0x25	; 37
    4ba0:	21 e0       	ldi	r18, 0x01	; 1
    4ba2:	dc 01       	movw	r26, r24
    4ba4:	2c 93       	st	X, r18
    4ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4baa:	89 2b       	or	r24, r25
    4bac:	31 f0       	breq	.+12     	; 0x4bba <xTaskGenericNotifyWait+0xec>
    4bae:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bb2:	61 e0       	ldi	r22, 0x01	; 1
    4bb4:	5a d3       	rcall	.+1716   	; 0x526a <prvAddCurrentTaskToDelayedList>
    4bb6:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <vPortYield>
    4bba:	0f 90       	pop	r0
    4bbc:	0f be       	out	0x3f, r0	; 63
    4bbe:	0f b6       	in	r0, 0x3f	; 63
    4bc0:	f8 94       	cli
    4bc2:	0f 92       	push	r0
    4bc4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bc6:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bc8:	89 2b       	or	r24, r25
    4bca:	d1 f0       	breq	.+52     	; 0x4c00 <xTaskGenericNotifyWait+0x132>
    4bcc:	20 91 88 13 	lds	r18, 0x1388	; 0x801388 <pxCurrentTCB>
    4bd0:	30 91 89 13 	lds	r19, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    4bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    4bd6:	88 2f       	mov	r24, r24
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	88 0f       	add	r24, r24
    4bdc:	99 1f       	adc	r25, r25
    4bde:	88 0f       	add	r24, r24
    4be0:	99 1f       	adc	r25, r25
    4be2:	82 0f       	add	r24, r18
    4be4:	93 1f       	adc	r25, r19
    4be6:	81 96       	adiw	r24, 0x21	; 33
    4be8:	fc 01       	movw	r30, r24
    4bea:	80 81       	ld	r24, Z
    4bec:	91 81       	ldd	r25, Z+1	; 0x01
    4bee:	a2 81       	ldd	r26, Z+2	; 0x02
    4bf0:	b3 81       	ldd	r27, Z+3	; 0x03
    4bf2:	2b 85       	ldd	r18, Y+11	; 0x0b
    4bf4:	3c 85       	ldd	r19, Y+12	; 0x0c
    4bf6:	f9 01       	movw	r30, r18
    4bf8:	80 83       	st	Z, r24
    4bfa:	91 83       	std	Z+1, r25	; 0x01
    4bfc:	a2 83       	std	Z+2, r26	; 0x02
    4bfe:	b3 83       	std	Z+3, r27	; 0x03
    4c00:	20 91 88 13 	lds	r18, 0x1388	; 0x801388 <pxCurrentTCB>
    4c04:	30 91 89 13 	lds	r19, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    4c08:	8a 81       	ldd	r24, Y+2	; 0x02
    4c0a:	88 2f       	mov	r24, r24
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	82 0f       	add	r24, r18
    4c10:	93 1f       	adc	r25, r19
    4c12:	85 96       	adiw	r24, 0x25	; 37
    4c14:	dc 01       	movw	r26, r24
    4c16:	8c 91       	ld	r24, X
    4c18:	82 30       	cpi	r24, 0x02	; 2
    4c1a:	11 f0       	breq	.+4      	; 0x4c20 <xTaskGenericNotifyWait+0x152>
    4c1c:	19 82       	std	Y+1, r1	; 0x01
    4c1e:	32 c0       	rjmp	.+100    	; 0x4c84 <xTaskGenericNotifyWait+0x1b6>
    4c20:	60 91 88 13 	lds	r22, 0x1388	; 0x801388 <pxCurrentTCB>
    4c24:	70 91 89 13 	lds	r23, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    4c28:	8a 81       	ldd	r24, Y+2	; 0x02
    4c2a:	e8 2f       	mov	r30, r24
    4c2c:	f0 e0       	ldi	r31, 0x00	; 0
    4c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c30:	88 2f       	mov	r24, r24
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	88 0f       	add	r24, r24
    4c36:	99 1f       	adc	r25, r25
    4c38:	88 0f       	add	r24, r24
    4c3a:	99 1f       	adc	r25, r25
    4c3c:	86 0f       	add	r24, r22
    4c3e:	97 1f       	adc	r25, r23
    4c40:	81 96       	adiw	r24, 0x21	; 33
    4c42:	dc 01       	movw	r26, r24
    4c44:	2d 91       	ld	r18, X+
    4c46:	3d 91       	ld	r19, X+
    4c48:	4d 91       	ld	r20, X+
    4c4a:	5c 91       	ld	r21, X
    4c4c:	8f 81       	ldd	r24, Y+7	; 0x07
    4c4e:	98 85       	ldd	r25, Y+8	; 0x08
    4c50:	a9 85       	ldd	r26, Y+9	; 0x09
    4c52:	ba 85       	ldd	r27, Y+10	; 0x0a
    4c54:	80 95       	com	r24
    4c56:	90 95       	com	r25
    4c58:	a0 95       	com	r26
    4c5a:	b0 95       	com	r27
    4c5c:	82 23       	and	r24, r18
    4c5e:	93 23       	and	r25, r19
    4c60:	a4 23       	and	r26, r20
    4c62:	b5 23       	and	r27, r21
    4c64:	9f 01       	movw	r18, r30
    4c66:	22 0f       	add	r18, r18
    4c68:	33 1f       	adc	r19, r19
    4c6a:	22 0f       	add	r18, r18
    4c6c:	33 1f       	adc	r19, r19
    4c6e:	26 0f       	add	r18, r22
    4c70:	37 1f       	adc	r19, r23
    4c72:	2f 5d       	subi	r18, 0xDF	; 223
    4c74:	3f 4f       	sbci	r19, 0xFF	; 255
    4c76:	f9 01       	movw	r30, r18
    4c78:	80 83       	st	Z, r24
    4c7a:	91 83       	std	Z+1, r25	; 0x01
    4c7c:	a2 83       	std	Z+2, r26	; 0x02
    4c7e:	b3 83       	std	Z+3, r27	; 0x03
    4c80:	81 e0       	ldi	r24, 0x01	; 1
    4c82:	89 83       	std	Y+1, r24	; 0x01
    4c84:	20 91 88 13 	lds	r18, 0x1388	; 0x801388 <pxCurrentTCB>
    4c88:	30 91 89 13 	lds	r19, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    4c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c8e:	88 2f       	mov	r24, r24
    4c90:	90 e0       	ldi	r25, 0x00	; 0
    4c92:	82 0f       	add	r24, r18
    4c94:	93 1f       	adc	r25, r19
    4c96:	85 96       	adiw	r24, 0x25	; 37
    4c98:	dc 01       	movw	r26, r24
    4c9a:	1c 92       	st	X, r1
    4c9c:	0f 90       	pop	r0
    4c9e:	0f be       	out	0x3f, r0	; 63
    4ca0:	89 81       	ldd	r24, Y+1	; 0x01
    4ca2:	2e 96       	adiw	r28, 0x0e	; 14
    4ca4:	0f b6       	in	r0, 0x3f	; 63
    4ca6:	f8 94       	cli
    4ca8:	de bf       	out	0x3e, r29	; 62
    4caa:	0f be       	out	0x3f, r0	; 63
    4cac:	cd bf       	out	0x3d, r28	; 61
    4cae:	df 91       	pop	r29
    4cb0:	cf 91       	pop	r28
    4cb2:	1f 91       	pop	r17
    4cb4:	0f 91       	pop	r16
    4cb6:	ff 90       	pop	r15
    4cb8:	ef 90       	pop	r14
    4cba:	df 90       	pop	r13
    4cbc:	cf 90       	pop	r12
    4cbe:	08 95       	ret

00004cc0 <xTaskGenericNotify>:
    4cc0:	ef 92       	push	r14
    4cc2:	ff 92       	push	r15
    4cc4:	0f 93       	push	r16
    4cc6:	cf 93       	push	r28
    4cc8:	df 93       	push	r29
    4cca:	cd b7       	in	r28, 0x3d	; 61
    4ccc:	de b7       	in	r29, 0x3e	; 62
    4cce:	2e 97       	sbiw	r28, 0x0e	; 14
    4cd0:	0f b6       	in	r0, 0x3f	; 63
    4cd2:	f8 94       	cli
    4cd4:	de bf       	out	0x3e, r29	; 62
    4cd6:	0f be       	out	0x3f, r0	; 63
    4cd8:	cd bf       	out	0x3d, r28	; 61
    4cda:	9e 83       	std	Y+6, r25	; 0x06
    4cdc:	8d 83       	std	Y+5, r24	; 0x05
    4cde:	6f 83       	std	Y+7, r22	; 0x07
    4ce0:	28 87       	std	Y+8, r18	; 0x08
    4ce2:	39 87       	std	Y+9, r19	; 0x09
    4ce4:	4a 87       	std	Y+10, r20	; 0x0a
    4ce6:	5b 87       	std	Y+11, r21	; 0x0b
    4ce8:	0c 87       	std	Y+12, r16	; 0x0c
    4cea:	fe 86       	std	Y+14, r15	; 0x0e
    4cec:	ed 86       	std	Y+13, r14	; 0x0d
    4cee:	81 e0       	ldi	r24, 0x01	; 1
    4cf0:	89 83       	std	Y+1, r24	; 0x01
    4cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    4cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    4cf6:	9b 83       	std	Y+3, r25	; 0x03
    4cf8:	8a 83       	std	Y+2, r24	; 0x02
    4cfa:	0f b6       	in	r0, 0x3f	; 63
    4cfc:	f8 94       	cli
    4cfe:	0f 92       	push	r0
    4d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d04:	89 2b       	or	r24, r25
    4d06:	c1 f0       	breq	.+48     	; 0x4d38 <xTaskGenericNotify+0x78>
    4d08:	8f 81       	ldd	r24, Y+7	; 0x07
    4d0a:	88 2f       	mov	r24, r24
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	2a 81       	ldd	r18, Y+2	; 0x02
    4d10:	3b 81       	ldd	r19, Y+3	; 0x03
    4d12:	88 0f       	add	r24, r24
    4d14:	99 1f       	adc	r25, r25
    4d16:	88 0f       	add	r24, r24
    4d18:	99 1f       	adc	r25, r25
    4d1a:	82 0f       	add	r24, r18
    4d1c:	93 1f       	adc	r25, r19
    4d1e:	81 96       	adiw	r24, 0x21	; 33
    4d20:	fc 01       	movw	r30, r24
    4d22:	80 81       	ld	r24, Z
    4d24:	91 81       	ldd	r25, Z+1	; 0x01
    4d26:	a2 81       	ldd	r26, Z+2	; 0x02
    4d28:	b3 81       	ldd	r27, Z+3	; 0x03
    4d2a:	2d 85       	ldd	r18, Y+13	; 0x0d
    4d2c:	3e 85       	ldd	r19, Y+14	; 0x0e
    4d2e:	f9 01       	movw	r30, r18
    4d30:	80 83       	st	Z, r24
    4d32:	91 83       	std	Z+1, r25	; 0x01
    4d34:	a2 83       	std	Z+2, r26	; 0x02
    4d36:	b3 83       	std	Z+3, r27	; 0x03
    4d38:	8f 81       	ldd	r24, Y+7	; 0x07
    4d3a:	88 2f       	mov	r24, r24
    4d3c:	90 e0       	ldi	r25, 0x00	; 0
    4d3e:	2a 81       	ldd	r18, Y+2	; 0x02
    4d40:	3b 81       	ldd	r19, Y+3	; 0x03
    4d42:	82 0f       	add	r24, r18
    4d44:	93 1f       	adc	r25, r19
    4d46:	85 96       	adiw	r24, 0x25	; 37
    4d48:	fc 01       	movw	r30, r24
    4d4a:	80 81       	ld	r24, Z
    4d4c:	8c 83       	std	Y+4, r24	; 0x04
    4d4e:	8f 81       	ldd	r24, Y+7	; 0x07
    4d50:	88 2f       	mov	r24, r24
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	2a 81       	ldd	r18, Y+2	; 0x02
    4d56:	3b 81       	ldd	r19, Y+3	; 0x03
    4d58:	82 0f       	add	r24, r18
    4d5a:	93 1f       	adc	r25, r19
    4d5c:	85 96       	adiw	r24, 0x25	; 37
    4d5e:	22 e0       	ldi	r18, 0x02	; 2
    4d60:	fc 01       	movw	r30, r24
    4d62:	20 83       	st	Z, r18
    4d64:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d66:	88 2f       	mov	r24, r24
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	82 30       	cpi	r24, 0x02	; 2
    4d6c:	91 05       	cpc	r25, r1
    4d6e:	09 f4       	brne	.+2      	; 0x4d72 <xTaskGenericNotify+0xb2>
    4d70:	3e c0       	rjmp	.+124    	; 0x4dee <xTaskGenericNotify+0x12e>
    4d72:	83 30       	cpi	r24, 0x03	; 3
    4d74:	91 05       	cpc	r25, r1
    4d76:	34 f4       	brge	.+12     	; 0x4d84 <xTaskGenericNotify+0xc4>
    4d78:	00 97       	sbiw	r24, 0x00	; 0
    4d7a:	09 f4       	brne	.+2      	; 0x4d7e <xTaskGenericNotify+0xbe>
    4d7c:	92 c0       	rjmp	.+292    	; 0x4ea2 <xTaskGenericNotify+0x1e2>
    4d7e:	01 97       	sbiw	r24, 0x01	; 1
    4d80:	49 f0       	breq	.+18     	; 0x4d94 <xTaskGenericNotify+0xd4>
    4d82:	90 c0       	rjmp	.+288    	; 0x4ea4 <xTaskGenericNotify+0x1e4>
    4d84:	83 30       	cpi	r24, 0x03	; 3
    4d86:	91 05       	cpc	r25, r1
    4d88:	09 f4       	brne	.+2      	; 0x4d8c <xTaskGenericNotify+0xcc>
    4d8a:	56 c0       	rjmp	.+172    	; 0x4e38 <xTaskGenericNotify+0x178>
    4d8c:	04 97       	sbiw	r24, 0x04	; 4
    4d8e:	09 f4       	brne	.+2      	; 0x4d92 <xTaskGenericNotify+0xd2>
    4d90:	6b c0       	rjmp	.+214    	; 0x4e68 <xTaskGenericNotify+0x1a8>
    4d92:	88 c0       	rjmp	.+272    	; 0x4ea4 <xTaskGenericNotify+0x1e4>
    4d94:	8f 81       	ldd	r24, Y+7	; 0x07
    4d96:	68 2f       	mov	r22, r24
    4d98:	70 e0       	ldi	r23, 0x00	; 0
    4d9a:	8f 81       	ldd	r24, Y+7	; 0x07
    4d9c:	88 2f       	mov	r24, r24
    4d9e:	90 e0       	ldi	r25, 0x00	; 0
    4da0:	2a 81       	ldd	r18, Y+2	; 0x02
    4da2:	3b 81       	ldd	r19, Y+3	; 0x03
    4da4:	88 0f       	add	r24, r24
    4da6:	99 1f       	adc	r25, r25
    4da8:	88 0f       	add	r24, r24
    4daa:	99 1f       	adc	r25, r25
    4dac:	82 0f       	add	r24, r18
    4dae:	93 1f       	adc	r25, r19
    4db0:	81 96       	adiw	r24, 0x21	; 33
    4db2:	fc 01       	movw	r30, r24
    4db4:	20 81       	ld	r18, Z
    4db6:	31 81       	ldd	r19, Z+1	; 0x01
    4db8:	42 81       	ldd	r20, Z+2	; 0x02
    4dba:	53 81       	ldd	r21, Z+3	; 0x03
    4dbc:	88 85       	ldd	r24, Y+8	; 0x08
    4dbe:	99 85       	ldd	r25, Y+9	; 0x09
    4dc0:	aa 85       	ldd	r26, Y+10	; 0x0a
    4dc2:	bb 85       	ldd	r27, Y+11	; 0x0b
    4dc4:	82 2b       	or	r24, r18
    4dc6:	93 2b       	or	r25, r19
    4dc8:	a4 2b       	or	r26, r20
    4dca:	b5 2b       	or	r27, r21
    4dcc:	4a 81       	ldd	r20, Y+2	; 0x02
    4dce:	5b 81       	ldd	r21, Y+3	; 0x03
    4dd0:	9b 01       	movw	r18, r22
    4dd2:	22 0f       	add	r18, r18
    4dd4:	33 1f       	adc	r19, r19
    4dd6:	22 0f       	add	r18, r18
    4dd8:	33 1f       	adc	r19, r19
    4dda:	24 0f       	add	r18, r20
    4ddc:	35 1f       	adc	r19, r21
    4dde:	2f 5d       	subi	r18, 0xDF	; 223
    4de0:	3f 4f       	sbci	r19, 0xFF	; 255
    4de2:	f9 01       	movw	r30, r18
    4de4:	80 83       	st	Z, r24
    4de6:	91 83       	std	Z+1, r25	; 0x01
    4de8:	a2 83       	std	Z+2, r26	; 0x02
    4dea:	b3 83       	std	Z+3, r27	; 0x03
    4dec:	5b c0       	rjmp	.+182    	; 0x4ea4 <xTaskGenericNotify+0x1e4>
    4dee:	8f 81       	ldd	r24, Y+7	; 0x07
    4df0:	28 2f       	mov	r18, r24
    4df2:	30 e0       	ldi	r19, 0x00	; 0
    4df4:	4a 81       	ldd	r20, Y+2	; 0x02
    4df6:	5b 81       	ldd	r21, Y+3	; 0x03
    4df8:	c9 01       	movw	r24, r18
    4dfa:	88 0f       	add	r24, r24
    4dfc:	99 1f       	adc	r25, r25
    4dfe:	88 0f       	add	r24, r24
    4e00:	99 1f       	adc	r25, r25
    4e02:	84 0f       	add	r24, r20
    4e04:	95 1f       	adc	r25, r21
    4e06:	81 96       	adiw	r24, 0x21	; 33
    4e08:	fc 01       	movw	r30, r24
    4e0a:	80 81       	ld	r24, Z
    4e0c:	91 81       	ldd	r25, Z+1	; 0x01
    4e0e:	a2 81       	ldd	r26, Z+2	; 0x02
    4e10:	b3 81       	ldd	r27, Z+3	; 0x03
    4e12:	01 96       	adiw	r24, 0x01	; 1
    4e14:	a1 1d       	adc	r26, r1
    4e16:	b1 1d       	adc	r27, r1
    4e18:	4a 81       	ldd	r20, Y+2	; 0x02
    4e1a:	5b 81       	ldd	r21, Y+3	; 0x03
    4e1c:	22 0f       	add	r18, r18
    4e1e:	33 1f       	adc	r19, r19
    4e20:	22 0f       	add	r18, r18
    4e22:	33 1f       	adc	r19, r19
    4e24:	24 0f       	add	r18, r20
    4e26:	35 1f       	adc	r19, r21
    4e28:	2f 5d       	subi	r18, 0xDF	; 223
    4e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e2c:	f9 01       	movw	r30, r18
    4e2e:	80 83       	st	Z, r24
    4e30:	91 83       	std	Z+1, r25	; 0x01
    4e32:	a2 83       	std	Z+2, r26	; 0x02
    4e34:	b3 83       	std	Z+3, r27	; 0x03
    4e36:	36 c0       	rjmp	.+108    	; 0x4ea4 <xTaskGenericNotify+0x1e4>
    4e38:	8f 81       	ldd	r24, Y+7	; 0x07
    4e3a:	88 2f       	mov	r24, r24
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	2a 81       	ldd	r18, Y+2	; 0x02
    4e40:	3b 81       	ldd	r19, Y+3	; 0x03
    4e42:	88 0f       	add	r24, r24
    4e44:	99 1f       	adc	r25, r25
    4e46:	88 0f       	add	r24, r24
    4e48:	99 1f       	adc	r25, r25
    4e4a:	82 0f       	add	r24, r18
    4e4c:	93 1f       	adc	r25, r19
    4e4e:	9c 01       	movw	r18, r24
    4e50:	2f 5d       	subi	r18, 0xDF	; 223
    4e52:	3f 4f       	sbci	r19, 0xFF	; 255
    4e54:	88 85       	ldd	r24, Y+8	; 0x08
    4e56:	99 85       	ldd	r25, Y+9	; 0x09
    4e58:	aa 85       	ldd	r26, Y+10	; 0x0a
    4e5a:	bb 85       	ldd	r27, Y+11	; 0x0b
    4e5c:	f9 01       	movw	r30, r18
    4e5e:	80 83       	st	Z, r24
    4e60:	91 83       	std	Z+1, r25	; 0x01
    4e62:	a2 83       	std	Z+2, r26	; 0x02
    4e64:	b3 83       	std	Z+3, r27	; 0x03
    4e66:	1e c0       	rjmp	.+60     	; 0x4ea4 <xTaskGenericNotify+0x1e4>
    4e68:	8c 81       	ldd	r24, Y+4	; 0x04
    4e6a:	82 30       	cpi	r24, 0x02	; 2
    4e6c:	c1 f0       	breq	.+48     	; 0x4e9e <xTaskGenericNotify+0x1de>
    4e6e:	8f 81       	ldd	r24, Y+7	; 0x07
    4e70:	88 2f       	mov	r24, r24
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	2a 81       	ldd	r18, Y+2	; 0x02
    4e76:	3b 81       	ldd	r19, Y+3	; 0x03
    4e78:	88 0f       	add	r24, r24
    4e7a:	99 1f       	adc	r25, r25
    4e7c:	88 0f       	add	r24, r24
    4e7e:	99 1f       	adc	r25, r25
    4e80:	82 0f       	add	r24, r18
    4e82:	93 1f       	adc	r25, r19
    4e84:	9c 01       	movw	r18, r24
    4e86:	2f 5d       	subi	r18, 0xDF	; 223
    4e88:	3f 4f       	sbci	r19, 0xFF	; 255
    4e8a:	88 85       	ldd	r24, Y+8	; 0x08
    4e8c:	99 85       	ldd	r25, Y+9	; 0x09
    4e8e:	aa 85       	ldd	r26, Y+10	; 0x0a
    4e90:	bb 85       	ldd	r27, Y+11	; 0x0b
    4e92:	f9 01       	movw	r30, r18
    4e94:	80 83       	st	Z, r24
    4e96:	91 83       	std	Z+1, r25	; 0x01
    4e98:	a2 83       	std	Z+2, r26	; 0x02
    4e9a:	b3 83       	std	Z+3, r27	; 0x03
    4e9c:	03 c0       	rjmp	.+6      	; 0x4ea4 <xTaskGenericNotify+0x1e4>
    4e9e:	19 82       	std	Y+1, r1	; 0x01
    4ea0:	01 c0       	rjmp	.+2      	; 0x4ea4 <xTaskGenericNotify+0x1e4>
    4ea2:	00 00       	nop
    4ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ea6:	81 30       	cpi	r24, 0x01	; 1
    4ea8:	d1 f5       	brne	.+116    	; 0x4f1e <xTaskGenericNotify+0x25e>
    4eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    4eac:	9b 81       	ldd	r25, Y+3	; 0x03
    4eae:	02 96       	adiw	r24, 0x02	; 2
    4eb0:	0e 94 aa 14 	call	0x2954	; 0x2954 <uxListRemove>
    4eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    4eb8:	fc 01       	movw	r30, r24
    4eba:	96 89       	ldd	r25, Z+22	; 0x16
    4ebc:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    4ec0:	89 17       	cp	r24, r25
    4ec2:	30 f4       	brcc	.+12     	; 0x4ed0 <xTaskGenericNotify+0x210>
    4ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ec8:	fc 01       	movw	r30, r24
    4eca:	86 89       	ldd	r24, Z+22	; 0x16
    4ecc:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <uxTopReadyPriority>
    4ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ed4:	ac 01       	movw	r20, r24
    4ed6:	4e 5f       	subi	r20, 0xFE	; 254
    4ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    4eda:	8a 81       	ldd	r24, Y+2	; 0x02
    4edc:	9b 81       	ldd	r25, Y+3	; 0x03
    4ede:	fc 01       	movw	r30, r24
    4ee0:	86 89       	ldd	r24, Z+22	; 0x16
    4ee2:	28 2f       	mov	r18, r24
    4ee4:	30 e0       	ldi	r19, 0x00	; 0
    4ee6:	c9 01       	movw	r24, r18
    4ee8:	88 0f       	add	r24, r24
    4eea:	99 1f       	adc	r25, r25
    4eec:	88 0f       	add	r24, r24
    4eee:	99 1f       	adc	r25, r25
    4ef0:	88 0f       	add	r24, r24
    4ef2:	99 1f       	adc	r25, r25
    4ef4:	82 0f       	add	r24, r18
    4ef6:	93 1f       	adc	r25, r19
    4ef8:	86 57       	subi	r24, 0x76	; 118
    4efa:	9c 4e       	sbci	r25, 0xEC	; 236
    4efc:	ba 01       	movw	r22, r20
    4efe:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <vListInsertEnd>
    4f02:	8a 81       	ldd	r24, Y+2	; 0x02
    4f04:	9b 81       	ldd	r25, Y+3	; 0x03
    4f06:	fc 01       	movw	r30, r24
    4f08:	26 89       	ldd	r18, Z+22	; 0x16
    4f0a:	80 91 88 13 	lds	r24, 0x1388	; 0x801388 <pxCurrentTCB>
    4f0e:	90 91 89 13 	lds	r25, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    4f12:	fc 01       	movw	r30, r24
    4f14:	86 89       	ldd	r24, Z+22	; 0x16
    4f16:	82 17       	cp	r24, r18
    4f18:	10 f4       	brcc	.+4      	; 0x4f1e <xTaskGenericNotify+0x25e>
    4f1a:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <vPortYield>
    4f1e:	0f 90       	pop	r0
    4f20:	0f be       	out	0x3f, r0	; 63
    4f22:	89 81       	ldd	r24, Y+1	; 0x01
    4f24:	2e 96       	adiw	r28, 0x0e	; 14
    4f26:	0f b6       	in	r0, 0x3f	; 63
    4f28:	f8 94       	cli
    4f2a:	de bf       	out	0x3e, r29	; 62
    4f2c:	0f be       	out	0x3f, r0	; 63
    4f2e:	cd bf       	out	0x3d, r28	; 61
    4f30:	df 91       	pop	r29
    4f32:	cf 91       	pop	r28
    4f34:	0f 91       	pop	r16
    4f36:	ff 90       	pop	r15
    4f38:	ef 90       	pop	r14
    4f3a:	08 95       	ret

00004f3c <xTaskGenericNotifyFromISR>:
    4f3c:	cf 92       	push	r12
    4f3e:	df 92       	push	r13
    4f40:	ef 92       	push	r14
    4f42:	ff 92       	push	r15
    4f44:	0f 93       	push	r16
    4f46:	cf 93       	push	r28
    4f48:	df 93       	push	r29
    4f4a:	cd b7       	in	r28, 0x3d	; 61
    4f4c:	de b7       	in	r29, 0x3e	; 62
    4f4e:	61 97       	sbiw	r28, 0x11	; 17
    4f50:	0f b6       	in	r0, 0x3f	; 63
    4f52:	f8 94       	cli
    4f54:	de bf       	out	0x3e, r29	; 62
    4f56:	0f be       	out	0x3f, r0	; 63
    4f58:	cd bf       	out	0x3d, r28	; 61
    4f5a:	9f 83       	std	Y+7, r25	; 0x07
    4f5c:	8e 83       	std	Y+6, r24	; 0x06
    4f5e:	68 87       	std	Y+8, r22	; 0x08
    4f60:	29 87       	std	Y+9, r18	; 0x09
    4f62:	3a 87       	std	Y+10, r19	; 0x0a
    4f64:	4b 87       	std	Y+11, r20	; 0x0b
    4f66:	5c 87       	std	Y+12, r21	; 0x0c
    4f68:	0d 87       	std	Y+13, r16	; 0x0d
    4f6a:	ff 86       	std	Y+15, r15	; 0x0f
    4f6c:	ee 86       	std	Y+14, r14	; 0x0e
    4f6e:	d9 8a       	std	Y+17, r13	; 0x11
    4f70:	c8 8a       	std	Y+16, r12	; 0x10
    4f72:	81 e0       	ldi	r24, 0x01	; 1
    4f74:	89 83       	std	Y+1, r24	; 0x01
    4f76:	8e 81       	ldd	r24, Y+6	; 0x06
    4f78:	9f 81       	ldd	r25, Y+7	; 0x07
    4f7a:	9b 83       	std	Y+3, r25	; 0x03
    4f7c:	8a 83       	std	Y+2, r24	; 0x02
    4f7e:	1c 82       	std	Y+4, r1	; 0x04
    4f80:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f82:	9f 85       	ldd	r25, Y+15	; 0x0f
    4f84:	89 2b       	or	r24, r25
    4f86:	c1 f0       	breq	.+48     	; 0x4fb8 <xTaskGenericNotifyFromISR+0x7c>
    4f88:	88 85       	ldd	r24, Y+8	; 0x08
    4f8a:	88 2f       	mov	r24, r24
    4f8c:	90 e0       	ldi	r25, 0x00	; 0
    4f8e:	2a 81       	ldd	r18, Y+2	; 0x02
    4f90:	3b 81       	ldd	r19, Y+3	; 0x03
    4f92:	88 0f       	add	r24, r24
    4f94:	99 1f       	adc	r25, r25
    4f96:	88 0f       	add	r24, r24
    4f98:	99 1f       	adc	r25, r25
    4f9a:	82 0f       	add	r24, r18
    4f9c:	93 1f       	adc	r25, r19
    4f9e:	81 96       	adiw	r24, 0x21	; 33
    4fa0:	fc 01       	movw	r30, r24
    4fa2:	80 81       	ld	r24, Z
    4fa4:	91 81       	ldd	r25, Z+1	; 0x01
    4fa6:	a2 81       	ldd	r26, Z+2	; 0x02
    4fa8:	b3 81       	ldd	r27, Z+3	; 0x03
    4faa:	2e 85       	ldd	r18, Y+14	; 0x0e
    4fac:	3f 85       	ldd	r19, Y+15	; 0x0f
    4fae:	f9 01       	movw	r30, r18
    4fb0:	80 83       	st	Z, r24
    4fb2:	91 83       	std	Z+1, r25	; 0x01
    4fb4:	a2 83       	std	Z+2, r26	; 0x02
    4fb6:	b3 83       	std	Z+3, r27	; 0x03
    4fb8:	88 85       	ldd	r24, Y+8	; 0x08
    4fba:	88 2f       	mov	r24, r24
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	2a 81       	ldd	r18, Y+2	; 0x02
    4fc0:	3b 81       	ldd	r19, Y+3	; 0x03
    4fc2:	82 0f       	add	r24, r18
    4fc4:	93 1f       	adc	r25, r19
    4fc6:	85 96       	adiw	r24, 0x25	; 37
    4fc8:	fc 01       	movw	r30, r24
    4fca:	80 81       	ld	r24, Z
    4fcc:	8d 83       	std	Y+5, r24	; 0x05
    4fce:	88 85       	ldd	r24, Y+8	; 0x08
    4fd0:	88 2f       	mov	r24, r24
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	2a 81       	ldd	r18, Y+2	; 0x02
    4fd6:	3b 81       	ldd	r19, Y+3	; 0x03
    4fd8:	82 0f       	add	r24, r18
    4fda:	93 1f       	adc	r25, r19
    4fdc:	85 96       	adiw	r24, 0x25	; 37
    4fde:	22 e0       	ldi	r18, 0x02	; 2
    4fe0:	fc 01       	movw	r30, r24
    4fe2:	20 83       	st	Z, r18
    4fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fe6:	88 2f       	mov	r24, r24
    4fe8:	90 e0       	ldi	r25, 0x00	; 0
    4fea:	82 30       	cpi	r24, 0x02	; 2
    4fec:	91 05       	cpc	r25, r1
    4fee:	09 f4       	brne	.+2      	; 0x4ff2 <xTaskGenericNotifyFromISR+0xb6>
    4ff0:	3e c0       	rjmp	.+124    	; 0x506e <xTaskGenericNotifyFromISR+0x132>
    4ff2:	83 30       	cpi	r24, 0x03	; 3
    4ff4:	91 05       	cpc	r25, r1
    4ff6:	34 f4       	brge	.+12     	; 0x5004 <xTaskGenericNotifyFromISR+0xc8>
    4ff8:	00 97       	sbiw	r24, 0x00	; 0
    4ffa:	09 f4       	brne	.+2      	; 0x4ffe <xTaskGenericNotifyFromISR+0xc2>
    4ffc:	92 c0       	rjmp	.+292    	; 0x5122 <xTaskGenericNotifyFromISR+0x1e6>
    4ffe:	01 97       	sbiw	r24, 0x01	; 1
    5000:	49 f0       	breq	.+18     	; 0x5014 <xTaskGenericNotifyFromISR+0xd8>
    5002:	90 c0       	rjmp	.+288    	; 0x5124 <xTaskGenericNotifyFromISR+0x1e8>
    5004:	83 30       	cpi	r24, 0x03	; 3
    5006:	91 05       	cpc	r25, r1
    5008:	09 f4       	brne	.+2      	; 0x500c <xTaskGenericNotifyFromISR+0xd0>
    500a:	56 c0       	rjmp	.+172    	; 0x50b8 <xTaskGenericNotifyFromISR+0x17c>
    500c:	04 97       	sbiw	r24, 0x04	; 4
    500e:	09 f4       	brne	.+2      	; 0x5012 <xTaskGenericNotifyFromISR+0xd6>
    5010:	6b c0       	rjmp	.+214    	; 0x50e8 <xTaskGenericNotifyFromISR+0x1ac>
    5012:	88 c0       	rjmp	.+272    	; 0x5124 <xTaskGenericNotifyFromISR+0x1e8>
    5014:	88 85       	ldd	r24, Y+8	; 0x08
    5016:	68 2f       	mov	r22, r24
    5018:	70 e0       	ldi	r23, 0x00	; 0
    501a:	88 85       	ldd	r24, Y+8	; 0x08
    501c:	88 2f       	mov	r24, r24
    501e:	90 e0       	ldi	r25, 0x00	; 0
    5020:	2a 81       	ldd	r18, Y+2	; 0x02
    5022:	3b 81       	ldd	r19, Y+3	; 0x03
    5024:	88 0f       	add	r24, r24
    5026:	99 1f       	adc	r25, r25
    5028:	88 0f       	add	r24, r24
    502a:	99 1f       	adc	r25, r25
    502c:	82 0f       	add	r24, r18
    502e:	93 1f       	adc	r25, r19
    5030:	81 96       	adiw	r24, 0x21	; 33
    5032:	fc 01       	movw	r30, r24
    5034:	20 81       	ld	r18, Z
    5036:	31 81       	ldd	r19, Z+1	; 0x01
    5038:	42 81       	ldd	r20, Z+2	; 0x02
    503a:	53 81       	ldd	r21, Z+3	; 0x03
    503c:	89 85       	ldd	r24, Y+9	; 0x09
    503e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5040:	ab 85       	ldd	r26, Y+11	; 0x0b
    5042:	bc 85       	ldd	r27, Y+12	; 0x0c
    5044:	82 2b       	or	r24, r18
    5046:	93 2b       	or	r25, r19
    5048:	a4 2b       	or	r26, r20
    504a:	b5 2b       	or	r27, r21
    504c:	4a 81       	ldd	r20, Y+2	; 0x02
    504e:	5b 81       	ldd	r21, Y+3	; 0x03
    5050:	9b 01       	movw	r18, r22
    5052:	22 0f       	add	r18, r18
    5054:	33 1f       	adc	r19, r19
    5056:	22 0f       	add	r18, r18
    5058:	33 1f       	adc	r19, r19
    505a:	24 0f       	add	r18, r20
    505c:	35 1f       	adc	r19, r21
    505e:	2f 5d       	subi	r18, 0xDF	; 223
    5060:	3f 4f       	sbci	r19, 0xFF	; 255
    5062:	f9 01       	movw	r30, r18
    5064:	80 83       	st	Z, r24
    5066:	91 83       	std	Z+1, r25	; 0x01
    5068:	a2 83       	std	Z+2, r26	; 0x02
    506a:	b3 83       	std	Z+3, r27	; 0x03
    506c:	5b c0       	rjmp	.+182    	; 0x5124 <xTaskGenericNotifyFromISR+0x1e8>
    506e:	88 85       	ldd	r24, Y+8	; 0x08
    5070:	28 2f       	mov	r18, r24
    5072:	30 e0       	ldi	r19, 0x00	; 0
    5074:	4a 81       	ldd	r20, Y+2	; 0x02
    5076:	5b 81       	ldd	r21, Y+3	; 0x03
    5078:	c9 01       	movw	r24, r18
    507a:	88 0f       	add	r24, r24
    507c:	99 1f       	adc	r25, r25
    507e:	88 0f       	add	r24, r24
    5080:	99 1f       	adc	r25, r25
    5082:	84 0f       	add	r24, r20
    5084:	95 1f       	adc	r25, r21
    5086:	81 96       	adiw	r24, 0x21	; 33
    5088:	fc 01       	movw	r30, r24
    508a:	80 81       	ld	r24, Z
    508c:	91 81       	ldd	r25, Z+1	; 0x01
    508e:	a2 81       	ldd	r26, Z+2	; 0x02
    5090:	b3 81       	ldd	r27, Z+3	; 0x03
    5092:	01 96       	adiw	r24, 0x01	; 1
    5094:	a1 1d       	adc	r26, r1
    5096:	b1 1d       	adc	r27, r1
    5098:	4a 81       	ldd	r20, Y+2	; 0x02
    509a:	5b 81       	ldd	r21, Y+3	; 0x03
    509c:	22 0f       	add	r18, r18
    509e:	33 1f       	adc	r19, r19
    50a0:	22 0f       	add	r18, r18
    50a2:	33 1f       	adc	r19, r19
    50a4:	24 0f       	add	r18, r20
    50a6:	35 1f       	adc	r19, r21
    50a8:	2f 5d       	subi	r18, 0xDF	; 223
    50aa:	3f 4f       	sbci	r19, 0xFF	; 255
    50ac:	f9 01       	movw	r30, r18
    50ae:	80 83       	st	Z, r24
    50b0:	91 83       	std	Z+1, r25	; 0x01
    50b2:	a2 83       	std	Z+2, r26	; 0x02
    50b4:	b3 83       	std	Z+3, r27	; 0x03
    50b6:	36 c0       	rjmp	.+108    	; 0x5124 <xTaskGenericNotifyFromISR+0x1e8>
    50b8:	88 85       	ldd	r24, Y+8	; 0x08
    50ba:	88 2f       	mov	r24, r24
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	2a 81       	ldd	r18, Y+2	; 0x02
    50c0:	3b 81       	ldd	r19, Y+3	; 0x03
    50c2:	88 0f       	add	r24, r24
    50c4:	99 1f       	adc	r25, r25
    50c6:	88 0f       	add	r24, r24
    50c8:	99 1f       	adc	r25, r25
    50ca:	82 0f       	add	r24, r18
    50cc:	93 1f       	adc	r25, r19
    50ce:	9c 01       	movw	r18, r24
    50d0:	2f 5d       	subi	r18, 0xDF	; 223
    50d2:	3f 4f       	sbci	r19, 0xFF	; 255
    50d4:	89 85       	ldd	r24, Y+9	; 0x09
    50d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    50d8:	ab 85       	ldd	r26, Y+11	; 0x0b
    50da:	bc 85       	ldd	r27, Y+12	; 0x0c
    50dc:	f9 01       	movw	r30, r18
    50de:	80 83       	st	Z, r24
    50e0:	91 83       	std	Z+1, r25	; 0x01
    50e2:	a2 83       	std	Z+2, r26	; 0x02
    50e4:	b3 83       	std	Z+3, r27	; 0x03
    50e6:	1e c0       	rjmp	.+60     	; 0x5124 <xTaskGenericNotifyFromISR+0x1e8>
    50e8:	8d 81       	ldd	r24, Y+5	; 0x05
    50ea:	82 30       	cpi	r24, 0x02	; 2
    50ec:	c1 f0       	breq	.+48     	; 0x511e <xTaskGenericNotifyFromISR+0x1e2>
    50ee:	88 85       	ldd	r24, Y+8	; 0x08
    50f0:	88 2f       	mov	r24, r24
    50f2:	90 e0       	ldi	r25, 0x00	; 0
    50f4:	2a 81       	ldd	r18, Y+2	; 0x02
    50f6:	3b 81       	ldd	r19, Y+3	; 0x03
    50f8:	88 0f       	add	r24, r24
    50fa:	99 1f       	adc	r25, r25
    50fc:	88 0f       	add	r24, r24
    50fe:	99 1f       	adc	r25, r25
    5100:	82 0f       	add	r24, r18
    5102:	93 1f       	adc	r25, r19
    5104:	9c 01       	movw	r18, r24
    5106:	2f 5d       	subi	r18, 0xDF	; 223
    5108:	3f 4f       	sbci	r19, 0xFF	; 255
    510a:	89 85       	ldd	r24, Y+9	; 0x09
    510c:	9a 85       	ldd	r25, Y+10	; 0x0a
    510e:	ab 85       	ldd	r26, Y+11	; 0x0b
    5110:	bc 85       	ldd	r27, Y+12	; 0x0c
    5112:	f9 01       	movw	r30, r18
    5114:	80 83       	st	Z, r24
    5116:	91 83       	std	Z+1, r25	; 0x01
    5118:	a2 83       	std	Z+2, r26	; 0x02
    511a:	b3 83       	std	Z+3, r27	; 0x03
    511c:	03 c0       	rjmp	.+6      	; 0x5124 <xTaskGenericNotifyFromISR+0x1e8>
    511e:	19 82       	std	Y+1, r1	; 0x01
    5120:	01 c0       	rjmp	.+2      	; 0x5124 <xTaskGenericNotifyFromISR+0x1e8>
    5122:	00 00       	nop
    5124:	8d 81       	ldd	r24, Y+5	; 0x05
    5126:	81 30       	cpi	r24, 0x01	; 1
    5128:	09 f0       	breq	.+2      	; 0x512c <xTaskGenericNotifyFromISR+0x1f0>
    512a:	51 c0       	rjmp	.+162    	; 0x51ce <xTaskGenericNotifyFromISR+0x292>
    512c:	80 91 c0 13 	lds	r24, 0x13C0	; 0x8013c0 <uxSchedulerSuspended>
    5130:	88 23       	and	r24, r24
    5132:	69 f5       	brne	.+90     	; 0x518e <xTaskGenericNotifyFromISR+0x252>
    5134:	8a 81       	ldd	r24, Y+2	; 0x02
    5136:	9b 81       	ldd	r25, Y+3	; 0x03
    5138:	02 96       	adiw	r24, 0x02	; 2
    513a:	0e 94 aa 14 	call	0x2954	; 0x2954 <uxListRemove>
    513e:	8a 81       	ldd	r24, Y+2	; 0x02
    5140:	9b 81       	ldd	r25, Y+3	; 0x03
    5142:	fc 01       	movw	r30, r24
    5144:	96 89       	ldd	r25, Z+22	; 0x16
    5146:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    514a:	89 17       	cp	r24, r25
    514c:	30 f4       	brcc	.+12     	; 0x515a <xTaskGenericNotifyFromISR+0x21e>
    514e:	8a 81       	ldd	r24, Y+2	; 0x02
    5150:	9b 81       	ldd	r25, Y+3	; 0x03
    5152:	fc 01       	movw	r30, r24
    5154:	86 89       	ldd	r24, Z+22	; 0x16
    5156:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <uxTopReadyPriority>
    515a:	8a 81       	ldd	r24, Y+2	; 0x02
    515c:	9b 81       	ldd	r25, Y+3	; 0x03
    515e:	ac 01       	movw	r20, r24
    5160:	4e 5f       	subi	r20, 0xFE	; 254
    5162:	5f 4f       	sbci	r21, 0xFF	; 255
    5164:	8a 81       	ldd	r24, Y+2	; 0x02
    5166:	9b 81       	ldd	r25, Y+3	; 0x03
    5168:	fc 01       	movw	r30, r24
    516a:	86 89       	ldd	r24, Z+22	; 0x16
    516c:	28 2f       	mov	r18, r24
    516e:	30 e0       	ldi	r19, 0x00	; 0
    5170:	c9 01       	movw	r24, r18
    5172:	88 0f       	add	r24, r24
    5174:	99 1f       	adc	r25, r25
    5176:	88 0f       	add	r24, r24
    5178:	99 1f       	adc	r25, r25
    517a:	88 0f       	add	r24, r24
    517c:	99 1f       	adc	r25, r25
    517e:	82 0f       	add	r24, r18
    5180:	93 1f       	adc	r25, r19
    5182:	86 57       	subi	r24, 0x76	; 118
    5184:	9c 4e       	sbci	r25, 0xEC	; 236
    5186:	ba 01       	movw	r22, r20
    5188:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <vListInsertEnd>
    518c:	08 c0       	rjmp	.+16     	; 0x519e <xTaskGenericNotifyFromISR+0x262>
    518e:	8a 81       	ldd	r24, Y+2	; 0x02
    5190:	9b 81       	ldd	r25, Y+3	; 0x03
    5192:	0c 96       	adiw	r24, 0x0c	; 12
    5194:	bc 01       	movw	r22, r24
    5196:	89 ea       	ldi	r24, 0xA9	; 169
    5198:	93 e1       	ldi	r25, 0x13	; 19
    519a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <vListInsertEnd>
    519e:	8a 81       	ldd	r24, Y+2	; 0x02
    51a0:	9b 81       	ldd	r25, Y+3	; 0x03
    51a2:	fc 01       	movw	r30, r24
    51a4:	26 89       	ldd	r18, Z+22	; 0x16
    51a6:	80 91 88 13 	lds	r24, 0x1388	; 0x801388 <pxCurrentTCB>
    51aa:	90 91 89 13 	lds	r25, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    51ae:	fc 01       	movw	r30, r24
    51b0:	86 89       	ldd	r24, Z+22	; 0x16
    51b2:	82 17       	cp	r24, r18
    51b4:	60 f4       	brcc	.+24     	; 0x51ce <xTaskGenericNotifyFromISR+0x292>
    51b6:	88 89       	ldd	r24, Y+16	; 0x10
    51b8:	99 89       	ldd	r25, Y+17	; 0x11
    51ba:	89 2b       	or	r24, r25
    51bc:	29 f0       	breq	.+10     	; 0x51c8 <xTaskGenericNotifyFromISR+0x28c>
    51be:	88 89       	ldd	r24, Y+16	; 0x10
    51c0:	99 89       	ldd	r25, Y+17	; 0x11
    51c2:	21 e0       	ldi	r18, 0x01	; 1
    51c4:	fc 01       	movw	r30, r24
    51c6:	20 83       	st	Z, r18
    51c8:	81 e0       	ldi	r24, 0x01	; 1
    51ca:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <xYieldPending>
    51ce:	89 81       	ldd	r24, Y+1	; 0x01
    51d0:	61 96       	adiw	r28, 0x11	; 17
    51d2:	0f b6       	in	r0, 0x3f	; 63
    51d4:	f8 94       	cli
    51d6:	de bf       	out	0x3e, r29	; 62
    51d8:	0f be       	out	0x3f, r0	; 63
    51da:	cd bf       	out	0x3d, r28	; 61
    51dc:	df 91       	pop	r29
    51de:	cf 91       	pop	r28
    51e0:	0f 91       	pop	r16
    51e2:	ff 90       	pop	r15
    51e4:	ef 90       	pop	r14
    51e6:	df 90       	pop	r13
    51e8:	cf 90       	pop	r12
    51ea:	08 95       	ret

000051ec <xTaskGenericNotifyStateClear>:
    51ec:	cf 93       	push	r28
    51ee:	df 93       	push	r29
    51f0:	00 d0       	rcall	.+0      	; 0x51f2 <xTaskGenericNotifyStateClear+0x6>
    51f2:	00 d0       	rcall	.+0      	; 0x51f4 <xTaskGenericNotifyStateClear+0x8>
    51f4:	cd b7       	in	r28, 0x3d	; 61
    51f6:	de b7       	in	r29, 0x3e	; 62
    51f8:	9d 83       	std	Y+5, r25	; 0x05
    51fa:	8c 83       	std	Y+4, r24	; 0x04
    51fc:	6e 83       	std	Y+6, r22	; 0x06
    51fe:	8c 81       	ldd	r24, Y+4	; 0x04
    5200:	9d 81       	ldd	r25, Y+5	; 0x05
    5202:	89 2b       	or	r24, r25
    5204:	29 f4       	brne	.+10     	; 0x5210 <xTaskGenericNotifyStateClear+0x24>
    5206:	80 91 88 13 	lds	r24, 0x1388	; 0x801388 <pxCurrentTCB>
    520a:	90 91 89 13 	lds	r25, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    520e:	02 c0       	rjmp	.+4      	; 0x5214 <xTaskGenericNotifyStateClear+0x28>
    5210:	8c 81       	ldd	r24, Y+4	; 0x04
    5212:	9d 81       	ldd	r25, Y+5	; 0x05
    5214:	9b 83       	std	Y+3, r25	; 0x03
    5216:	8a 83       	std	Y+2, r24	; 0x02
    5218:	0f b6       	in	r0, 0x3f	; 63
    521a:	f8 94       	cli
    521c:	0f 92       	push	r0
    521e:	8e 81       	ldd	r24, Y+6	; 0x06
    5220:	88 2f       	mov	r24, r24
    5222:	90 e0       	ldi	r25, 0x00	; 0
    5224:	2a 81       	ldd	r18, Y+2	; 0x02
    5226:	3b 81       	ldd	r19, Y+3	; 0x03
    5228:	82 0f       	add	r24, r18
    522a:	93 1f       	adc	r25, r19
    522c:	85 96       	adiw	r24, 0x25	; 37
    522e:	fc 01       	movw	r30, r24
    5230:	80 81       	ld	r24, Z
    5232:	82 30       	cpi	r24, 0x02	; 2
    5234:	69 f4       	brne	.+26     	; 0x5250 <xTaskGenericNotifyStateClear+0x64>
    5236:	8e 81       	ldd	r24, Y+6	; 0x06
    5238:	88 2f       	mov	r24, r24
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	2a 81       	ldd	r18, Y+2	; 0x02
    523e:	3b 81       	ldd	r19, Y+3	; 0x03
    5240:	82 0f       	add	r24, r18
    5242:	93 1f       	adc	r25, r19
    5244:	85 96       	adiw	r24, 0x25	; 37
    5246:	fc 01       	movw	r30, r24
    5248:	10 82       	st	Z, r1
    524a:	81 e0       	ldi	r24, 0x01	; 1
    524c:	89 83       	std	Y+1, r24	; 0x01
    524e:	01 c0       	rjmp	.+2      	; 0x5252 <xTaskGenericNotifyStateClear+0x66>
    5250:	19 82       	std	Y+1, r1	; 0x01
    5252:	0f 90       	pop	r0
    5254:	0f be       	out	0x3f, r0	; 63
    5256:	89 81       	ldd	r24, Y+1	; 0x01
    5258:	26 96       	adiw	r28, 0x06	; 6
    525a:	0f b6       	in	r0, 0x3f	; 63
    525c:	f8 94       	cli
    525e:	de bf       	out	0x3e, r29	; 62
    5260:	0f be       	out	0x3f, r0	; 63
    5262:	cd bf       	out	0x3d, r28	; 61
    5264:	df 91       	pop	r29
    5266:	cf 91       	pop	r28
    5268:	08 95       	ret

0000526a <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
    526a:	cf 93       	push	r28
    526c:	df 93       	push	r29
    526e:	cd b7       	in	r28, 0x3d	; 61
    5270:	de b7       	in	r29, 0x3e	; 62
    5272:	27 97       	sbiw	r28, 0x07	; 7
    5274:	0f b6       	in	r0, 0x3f	; 63
    5276:	f8 94       	cli
    5278:	de bf       	out	0x3e, r29	; 62
    527a:	0f be       	out	0x3f, r0	; 63
    527c:	cd bf       	out	0x3d, r28	; 61
    527e:	9e 83       	std	Y+6, r25	; 0x06
    5280:	8d 83       	std	Y+5, r24	; 0x05
    5282:	6f 83       	std	Y+7, r22	; 0x07
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    5284:	80 91 b3 13 	lds	r24, 0x13B3	; 0x8013b3 <xTickCount>
    5288:	90 91 b4 13 	lds	r25, 0x13B4	; 0x8013b4 <xTickCount+0x1>
    528c:	9a 83       	std	Y+2, r25	; 0x02
    528e:	89 83       	std	Y+1, r24	; 0x01
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    5290:	80 91 88 13 	lds	r24, 0x1388	; 0x801388 <pxCurrentTCB>
    5294:	90 91 89 13 	lds	r25, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    5298:	02 96       	adiw	r24, 0x02	; 2
    529a:	0e 94 aa 14 	call	0x2954	; 0x2954 <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
        {
            /* Calculate the time at which the task should be woken if the event
             * does not occur.  This may overflow but this doesn't matter, the kernel
             * will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
    529e:	29 81       	ldd	r18, Y+1	; 0x01
    52a0:	3a 81       	ldd	r19, Y+2	; 0x02
    52a2:	8d 81       	ldd	r24, Y+5	; 0x05
    52a4:	9e 81       	ldd	r25, Y+6	; 0x06
    52a6:	82 0f       	add	r24, r18
    52a8:	93 1f       	adc	r25, r19
    52aa:	9c 83       	std	Y+4, r25	; 0x04
    52ac:	8b 83       	std	Y+3, r24	; 0x03

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    52ae:	80 91 88 13 	lds	r24, 0x1388	; 0x801388 <pxCurrentTCB>
    52b2:	90 91 89 13 	lds	r25, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    52b6:	2b 81       	ldd	r18, Y+3	; 0x03
    52b8:	3c 81       	ldd	r19, Y+4	; 0x04
    52ba:	fc 01       	movw	r30, r24
    52bc:	33 83       	std	Z+3, r19	; 0x03
    52be:	22 83       	std	Z+2, r18	; 0x02

            if( xTimeToWake < xConstTickCount )
    52c0:	2b 81       	ldd	r18, Y+3	; 0x03
    52c2:	3c 81       	ldd	r19, Y+4	; 0x04
    52c4:	89 81       	ldd	r24, Y+1	; 0x01
    52c6:	9a 81       	ldd	r25, Y+2	; 0x02
    52c8:	28 17       	cp	r18, r24
    52ca:	39 07       	cpc	r19, r25
    52cc:	78 f4       	brcc	.+30     	; 0x52ec <prvAddCurrentTaskToDelayedList+0x82>
            {
                /* Wake time has overflowed.  Place this item in the overflow list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    52ce:	80 91 88 13 	lds	r24, 0x1388	; 0x801388 <pxCurrentTCB>
    52d2:	90 91 89 13 	lds	r25, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    52d6:	9c 01       	movw	r18, r24
    52d8:	2e 5f       	subi	r18, 0xFE	; 254
    52da:	3f 4f       	sbci	r19, 0xFF	; 255
    52dc:	80 91 a7 13 	lds	r24, 0x13A7	; 0x8013a7 <pxOverflowDelayedTaskList>
    52e0:	90 91 a8 13 	lds	r25, 0x13A8	; 0x8013a8 <pxOverflowDelayedTaskList+0x1>
    52e4:	b9 01       	movw	r22, r18
    52e6:	0e 94 32 14 	call	0x2864	; 0x2864 <vListInsert>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    52ea:	1d c0       	rjmp	.+58     	; 0x5326 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
            }
            else
            {
                /* The wake time has not overflowed, so the current block list is used. */
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    52ec:	80 91 88 13 	lds	r24, 0x1388	; 0x801388 <pxCurrentTCB>
    52f0:	90 91 89 13 	lds	r25, 0x1389	; 0x801389 <pxCurrentTCB+0x1>
    52f4:	9c 01       	movw	r18, r24
    52f6:	2e 5f       	subi	r18, 0xFE	; 254
    52f8:	3f 4f       	sbci	r19, 0xFF	; 255
    52fa:	80 91 a5 13 	lds	r24, 0x13A5	; 0x8013a5 <pxDelayedTaskList>
    52fe:	90 91 a6 13 	lds	r25, 0x13A6	; 0x8013a6 <pxDelayedTaskList+0x1>
    5302:	b9 01       	movw	r22, r18
    5304:	0e 94 32 14 	call	0x2864	; 0x2864 <vListInsert>

                /* If the task entering the blocked state was placed at the head of the
                 * list of blocked tasks then xNextTaskUnblockTime needs to be updated
                 * too. */
                if( xTimeToWake < xNextTaskUnblockTime )
    5308:	80 91 bc 13 	lds	r24, 0x13BC	; 0x8013bc <xNextTaskUnblockTime>
    530c:	90 91 bd 13 	lds	r25, 0x13BD	; 0x8013bd <xNextTaskUnblockTime+0x1>
    5310:	2b 81       	ldd	r18, Y+3	; 0x03
    5312:	3c 81       	ldd	r19, Y+4	; 0x04
    5314:	28 17       	cp	r18, r24
    5316:	39 07       	cpc	r19, r25
    5318:	30 f4       	brcc	.+12     	; 0x5326 <prvAddCurrentTaskToDelayedList+0xbc>
                {
                    xNextTaskUnblockTime = xTimeToWake;
    531a:	8b 81       	ldd	r24, Y+3	; 0x03
    531c:	9c 81       	ldd	r25, Y+4	; 0x04
    531e:	90 93 bd 13 	sts	0x13BD, r25	; 0x8013bd <xNextTaskUnblockTime+0x1>
    5322:	80 93 bc 13 	sts	0x13BC, r24	; 0x8013bc <xNextTaskUnblockTime>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    5326:	00 00       	nop
    5328:	27 96       	adiw	r28, 0x07	; 7
    532a:	0f b6       	in	r0, 0x3f	; 63
    532c:	f8 94       	cli
    532e:	de bf       	out	0x3e, r29	; 62
    5330:	0f be       	out	0x3f, r0	; 63
    5332:	cd bf       	out	0x3d, r28	; 61
    5334:	df 91       	pop	r29
    5336:	cf 91       	pop	r28
    5338:	08 95       	ret

0000533a <polIfTouched>:
#include "player.h"
#define MOVE_PLAYER_AMOUNT 10
int touch_flag;

void polIfTouched(void *pvParameters)
{
    533a:	cf 93       	push	r28
    533c:	df 93       	push	r29
    533e:	cd b7       	in	r28, 0x3d	; 61
    5340:	de b7       	in	r29, 0x3e	; 62
    5342:	6c 97       	sbiw	r28, 0x1c	; 28
    5344:	0f b6       	in	r0, 0x3f	; 63
    5346:	f8 94       	cli
    5348:	de bf       	out	0x3e, r29	; 62
    534a:	0f be       	out	0x3f, r0	; 63
    534c:	cd bf       	out	0x3d, r28	; 61
    534e:	9c 8f       	std	Y+28, r25	; 0x1c
    5350:	8b 8f       	std	Y+27, r24	; 0x1b
    Game *p_game = (Game *)pvParameters;
    5352:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5354:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5356:	9a 83       	std	Y+2, r25	; 0x02
    5358:	89 83       	std	Y+1, r24	; 0x01
    //xQueueHandle xTouchQueue = NULL;

	while(1)
	{
		if(touch_flag == 1)
    535a:	80 91 c1 13 	lds	r24, 0x13C1	; 0x8013c1 <touch_flag>
    535e:	90 91 c2 13 	lds	r25, 0x13C2	; 0x8013c2 <touch_flag+0x1>
    5362:	01 97       	sbiw	r24, 0x01	; 1
    5364:	d1 f7       	brne	.-12     	; 0x535a <polIfTouched+0x20>
		{
			touch_flag = 0;
    5366:	10 92 c2 13 	sts	0x13C2, r1	; 0x8013c2 <touch_flag+0x1>
    536a:	10 92 c1 13 	sts	0x13C1, r1	; 0x8013c1 <touch_flag>
            uint16_t *coordTouch; 
            MLPC_MoveLocalPlayerCommandParameters localParamsLeft = {.direction = MLPC_LEFT, .p_game = p_game};
    536e:	89 81       	ldd	r24, Y+1	; 0x01
    5370:	9a 81       	ldd	r25, Y+2	; 0x02
    5372:	9e 83       	std	Y+6, r25	; 0x06
    5374:	8d 83       	std	Y+5, r24	; 0x05
    5376:	1f 82       	std	Y+7, r1	; 0x07
            MLPC_MoveLocalPlayerCommandParameters localParamsRight = {.direction = MLPC_RIGHT, .p_game = p_game}; 
    5378:	89 81       	ldd	r24, Y+1	; 0x01
    537a:	9a 81       	ldd	r25, Y+2	; 0x02
    537c:	99 87       	std	Y+9, r25	; 0x09
    537e:	88 87       	std	Y+8, r24	; 0x08
    5380:	81 e0       	ldi	r24, 0x01	; 1
    5382:	8a 87       	std	Y+10, r24	; 0x0a
			MSPC_MoveServerPlayerCommandParameters serverParamLeft = {.coordinates = {.XPosition = p_game->localPlayer.Position.XPosition-MOVE_PLAYER_AMOUNT, .YPosition = p_game->localPlayer.Position.YPosition}, .p_game = p_game, .playerServerId = 1};
    5384:	89 81       	ldd	r24, Y+1	; 0x01
    5386:	9a 81       	ldd	r25, Y+2	; 0x02
    5388:	9c 87       	std	Y+12, r25	; 0x0c
    538a:	8b 87       	std	Y+11, r24	; 0x0b
    538c:	81 e0       	ldi	r24, 0x01	; 1
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	9e 87       	std	Y+14, r25	; 0x0e
    5392:	8d 87       	std	Y+13, r24	; 0x0d
    5394:	89 81       	ldd	r24, Y+1	; 0x01
    5396:	9a 81       	ldd	r25, Y+2	; 0x02
    5398:	fc 01       	movw	r30, r24
    539a:	83 81       	ldd	r24, Z+3	; 0x03
    539c:	94 81       	ldd	r25, Z+4	; 0x04
    539e:	0a 97       	sbiw	r24, 0x0a	; 10
    53a0:	98 8b       	std	Y+16, r25	; 0x10
    53a2:	8f 87       	std	Y+15, r24	; 0x0f
    53a4:	89 81       	ldd	r24, Y+1	; 0x01
    53a6:	9a 81       	ldd	r25, Y+2	; 0x02
    53a8:	fc 01       	movw	r30, r24
    53aa:	85 81       	ldd	r24, Z+5	; 0x05
    53ac:	96 81       	ldd	r25, Z+6	; 0x06
    53ae:	9a 8b       	std	Y+18, r25	; 0x12
    53b0:	89 8b       	std	Y+17, r24	; 0x11
			MSPC_MoveServerPlayerCommandParameters serverParamRight = {.coordinates = {.XPosition = p_game->localPlayer.Position.XPosition+MOVE_PLAYER_AMOUNT, .YPosition = p_game->localPlayer.Position.YPosition}, .p_game = p_game, .playerServerId = 1};
    53b2:	89 81       	ldd	r24, Y+1	; 0x01
    53b4:	9a 81       	ldd	r25, Y+2	; 0x02
    53b6:	9c 8b       	std	Y+20, r25	; 0x14
    53b8:	8b 8b       	std	Y+19, r24	; 0x13
    53ba:	81 e0       	ldi	r24, 0x01	; 1
    53bc:	90 e0       	ldi	r25, 0x00	; 0
    53be:	9e 8b       	std	Y+22, r25	; 0x16
    53c0:	8d 8b       	std	Y+21, r24	; 0x15
    53c2:	89 81       	ldd	r24, Y+1	; 0x01
    53c4:	9a 81       	ldd	r25, Y+2	; 0x02
    53c6:	fc 01       	movw	r30, r24
    53c8:	83 81       	ldd	r24, Z+3	; 0x03
    53ca:	94 81       	ldd	r25, Z+4	; 0x04
    53cc:	0a 96       	adiw	r24, 0x0a	; 10
    53ce:	98 8f       	std	Y+24, r25	; 0x18
    53d0:	8f 8b       	std	Y+23, r24	; 0x17
    53d2:	89 81       	ldd	r24, Y+1	; 0x01
    53d4:	9a 81       	ldd	r25, Y+2	; 0x02
    53d6:	fc 01       	movw	r30, r24
    53d8:	85 81       	ldd	r24, Z+5	; 0x05
    53da:	96 81       	ldd	r25, Z+6	; 0x06
    53dc:	9a 8f       	std	Y+26, r25	; 0x1a
    53de:	89 8f       	std	Y+25, r24	; 0x19
			coordTouch = touchTaskOnInterrupt();  // x = [0], y == [1]
    53e0:	d4 d7       	rcall	.+4008   	; 0x638a <touchTaskOnInterrupt>
    53e2:	9c 83       	std	Y+4, r25	; 0x04
    53e4:	8b 83       	std	Y+3, r24	; 0x03
        
            if(coordTouch[0] < 230 && coordTouch[1] < 80)                                 
    53e6:	8b 81       	ldd	r24, Y+3	; 0x03
    53e8:	9c 81       	ldd	r25, Y+4	; 0x04
    53ea:	fc 01       	movw	r30, r24
    53ec:	80 81       	ld	r24, Z
    53ee:	91 81       	ldd	r25, Z+1	; 0x01
    53f0:	86 3e       	cpi	r24, 0xE6	; 230
    53f2:	91 05       	cpc	r25, r1
    53f4:	08 f0       	brcs	.+2      	; 0x53f8 <polIfTouched+0xbe>
    53f6:	b1 cf       	rjmp	.-158    	; 0x535a <polIfTouched+0x20>
    53f8:	8b 81       	ldd	r24, Y+3	; 0x03
    53fa:	9c 81       	ldd	r25, Y+4	; 0x04
    53fc:	02 96       	adiw	r24, 0x02	; 2
    53fe:	fc 01       	movw	r30, r24
    5400:	80 81       	ld	r24, Z
    5402:	91 81       	ldd	r25, Z+1	; 0x01
    5404:	80 35       	cpi	r24, 0x50	; 80
    5406:	91 05       	cpc	r25, r1
    5408:	08 f0       	brcs	.+2      	; 0x540c <polIfTouched+0xd2>
    540a:	a7 cf       	rjmp	.-178    	; 0x535a <polIfTouched+0x20>
            {    if(coordTouch[0] < 115)
    540c:	8b 81       	ldd	r24, Y+3	; 0x03
    540e:	9c 81       	ldd	r25, Y+4	; 0x04
    5410:	fc 01       	movw	r30, r24
    5412:	80 81       	ld	r24, Z
    5414:	91 81       	ldd	r25, Z+1	; 0x01
    5416:	83 37       	cpi	r24, 0x73	; 115
    5418:	91 05       	cpc	r25, r1
    541a:	d8 f4       	brcc	.+54     	; 0x5452 <polIfTouched+0x118>
                {
					printf("left");
    541c:	83 ea       	ldi	r24, 0xA3	; 163
    541e:	98 e0       	ldi	r25, 0x08	; 8
    5420:	89 2f       	mov	r24, r25
    5422:	8f 93       	push	r24
    5424:	83 ea       	ldi	r24, 0xA3	; 163
    5426:	98 e0       	ldi	r25, 0x08	; 8
    5428:	8f 93       	push	r24
    542a:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <printf>
    542e:	0f 90       	pop	r0
    5430:	0f 90       	pop	r0
                    MLPCMD_Execute(localParamsLeft);
    5432:	8d 81       	ldd	r24, Y+5	; 0x05
    5434:	9e 81       	ldd	r25, Y+6	; 0x06
    5436:	af 81       	ldd	r26, Y+7	; 0x07
    5438:	bc 01       	movw	r22, r24
    543a:	8a 2f       	mov	r24, r26
    543c:	46 d0       	rcall	.+140    	; 0x54ca <MLPCMD_Execute>
					MSPCMD_Execute(serverParamLeft);
    543e:	2b 85       	ldd	r18, Y+11	; 0x0b
    5440:	3c 85       	ldd	r19, Y+12	; 0x0c
    5442:	4d 85       	ldd	r20, Y+13	; 0x0d
    5444:	5e 85       	ldd	r21, Y+14	; 0x0e
    5446:	6f 85       	ldd	r22, Y+15	; 0x0f
    5448:	78 89       	ldd	r23, Y+16	; 0x10
    544a:	89 89       	ldd	r24, Y+17	; 0x11
    544c:	9a 89       	ldd	r25, Y+18	; 0x12
    544e:	66 d0       	rcall	.+204    	; 0x551c <MSPCMD_Execute>
    5450:	84 cf       	rjmp	.-248    	; 0x535a <polIfTouched+0x20>
                     
                }
                else if(coordTouch[0] > 115)
    5452:	8b 81       	ldd	r24, Y+3	; 0x03
    5454:	9c 81       	ldd	r25, Y+4	; 0x04
    5456:	fc 01       	movw	r30, r24
    5458:	80 81       	ld	r24, Z
    545a:	91 81       	ldd	r25, Z+1	; 0x01
    545c:	84 37       	cpi	r24, 0x74	; 116
    545e:	91 05       	cpc	r25, r1
    5460:	08 f4       	brcc	.+2      	; 0x5464 <polIfTouched+0x12a>
    5462:	7b cf       	rjmp	.-266    	; 0x535a <polIfTouched+0x20>
                {
					printf("right");
    5464:	88 ea       	ldi	r24, 0xA8	; 168
    5466:	98 e0       	ldi	r25, 0x08	; 8
    5468:	89 2f       	mov	r24, r25
    546a:	8f 93       	push	r24
    546c:	88 ea       	ldi	r24, 0xA8	; 168
    546e:	98 e0       	ldi	r25, 0x08	; 8
    5470:	8f 93       	push	r24
    5472:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <printf>
    5476:	0f 90       	pop	r0
    5478:	0f 90       	pop	r0
                    MLPCMD_Execute(localParamsRight);
    547a:	88 85       	ldd	r24, Y+8	; 0x08
    547c:	99 85       	ldd	r25, Y+9	; 0x09
    547e:	aa 85       	ldd	r26, Y+10	; 0x0a
    5480:	bc 01       	movw	r22, r24
    5482:	8a 2f       	mov	r24, r26
    5484:	22 d0       	rcall	.+68     	; 0x54ca <MLPCMD_Execute>
					MSPCMD_Execute(serverParamRight);
    5486:	2b 89       	ldd	r18, Y+19	; 0x13
    5488:	3c 89       	ldd	r19, Y+20	; 0x14
    548a:	4d 89       	ldd	r20, Y+21	; 0x15
    548c:	5e 89       	ldd	r21, Y+22	; 0x16
    548e:	6f 89       	ldd	r22, Y+23	; 0x17
    5490:	78 8d       	ldd	r23, Y+24	; 0x18
    5492:	89 8d       	ldd	r24, Y+25	; 0x19
    5494:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5496:	42 d0       	rcall	.+132    	; 0x551c <MSPCMD_Execute>
                }
            }
		}
	}
    5498:	60 cf       	rjmp	.-320    	; 0x535a <polIfTouched+0x20>

0000549a <IPC_Execute>:
 *  Author: victo
 */ 
#include "initialize_players_command.h"

void IPC_Execute(IPC_InitializePlayerCommandParameters params)
{
    549a:	cf 93       	push	r28
    549c:	df 93       	push	r29
    549e:	00 d0       	rcall	.+0      	; 0x54a0 <IPC_Execute+0x6>
    54a0:	1f 92       	push	r1
    54a2:	cd b7       	in	r28, 0x3d	; 61
    54a4:	de b7       	in	r29, 0x3e	; 62
    54a6:	69 83       	std	Y+1, r22	; 0x01
    54a8:	7a 83       	std	Y+2, r23	; 0x02
    54aa:	8b 83       	std	Y+3, r24	; 0x03
    54ac:	9c 83       	std	Y+4, r25	; 0x04
	GAME_InitGameAfterServerConnection(params.p_game, params.localPlayerServerAssignedId);
    54ae:	2b 81       	ldd	r18, Y+3	; 0x03
    54b0:	3c 81       	ldd	r19, Y+4	; 0x04
    54b2:	89 81       	ldd	r24, Y+1	; 0x01
    54b4:	9a 81       	ldd	r25, Y+2	; 0x02
    54b6:	b9 01       	movw	r22, r18
    54b8:	c0 d4       	rcall	.+2432   	; 0x5e3a <GAME_InitGameAfterServerConnection>
}
    54ba:	00 00       	nop
    54bc:	0f 90       	pop	r0
    54be:	0f 90       	pop	r0
    54c0:	0f 90       	pop	r0
    54c2:	0f 90       	pop	r0
    54c4:	df 91       	pop	r29
    54c6:	cf 91       	pop	r28
    54c8:	08 95       	ret

000054ca <MLPCMD_Execute>:
#include "move_local_player_command.h"

#include "player.h"
#include "uart_int.h"

void MLPCMD_Execute(MLPC_MoveLocalPlayerCommandParameters params) {
    54ca:	cf 93       	push	r28
    54cc:	df 93       	push	r29
    54ce:	00 d0       	rcall	.+0      	; 0x54d0 <MLPCMD_Execute+0x6>
    54d0:	1f 92       	push	r1
    54d2:	1f 92       	push	r1
    54d4:	cd b7       	in	r28, 0x3d	; 61
    54d6:	de b7       	in	r29, 0x3e	; 62
    54d8:	6b 83       	std	Y+3, r22	; 0x03
    54da:	7c 83       	std	Y+4, r23	; 0x04
    54dc:	8d 83       	std	Y+5, r24	; 0x05
    Player* player = &params.p_game->localPlayer;
    54de:	8b 81       	ldd	r24, Y+3	; 0x03
    54e0:	9c 81       	ldd	r25, Y+4	; 0x04
    54e2:	9a 83       	std	Y+2, r25	; 0x02
    54e4:	89 83       	std	Y+1, r24	; 0x01
    if (params.direction == MLPC_LEFT)
    54e6:	8d 81       	ldd	r24, Y+5	; 0x05
    54e8:	88 23       	and	r24, r24
    54ea:	21 f4       	brne	.+8      	; 0x54f4 <MLPCMD_Execute+0x2a>
        PLYR_MoveLeft(player);
    54ec:	89 81       	ldd	r24, Y+1	; 0x01
    54ee:	9a 81       	ldd	r25, Y+2	; 0x02
    54f0:	36 d5       	rcall	.+2668   	; 0x5f5e <PLYR_MoveLeft>
    else if (params.direction == MLPC_RIGHT)
        PLYR_MoveRight(player);
    else
        UART_SendString("Invalid player move direction");
    54f2:	0b c0       	rjmp	.+22     	; 0x550a <MLPCMD_Execute+0x40>

void MLPCMD_Execute(MLPC_MoveLocalPlayerCommandParameters params) {
    Player* player = &params.p_game->localPlayer;
    if (params.direction == MLPC_LEFT)
        PLYR_MoveLeft(player);
    else if (params.direction == MLPC_RIGHT)
    54f4:	8d 81       	ldd	r24, Y+5	; 0x05
    54f6:	81 30       	cpi	r24, 0x01	; 1
    54f8:	21 f4       	brne	.+8      	; 0x5502 <MLPCMD_Execute+0x38>
        PLYR_MoveRight(player);
    54fa:	89 81       	ldd	r24, Y+1	; 0x01
    54fc:	9a 81       	ldd	r25, Y+2	; 0x02
    54fe:	03 d5       	rcall	.+2566   	; 0x5f06 <PLYR_MoveRight>
    else
        UART_SendString("Invalid player move direction");
    5500:	04 c0       	rjmp	.+8      	; 0x550a <MLPCMD_Execute+0x40>
    if (params.direction == MLPC_LEFT)
        PLYR_MoveLeft(player);
    else if (params.direction == MLPC_RIGHT)
        PLYR_MoveRight(player);
    else
        UART_SendString("Invalid player move direction");
    5502:	8e ea       	ldi	r24, 0xAE	; 174
    5504:	98 e0       	ldi	r25, 0x08	; 8
    5506:	0e 94 14 13 	call	0x2628	; 0x2628 <UART_SendString>
    550a:	00 00       	nop
    550c:	0f 90       	pop	r0
    550e:	0f 90       	pop	r0
    5510:	0f 90       	pop	r0
    5512:	0f 90       	pop	r0
    5514:	0f 90       	pop	r0
    5516:	df 91       	pop	r29
    5518:	cf 91       	pop	r28
    551a:	08 95       	ret

0000551c <MSPCMD_Execute>:
 *  Author: victo
 */
#include <stddef.h>
#include "move_server_player_command.h"

void MSPCMD_Execute(MSPC_MoveServerPlayerCommandParameters params) {
    551c:	cf 93       	push	r28
    551e:	df 93       	push	r29
    5520:	cd b7       	in	r28, 0x3d	; 61
    5522:	de b7       	in	r29, 0x3e	; 62
    5524:	2c 97       	sbiw	r28, 0x0c	; 12
    5526:	0f b6       	in	r0, 0x3f	; 63
    5528:	f8 94       	cli
    552a:	de bf       	out	0x3e, r29	; 62
    552c:	0f be       	out	0x3f, r0	; 63
    552e:	cd bf       	out	0x3d, r28	; 61
    5530:	2d 83       	std	Y+5, r18	; 0x05
    5532:	3e 83       	std	Y+6, r19	; 0x06
    5534:	4f 83       	std	Y+7, r20	; 0x07
    5536:	58 87       	std	Y+8, r21	; 0x08
    5538:	69 87       	std	Y+9, r22	; 0x09
    553a:	7a 87       	std	Y+10, r23	; 0x0a
    553c:	8b 87       	std	Y+11, r24	; 0x0b
    553e:	9c 87       	std	Y+12, r25	; 0x0c
	
	Player* player = NULL;
    5540:	1a 82       	std	Y+2, r1	; 0x02
    5542:	19 82       	std	Y+1, r1	; 0x01
	for(int i = 0; i<GAME_NO_OF_SERVER_PLAYERS; i++)
    5544:	1c 82       	std	Y+4, r1	; 0x04
    5546:	1b 82       	std	Y+3, r1	; 0x03
    5548:	2b c0       	rjmp	.+86     	; 0x55a0 <MSPCMD_Execute+0x84>
	{
		if(params.p_game->serverPlayers[i].ServerAssignedPlayerId == params.playerServerId)
    554a:	2d 81       	ldd	r18, Y+5	; 0x05
    554c:	3e 81       	ldd	r19, Y+6	; 0x06
    554e:	4b 81       	ldd	r20, Y+3	; 0x03
    5550:	5c 81       	ldd	r21, Y+4	; 0x04
    5552:	65 e1       	ldi	r22, 0x15	; 21
    5554:	64 9f       	mul	r22, r20
    5556:	c0 01       	movw	r24, r0
    5558:	65 9f       	mul	r22, r21
    555a:	90 0d       	add	r25, r0
    555c:	11 24       	eor	r1, r1
    555e:	82 0f       	add	r24, r18
    5560:	93 1f       	adc	r25, r19
    5562:	4d 96       	adiw	r24, 0x1d	; 29
    5564:	fc 01       	movw	r30, r24
    5566:	20 81       	ld	r18, Z
    5568:	31 81       	ldd	r19, Z+1	; 0x01
    556a:	8f 81       	ldd	r24, Y+7	; 0x07
    556c:	98 85       	ldd	r25, Y+8	; 0x08
    556e:	28 17       	cp	r18, r24
    5570:	39 07       	cpc	r19, r25
    5572:	89 f4       	brne	.+34     	; 0x5596 <MSPCMD_Execute+0x7a>
			player = &params.p_game->serverPlayers[i];
    5574:	2d 81       	ldd	r18, Y+5	; 0x05
    5576:	3e 81       	ldd	r19, Y+6	; 0x06
    5578:	8b 81       	ldd	r24, Y+3	; 0x03
    557a:	9c 81       	ldd	r25, Y+4	; 0x04
    557c:	ac 01       	movw	r20, r24
    557e:	4f 5f       	subi	r20, 0xFF	; 255
    5580:	5f 4f       	sbci	r21, 0xFF	; 255
    5582:	65 e1       	ldi	r22, 0x15	; 21
    5584:	64 9f       	mul	r22, r20
    5586:	c0 01       	movw	r24, r0
    5588:	65 9f       	mul	r22, r21
    558a:	90 0d       	add	r25, r0
    558c:	11 24       	eor	r1, r1
    558e:	82 0f       	add	r24, r18
    5590:	93 1f       	adc	r25, r19
    5592:	9a 83       	std	Y+2, r25	; 0x02
    5594:	89 83       	std	Y+1, r24	; 0x01
#include "move_server_player_command.h"

void MSPCMD_Execute(MSPC_MoveServerPlayerCommandParameters params) {
	
	Player* player = NULL;
	for(int i = 0; i<GAME_NO_OF_SERVER_PLAYERS; i++)
    5596:	8b 81       	ldd	r24, Y+3	; 0x03
    5598:	9c 81       	ldd	r25, Y+4	; 0x04
    559a:	01 96       	adiw	r24, 0x01	; 1
    559c:	9c 83       	std	Y+4, r25	; 0x04
    559e:	8b 83       	std	Y+3, r24	; 0x03
    55a0:	8b 81       	ldd	r24, Y+3	; 0x03
    55a2:	9c 81       	ldd	r25, Y+4	; 0x04
    55a4:	03 97       	sbiw	r24, 0x03	; 3
    55a6:	8c f2       	brlt	.-94     	; 0x554a <MSPCMD_Execute+0x2e>
	{
		if(params.p_game->serverPlayers[i].ServerAssignedPlayerId == params.playerServerId)
			player = &params.p_game->serverPlayers[i];
	}
    
	if(player!=NULL)
    55a8:	89 81       	ldd	r24, Y+1	; 0x01
    55aa:	9a 81       	ldd	r25, Y+2	; 0x02
    55ac:	89 2b       	or	r24, r25
    55ae:	51 f0       	breq	.+20     	; 0x55c4 <MSPCMD_Execute+0xa8>
	    PLYR_SetPlayerPosition(player, params.coordinates);
    55b0:	89 85       	ldd	r24, Y+9	; 0x09
    55b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    55b4:	ab 85       	ldd	r26, Y+11	; 0x0b
    55b6:	bc 85       	ldd	r27, Y+12	; 0x0c
    55b8:	29 81       	ldd	r18, Y+1	; 0x01
    55ba:	3a 81       	ldd	r19, Y+2	; 0x02
    55bc:	ac 01       	movw	r20, r24
    55be:	bd 01       	movw	r22, r26
    55c0:	c9 01       	movw	r24, r18
    55c2:	f9 d4       	rcall	.+2546   	; 0x5fb6 <PLYR_SetPlayerPosition>
}
    55c4:	00 00       	nop
    55c6:	2c 96       	adiw	r28, 0x0c	; 12
    55c8:	0f b6       	in	r0, 0x3f	; 63
    55ca:	f8 94       	cli
    55cc:	de bf       	out	0x3e, r29	; 62
    55ce:	0f be       	out	0x3f, r0	; 63
    55d0:	cd bf       	out	0x3d, r28	; 61
    55d2:	df 91       	pop	r29
    55d4:	cf 91       	pop	r28
    55d6:	08 95       	ret

000055d8 <InitPlayersAfterServerConnection>:
				PLYR_MoveLeft(players[i]);
			else if (i % 2 == 0)
				PLYR_MoveRight(players[i]);
		}
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
	}
    55d8:	cf 93       	push	r28
    55da:	df 93       	push	r29
    55dc:	cd b7       	in	r28, 0x3d	; 61
    55de:	de b7       	in	r29, 0x3e	; 62
    55e0:	c4 58       	subi	r28, 0x84	; 132
    55e2:	d1 09       	sbc	r29, r1
    55e4:	0f b6       	in	r0, 0x3f	; 63
    55e6:	f8 94       	cli
    55e8:	de bf       	out	0x3e, r29	; 62
    55ea:	0f be       	out	0x3f, r0	; 63
    55ec:	cd bf       	out	0x3d, r28	; 61
    55ee:	9e 01       	movw	r18, r28
    55f0:	21 58       	subi	r18, 0x81	; 129
    55f2:	3f 4f       	sbci	r19, 0xFF	; 255
    55f4:	d9 01       	movw	r26, r18
    55f6:	8d 93       	st	X+, r24
    55f8:	9c 93       	st	X, r25
    55fa:	ce 01       	movw	r24, r28
    55fc:	8f 57       	subi	r24, 0x7F	; 127
    55fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5600:	fc 01       	movw	r30, r24
    5602:	71 83       	std	Z+1, r23	; 0x01
    5604:	60 83       	st	Z, r22
    5606:	ce 01       	movw	r24, r28
    5608:	8f 57       	subi	r24, 0x7F	; 127
    560a:	9f 4f       	sbci	r25, 0xFF	; 255
    560c:	dc 01       	movw	r26, r24
    560e:	8d 91       	ld	r24, X+
    5610:	9c 91       	ld	r25, X
    5612:	99 23       	and	r25, r25
    5614:	44 f0       	brlt	.+16     	; 0x5626 <InitPlayersAfterServerConnection+0x4e>
    5616:	ce 01       	movw	r24, r28
    5618:	8f 57       	subi	r24, 0x7F	; 127
    561a:	9f 4f       	sbci	r25, 0xFF	; 255
    561c:	fc 01       	movw	r30, r24
    561e:	80 81       	ld	r24, Z
    5620:	91 81       	ldd	r25, Z+1	; 0x01
    5622:	04 97       	sbiw	r24, 0x04	; 4
    5624:	c4 f0       	brlt	.+48     	; 0x5656 <InitPlayersAfterServerConnection+0x7e>
    5626:	ce 01       	movw	r24, r28
    5628:	8f 57       	subi	r24, 0x7F	; 127
    562a:	9f 4f       	sbci	r25, 0xFF	; 255
    562c:	dc 01       	movw	r26, r24
    562e:	11 96       	adiw	r26, 0x01	; 1
    5630:	2c 91       	ld	r18, X
    5632:	2f 93       	push	r18
    5634:	fc 01       	movw	r30, r24
    5636:	80 81       	ld	r24, Z
    5638:	8f 93       	push	r24
    563a:	8c ec       	ldi	r24, 0xCC	; 204
    563c:	98 e0       	ldi	r25, 0x08	; 8
    563e:	89 2f       	mov	r24, r25
    5640:	8f 93       	push	r24
    5642:	8c ec       	ldi	r24, 0xCC	; 204
    5644:	98 e0       	ldi	r25, 0x08	; 8
    5646:	8f 93       	push	r24
    5648:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <printf>
    564c:	0f 90       	pop	r0
    564e:	0f 90       	pop	r0
    5650:	0f 90       	pop	r0
    5652:	0f 90       	pop	r0
    5654:	48 c2       	rjmp	.+1168   	; 0x5ae6 <InitPlayersAfterServerConnection+0x50e>
    5656:	88 e0       	ldi	r24, 0x08	; 8
    5658:	e7 ee       	ldi	r30, 0xE7	; 231
    565a:	f8 e0       	ldi	r31, 0x08	; 8
    565c:	de 01       	movw	r26, r28
    565e:	1d 96       	adiw	r26, 0x0d	; 13
    5660:	01 90       	ld	r0, Z+
    5662:	0d 92       	st	X+, r0
    5664:	8a 95       	dec	r24
    5666:	e1 f7       	brne	.-8      	; 0x5660 <InitPlayersAfterServerConnection+0x88>
    5668:	1a 82       	std	Y+2, r1	; 0x02
    566a:	19 82       	std	Y+1, r1	; 0x01
    566c:	1c 82       	std	Y+4, r1	; 0x04
    566e:	1b 82       	std	Y+3, r1	; 0x03
    5670:	3b c0       	rjmp	.+118    	; 0x56e8 <InitPlayersAfterServerConnection+0x110>
    5672:	8b 81       	ldd	r24, Y+3	; 0x03
    5674:	9c 81       	ldd	r25, Y+4	; 0x04
    5676:	88 0f       	add	r24, r24
    5678:	99 1f       	adc	r25, r25
    567a:	9e 01       	movw	r18, r28
    567c:	2f 5f       	subi	r18, 0xFF	; 255
    567e:	3f 4f       	sbci	r19, 0xFF	; 255
    5680:	82 0f       	add	r24, r18
    5682:	93 1f       	adc	r25, r19
    5684:	0c 96       	adiw	r24, 0x0c	; 12
    5686:	dc 01       	movw	r26, r24
    5688:	2d 91       	ld	r18, X+
    568a:	3c 91       	ld	r19, X
    568c:	ce 01       	movw	r24, r28
    568e:	8f 57       	subi	r24, 0x7F	; 127
    5690:	9f 4f       	sbci	r25, 0xFF	; 255
    5692:	fc 01       	movw	r30, r24
    5694:	80 81       	ld	r24, Z
    5696:	91 81       	ldd	r25, Z+1	; 0x01
    5698:	28 17       	cp	r18, r24
    569a:	39 07       	cpc	r19, r25
    569c:	01 f1       	breq	.+64     	; 0x56de <InitPlayersAfterServerConnection+0x106>
    569e:	89 81       	ldd	r24, Y+1	; 0x01
    56a0:	9a 81       	ldd	r25, Y+2	; 0x02
    56a2:	9c 01       	movw	r18, r24
    56a4:	2f 5f       	subi	r18, 0xFF	; 255
    56a6:	3f 4f       	sbci	r19, 0xFF	; 255
    56a8:	3a 83       	std	Y+2, r19	; 0x02
    56aa:	29 83       	std	Y+1, r18	; 0x01
    56ac:	2b 81       	ldd	r18, Y+3	; 0x03
    56ae:	3c 81       	ldd	r19, Y+4	; 0x04
    56b0:	22 0f       	add	r18, r18
    56b2:	33 1f       	adc	r19, r19
    56b4:	ae 01       	movw	r20, r28
    56b6:	4f 5f       	subi	r20, 0xFF	; 255
    56b8:	5f 4f       	sbci	r21, 0xFF	; 255
    56ba:	24 0f       	add	r18, r20
    56bc:	35 1f       	adc	r19, r21
    56be:	24 5f       	subi	r18, 0xF4	; 244
    56c0:	3f 4f       	sbci	r19, 0xFF	; 255
    56c2:	d9 01       	movw	r26, r18
    56c4:	2d 91       	ld	r18, X+
    56c6:	3c 91       	ld	r19, X
    56c8:	88 0f       	add	r24, r24
    56ca:	99 1f       	adc	r25, r25
    56cc:	ae 01       	movw	r20, r28
    56ce:	4f 5f       	subi	r20, 0xFF	; 255
    56d0:	5f 4f       	sbci	r21, 0xFF	; 255
    56d2:	84 0f       	add	r24, r20
    56d4:	95 1f       	adc	r25, r21
    56d6:	44 96       	adiw	r24, 0x14	; 20
    56d8:	fc 01       	movw	r30, r24
    56da:	31 83       	std	Z+1, r19	; 0x01
    56dc:	20 83       	st	Z, r18
    56de:	8b 81       	ldd	r24, Y+3	; 0x03
    56e0:	9c 81       	ldd	r25, Y+4	; 0x04
    56e2:	01 96       	adiw	r24, 0x01	; 1
    56e4:	9c 83       	std	Y+4, r25	; 0x04
    56e6:	8b 83       	std	Y+3, r24	; 0x03
    56e8:	8b 81       	ldd	r24, Y+3	; 0x03
    56ea:	9c 81       	ldd	r25, Y+4	; 0x04
    56ec:	04 97       	sbiw	r24, 0x04	; 4
    56ee:	0c f2       	brlt	.-126    	; 0x5672 <InitPlayersAfterServerConnection+0x9a>
    56f0:	ce 01       	movw	r24, r28
    56f2:	81 58       	subi	r24, 0x81	; 129
    56f4:	9f 4f       	sbci	r25, 0xFF	; 255
    56f6:	dc 01       	movw	r26, r24
    56f8:	8d 91       	ld	r24, X+
    56fa:	9c 91       	ld	r25, X
    56fc:	9e 01       	movw	r18, r28
    56fe:	2f 57       	subi	r18, 0x7F	; 127
    5700:	3f 4f       	sbci	r19, 0xFF	; 255
    5702:	f9 01       	movw	r30, r18
    5704:	20 81       	ld	r18, Z
    5706:	31 81       	ldd	r19, Z+1	; 0x01
    5708:	dc 01       	movw	r26, r24
    570a:	19 96       	adiw	r26, 0x09	; 9
    570c:	3c 93       	st	X, r19
    570e:	2e 93       	st	-X, r18
    5710:	18 97       	sbiw	r26, 0x08	; 8
    5712:	1e 82       	std	Y+6, r1	; 0x06
    5714:	1d 82       	std	Y+5, r1	; 0x05
    5716:	26 c0       	rjmp	.+76     	; 0x5764 <InitPlayersAfterServerConnection+0x18c>
    5718:	8d 81       	ldd	r24, Y+5	; 0x05
    571a:	9e 81       	ldd	r25, Y+6	; 0x06
    571c:	88 0f       	add	r24, r24
    571e:	99 1f       	adc	r25, r25
    5720:	9e 01       	movw	r18, r28
    5722:	2f 5f       	subi	r18, 0xFF	; 255
    5724:	3f 4f       	sbci	r19, 0xFF	; 255
    5726:	82 0f       	add	r24, r18
    5728:	93 1f       	adc	r25, r19
    572a:	44 96       	adiw	r24, 0x14	; 20
    572c:	fc 01       	movw	r30, r24
    572e:	20 81       	ld	r18, Z
    5730:	31 81       	ldd	r19, Z+1	; 0x01
    5732:	ce 01       	movw	r24, r28
    5734:	81 58       	subi	r24, 0x81	; 129
    5736:	9f 4f       	sbci	r25, 0xFF	; 255
    5738:	dc 01       	movw	r26, r24
    573a:	4d 91       	ld	r20, X+
    573c:	5c 91       	ld	r21, X
    573e:	6d 81       	ldd	r22, Y+5	; 0x05
    5740:	7e 81       	ldd	r23, Y+6	; 0x06
    5742:	e5 e1       	ldi	r30, 0x15	; 21
    5744:	e6 9f       	mul	r30, r22
    5746:	c0 01       	movw	r24, r0
    5748:	e7 9f       	mul	r30, r23
    574a:	90 0d       	add	r25, r0
    574c:	11 24       	eor	r1, r1
    574e:	84 0f       	add	r24, r20
    5750:	95 1f       	adc	r25, r21
    5752:	4d 96       	adiw	r24, 0x1d	; 29
    5754:	fc 01       	movw	r30, r24
    5756:	31 83       	std	Z+1, r19	; 0x01
    5758:	20 83       	st	Z, r18
    575a:	8d 81       	ldd	r24, Y+5	; 0x05
    575c:	9e 81       	ldd	r25, Y+6	; 0x06
    575e:	01 96       	adiw	r24, 0x01	; 1
    5760:	9e 83       	std	Y+6, r25	; 0x06
    5762:	8d 83       	std	Y+5, r24	; 0x05
    5764:	8d 81       	ldd	r24, Y+5	; 0x05
    5766:	9e 81       	ldd	r25, Y+6	; 0x06
    5768:	03 97       	sbiw	r24, 0x03	; 3
    576a:	b4 f2       	brlt	.-84     	; 0x5718 <InitPlayersAfterServerConnection+0x140>
    576c:	ce 01       	movw	r24, r28
    576e:	81 58       	subi	r24, 0x81	; 129
    5770:	9f 4f       	sbci	r25, 0xFF	; 255
    5772:	dc 01       	movw	r26, r24
    5774:	8d 91       	ld	r24, X+
    5776:	9c 91       	ld	r25, X
    5778:	9c 8f       	std	Y+28, r25	; 0x1c
    577a:	8b 8f       	std	Y+27, r24	; 0x1b
    577c:	ce 01       	movw	r24, r28
    577e:	81 58       	subi	r24, 0x81	; 129
    5780:	9f 4f       	sbci	r25, 0xFF	; 255
    5782:	fc 01       	movw	r30, r24
    5784:	80 81       	ld	r24, Z
    5786:	91 81       	ldd	r25, Z+1	; 0x01
    5788:	45 96       	adiw	r24, 0x15	; 21
    578a:	9e 8f       	std	Y+30, r25	; 0x1e
    578c:	8d 8f       	std	Y+29, r24	; 0x1d
    578e:	ce 01       	movw	r24, r28
    5790:	81 58       	subi	r24, 0x81	; 129
    5792:	9f 4f       	sbci	r25, 0xFF	; 255
    5794:	dc 01       	movw	r26, r24
    5796:	8d 91       	ld	r24, X+
    5798:	9c 91       	ld	r25, X
    579a:	8a 96       	adiw	r24, 0x2a	; 42
    579c:	98 a3       	std	Y+32, r25	; 0x20
    579e:	8f 8f       	std	Y+31, r24	; 0x1f
    57a0:	ce 01       	movw	r24, r28
    57a2:	81 58       	subi	r24, 0x81	; 129
    57a4:	9f 4f       	sbci	r25, 0xFF	; 255
    57a6:	fc 01       	movw	r30, r24
    57a8:	80 81       	ld	r24, Z
    57aa:	91 81       	ldd	r25, Z+1	; 0x01
    57ac:	cf 96       	adiw	r24, 0x3f	; 63
    57ae:	9a a3       	std	Y+34, r25	; 0x22
    57b0:	89 a3       	std	Y+33, r24	; 0x21
    57b2:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <COLOR_Blue>
    57b6:	a8 2f       	mov	r26, r24
    57b8:	cb 01       	movw	r24, r22
    57ba:	8b a3       	std	Y+35, r24	; 0x23
    57bc:	9c a3       	std	Y+36, r25	; 0x24
    57be:	ad a3       	std	Y+37, r26	; 0x25
    57c0:	0e 94 ca 34 	call	0x6994	; 0x6994 <COLOR_Red>
    57c4:	a8 2f       	mov	r26, r24
    57c6:	cb 01       	movw	r24, r22
    57c8:	8e a3       	std	Y+38, r24	; 0x26
    57ca:	9f a3       	std	Y+39, r25	; 0x27
    57cc:	a8 a7       	std	Y+40, r26	; 0x28
    57ce:	0e 94 06 35 	call	0x6a0c	; 0x6a0c <COLOR_Cyan>
    57d2:	a8 2f       	mov	r26, r24
    57d4:	cb 01       	movw	r24, r22
    57d6:	89 a7       	std	Y+41, r24	; 0x29
    57d8:	9a a7       	std	Y+42, r25	; 0x2a
    57da:	ab a7       	std	Y+43, r26	; 0x2b
    57dc:	0e 94 de 34 	call	0x69bc	; 0x69bc <COLOR_Green>
    57e0:	a8 2f       	mov	r26, r24
    57e2:	cb 01       	movw	r24, r22
    57e4:	8c a7       	std	Y+44, r24	; 0x2c
    57e6:	9d a7       	std	Y+45, r25	; 0x2d
    57e8:	ae a7       	std	Y+46, r26	; 0x2e
    57ea:	84 e6       	ldi	r24, 0x64	; 100
    57ec:	90 e0       	ldi	r25, 0x00	; 0
    57ee:	9a 87       	std	Y+10, r25	; 0x0a
    57f0:	89 87       	std	Y+9, r24	; 0x09
    57f2:	86 ee       	ldi	r24, 0xE6	; 230
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	98 ab       	std	Y+48, r25	; 0x30
    57f8:	8f a7       	std	Y+47, r24	; 0x2f
    57fa:	89 85       	ldd	r24, Y+9	; 0x09
    57fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    57fe:	9a ab       	std	Y+50, r25	; 0x32
    5800:	89 ab       	std	Y+49, r24	; 0x31
    5802:	89 85       	ldd	r24, Y+9	; 0x09
    5804:	9a 85       	ldd	r25, Y+10	; 0x0a
    5806:	9c ab       	std	Y+52, r25	; 0x34
    5808:	8b ab       	std	Y+51, r24	; 0x33
    580a:	86 ee       	ldi	r24, 0xE6	; 230
    580c:	90 e0       	ldi	r25, 0x00	; 0
    580e:	9e ab       	std	Y+54, r25	; 0x36
    5810:	8d ab       	std	Y+53, r24	; 0x35
    5812:	18 ae       	std	Y+56, r1	; 0x38
    5814:	1f aa       	std	Y+55, r1	; 0x37
    5816:	89 85       	ldd	r24, Y+9	; 0x09
    5818:	9a 85       	ldd	r25, Y+10	; 0x0a
    581a:	9a af       	std	Y+58, r25	; 0x3a
    581c:	89 af       	std	Y+57, r24	; 0x39
    581e:	89 85       	ldd	r24, Y+9	; 0x09
    5820:	9a 85       	ldd	r25, Y+10	; 0x0a
    5822:	9c af       	std	Y+60, r25	; 0x3c
    5824:	8b af       	std	Y+59, r24	; 0x3b
    5826:	1e ae       	std	Y+62, r1	; 0x3e
    5828:	1d ae       	std	Y+61, r1	; 0x3d
    582a:	29 85       	ldd	r18, Y+9	; 0x09
    582c:	3a 85       	ldd	r19, Y+10	; 0x0a
    582e:	ce 01       	movw	r24, r28
    5830:	cf 96       	adiw	r24, 0x3f	; 63
    5832:	dc 01       	movw	r26, r24
    5834:	2d 93       	st	X+, r18
    5836:	3c 93       	st	X, r19
    5838:	ce 01       	movw	r24, r28
    583a:	8f 5b       	subi	r24, 0xBF	; 191
    583c:	9f 4f       	sbci	r25, 0xFF	; 255
    583e:	fc 01       	movw	r30, r24
    5840:	11 82       	std	Z+1, r1	; 0x01
    5842:	10 82       	st	Z, r1
    5844:	ce 01       	movw	r24, r28
    5846:	8d 5b       	subi	r24, 0xBD	; 189
    5848:	9f 4f       	sbci	r25, 0xFF	; 255
    584a:	26 ee       	ldi	r18, 0xE6	; 230
    584c:	30 e0       	ldi	r19, 0x00	; 0
    584e:	dc 01       	movw	r26, r24
    5850:	2d 93       	st	X+, r18
    5852:	3c 93       	st	X, r19
    5854:	ce 01       	movw	r24, r28
    5856:	8b 5b       	subi	r24, 0xBB	; 187
    5858:	9f 4f       	sbci	r25, 0xFF	; 255
    585a:	29 85       	ldd	r18, Y+9	; 0x09
    585c:	3a 85       	ldd	r19, Y+10	; 0x0a
    585e:	fc 01       	movw	r30, r24
    5860:	31 83       	std	Z+1, r19	; 0x01
    5862:	20 83       	st	Z, r18
    5864:	ce 01       	movw	r24, r28
    5866:	89 5b       	subi	r24, 0xB9	; 185
    5868:	9f 4f       	sbci	r25, 0xFF	; 255
    586a:	29 85       	ldd	r18, Y+9	; 0x09
    586c:	3a 85       	ldd	r19, Y+10	; 0x0a
    586e:	dc 01       	movw	r26, r24
    5870:	2d 93       	st	X+, r18
    5872:	3c 93       	st	X, r19
    5874:	ce 01       	movw	r24, r28
    5876:	87 5b       	subi	r24, 0xB7	; 183
    5878:	9f 4f       	sbci	r25, 0xFF	; 255
    587a:	26 ee       	ldi	r18, 0xE6	; 230
    587c:	30 e0       	ldi	r19, 0x00	; 0
    587e:	fc 01       	movw	r30, r24
    5880:	31 83       	std	Z+1, r19	; 0x01
    5882:	20 83       	st	Z, r18
    5884:	ce 01       	movw	r24, r28
    5886:	85 5b       	subi	r24, 0xB5	; 181
    5888:	9f 4f       	sbci	r25, 0xFF	; 255
    588a:	dc 01       	movw	r26, r24
    588c:	1d 92       	st	X+, r1
    588e:	1c 92       	st	X, r1
    5890:	ce 01       	movw	r24, r28
    5892:	83 5b       	subi	r24, 0xB3	; 179
    5894:	9f 4f       	sbci	r25, 0xFF	; 255
    5896:	29 85       	ldd	r18, Y+9	; 0x09
    5898:	3a 85       	ldd	r19, Y+10	; 0x0a
    589a:	fc 01       	movw	r30, r24
    589c:	31 83       	std	Z+1, r19	; 0x01
    589e:	20 83       	st	Z, r18
    58a0:	ce 01       	movw	r24, r28
    58a2:	81 5b       	subi	r24, 0xB1	; 177
    58a4:	9f 4f       	sbci	r25, 0xFF	; 255
    58a6:	dc 01       	movw	r26, r24
    58a8:	1d 92       	st	X+, r1
    58aa:	1c 92       	st	X, r1
    58ac:	ce 01       	movw	r24, r28
    58ae:	8f 5a       	subi	r24, 0xAF	; 175
    58b0:	9f 4f       	sbci	r25, 0xFF	; 255
    58b2:	29 85       	ldd	r18, Y+9	; 0x09
    58b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    58b6:	fc 01       	movw	r30, r24
    58b8:	31 83       	std	Z+1, r19	; 0x01
    58ba:	20 83       	st	Z, r18
    58bc:	ce 01       	movw	r24, r28
    58be:	8d 5a       	subi	r24, 0xAD	; 173
    58c0:	9f 4f       	sbci	r25, 0xFF	; 255
    58c2:	29 85       	ldd	r18, Y+9	; 0x09
    58c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    58c6:	dc 01       	movw	r26, r24
    58c8:	2d 93       	st	X+, r18
    58ca:	3c 93       	st	X, r19
    58cc:	ce 01       	movw	r24, r28
    58ce:	8b 5a       	subi	r24, 0xAB	; 171
    58d0:	9f 4f       	sbci	r25, 0xFF	; 255
    58d2:	fc 01       	movw	r30, r24
    58d4:	11 82       	std	Z+1, r1	; 0x01
    58d6:	10 82       	st	Z, r1
    58d8:	ce 01       	movw	r24, r28
    58da:	89 5a       	subi	r24, 0xA9	; 169
    58dc:	9f 4f       	sbci	r25, 0xFF	; 255
    58de:	26 ee       	ldi	r18, 0xE6	; 230
    58e0:	30 e0       	ldi	r19, 0x00	; 0
    58e2:	dc 01       	movw	r26, r24
    58e4:	2d 93       	st	X+, r18
    58e6:	3c 93       	st	X, r19
    58e8:	ce 01       	movw	r24, r28
    58ea:	87 5a       	subi	r24, 0xA7	; 167
    58ec:	9f 4f       	sbci	r25, 0xFF	; 255
    58ee:	29 85       	ldd	r18, Y+9	; 0x09
    58f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    58f2:	fc 01       	movw	r30, r24
    58f4:	31 83       	std	Z+1, r19	; 0x01
    58f6:	20 83       	st	Z, r18
    58f8:	ce 01       	movw	r24, r28
    58fa:	85 5a       	subi	r24, 0xA5	; 165
    58fc:	9f 4f       	sbci	r25, 0xFF	; 255
    58fe:	29 85       	ldd	r18, Y+9	; 0x09
    5900:	3a 85       	ldd	r19, Y+10	; 0x0a
    5902:	dc 01       	movw	r26, r24
    5904:	2d 93       	st	X+, r18
    5906:	3c 93       	st	X, r19
    5908:	ce 01       	movw	r24, r28
    590a:	83 5a       	subi	r24, 0xA3	; 163
    590c:	9f 4f       	sbci	r25, 0xFF	; 255
    590e:	26 ee       	ldi	r18, 0xE6	; 230
    5910:	30 e0       	ldi	r19, 0x00	; 0
    5912:	fc 01       	movw	r30, r24
    5914:	31 83       	std	Z+1, r19	; 0x01
    5916:	20 83       	st	Z, r18
    5918:	ce 01       	movw	r24, r28
    591a:	81 5a       	subi	r24, 0xA1	; 161
    591c:	9f 4f       	sbci	r25, 0xFF	; 255
    591e:	29 85       	ldd	r18, Y+9	; 0x09
    5920:	3a 85       	ldd	r19, Y+10	; 0x0a
    5922:	dc 01       	movw	r26, r24
    5924:	2d 93       	st	X+, r18
    5926:	3c 93       	st	X, r19
    5928:	ce 01       	movw	r24, r28
    592a:	8f 59       	subi	r24, 0x9F	; 159
    592c:	9f 4f       	sbci	r25, 0xFF	; 255
    592e:	26 ee       	ldi	r18, 0xE6	; 230
    5930:	30 e0       	ldi	r19, 0x00	; 0
    5932:	fc 01       	movw	r30, r24
    5934:	31 83       	std	Z+1, r19	; 0x01
    5936:	20 83       	st	Z, r18
    5938:	ce 01       	movw	r24, r28
    593a:	8d 59       	subi	r24, 0x9D	; 157
    593c:	9f 4f       	sbci	r25, 0xFF	; 255
    593e:	dc 01       	movw	r26, r24
    5940:	1d 92       	st	X+, r1
    5942:	1c 92       	st	X, r1
    5944:	ce 01       	movw	r24, r28
    5946:	8b 59       	subi	r24, 0x9B	; 155
    5948:	9f 4f       	sbci	r25, 0xFF	; 255
    594a:	29 85       	ldd	r18, Y+9	; 0x09
    594c:	3a 85       	ldd	r19, Y+10	; 0x0a
    594e:	fc 01       	movw	r30, r24
    5950:	31 83       	std	Z+1, r19	; 0x01
    5952:	20 83       	st	Z, r18
    5954:	ce 01       	movw	r24, r28
    5956:	89 59       	subi	r24, 0x99	; 153
    5958:	9f 4f       	sbci	r25, 0xFF	; 255
    595a:	29 85       	ldd	r18, Y+9	; 0x09
    595c:	3a 85       	ldd	r19, Y+10	; 0x0a
    595e:	dc 01       	movw	r26, r24
    5960:	2d 93       	st	X+, r18
    5962:	3c 93       	st	X, r19
    5964:	ce 01       	movw	r24, r28
    5966:	87 59       	subi	r24, 0x97	; 151
    5968:	9f 4f       	sbci	r25, 0xFF	; 255
    596a:	fc 01       	movw	r30, r24
    596c:	11 82       	std	Z+1, r1	; 0x01
    596e:	10 82       	st	Z, r1
    5970:	ce 01       	movw	r24, r28
    5972:	85 59       	subi	r24, 0x95	; 149
    5974:	9f 4f       	sbci	r25, 0xFF	; 255
    5976:	26 ee       	ldi	r18, 0xE6	; 230
    5978:	30 e0       	ldi	r19, 0x00	; 0
    597a:	dc 01       	movw	r26, r24
    597c:	2d 93       	st	X+, r18
    597e:	3c 93       	st	X, r19
    5980:	ce 01       	movw	r24, r28
    5982:	83 59       	subi	r24, 0x93	; 147
    5984:	9f 4f       	sbci	r25, 0xFF	; 255
    5986:	29 85       	ldd	r18, Y+9	; 0x09
    5988:	3a 85       	ldd	r19, Y+10	; 0x0a
    598a:	fc 01       	movw	r30, r24
    598c:	31 83       	std	Z+1, r19	; 0x01
    598e:	20 83       	st	Z, r18
    5990:	ce 01       	movw	r24, r28
    5992:	81 59       	subi	r24, 0x91	; 145
    5994:	9f 4f       	sbci	r25, 0xFF	; 255
    5996:	20 e1       	ldi	r18, 0x10	; 16
    5998:	ef ee       	ldi	r30, 0xEF	; 239
    599a:	f8 e0       	ldi	r31, 0x08	; 8
    599c:	dc 01       	movw	r26, r24
    599e:	01 90       	ld	r0, Z+
    59a0:	0d 92       	st	X+, r0
    59a2:	2a 95       	dec	r18
    59a4:	e1 f7       	brne	.-8      	; 0x599e <InitPlayersAfterServerConnection+0x3c6>
    59a6:	18 86       	std	Y+8, r1	; 0x08
    59a8:	1f 82       	std	Y+7, r1	; 0x07
    59aa:	98 c0       	rjmp	.+304    	; 0x5adc <InitPlayersAfterServerConnection+0x504>
    59ac:	8f 81       	ldd	r24, Y+7	; 0x07
    59ae:	98 85       	ldd	r25, Y+8	; 0x08
    59b0:	88 0f       	add	r24, r24
    59b2:	99 1f       	adc	r25, r25
    59b4:	9e 01       	movw	r18, r28
    59b6:	2f 5f       	subi	r18, 0xFF	; 255
    59b8:	3f 4f       	sbci	r19, 0xFF	; 255
    59ba:	82 0f       	add	r24, r18
    59bc:	93 1f       	adc	r25, r19
    59be:	4a 96       	adiw	r24, 0x1a	; 26
    59c0:	dc 01       	movw	r26, r24
    59c2:	8d 91       	ld	r24, X+
    59c4:	9c 91       	ld	r25, X
    59c6:	fc 01       	movw	r30, r24
    59c8:	80 85       	ldd	r24, Z+8	; 0x08
    59ca:	91 85       	ldd	r25, Z+9	; 0x09
    59cc:	9c 87       	std	Y+12, r25	; 0x0c
    59ce:	8b 87       	std	Y+11, r24	; 0x0b
    59d0:	8f 81       	ldd	r24, Y+7	; 0x07
    59d2:	98 85       	ldd	r25, Y+8	; 0x08
    59d4:	88 0f       	add	r24, r24
    59d6:	99 1f       	adc	r25, r25
    59d8:	9e 01       	movw	r18, r28
    59da:	2f 5f       	subi	r18, 0xFF	; 255
    59dc:	3f 4f       	sbci	r19, 0xFF	; 255
    59de:	82 0f       	add	r24, r18
    59e0:	93 1f       	adc	r25, r19
    59e2:	4a 96       	adiw	r24, 0x1a	; 26
    59e4:	dc 01       	movw	r26, r24
    59e6:	8d 91       	ld	r24, X+
    59e8:	9c 91       	ld	r25, X
    59ea:	ae 01       	movw	r20, r28
    59ec:	41 59       	subi	r20, 0x91	; 145
    59ee:	5f 4f       	sbci	r21, 0xFF	; 255
    59f0:	9e 01       	movw	r18, r28
    59f2:	2f 57       	subi	r18, 0x7F	; 127
    59f4:	3f 4f       	sbci	r19, 0xFF	; 255
    59f6:	f9 01       	movw	r30, r18
    59f8:	20 81       	ld	r18, Z
    59fa:	31 81       	ldd	r19, Z+1	; 0x01
    59fc:	22 0f       	add	r18, r18
    59fe:	33 1f       	adc	r19, r19
    5a00:	22 0f       	add	r18, r18
    5a02:	33 1f       	adc	r19, r19
    5a04:	42 0f       	add	r20, r18
    5a06:	53 1f       	adc	r21, r19
    5a08:	2b 85       	ldd	r18, Y+11	; 0x0b
    5a0a:	3c 85       	ldd	r19, Y+12	; 0x0c
    5a0c:	24 0f       	add	r18, r20
    5a0e:	35 1f       	adc	r19, r21
    5a10:	d9 01       	movw	r26, r18
    5a12:	2c 91       	ld	r18, X
    5a14:	fc 01       	movw	r30, r24
    5a16:	27 83       	std	Z+7, r18	; 0x07
    5a18:	8f 81       	ldd	r24, Y+7	; 0x07
    5a1a:	98 85       	ldd	r25, Y+8	; 0x08
    5a1c:	88 0f       	add	r24, r24
    5a1e:	99 1f       	adc	r25, r25
    5a20:	9e 01       	movw	r18, r28
    5a22:	2f 5f       	subi	r18, 0xFF	; 255
    5a24:	3f 4f       	sbci	r19, 0xFF	; 255
    5a26:	82 0f       	add	r24, r18
    5a28:	93 1f       	adc	r25, r19
    5a2a:	4a 96       	adiw	r24, 0x1a	; 26
    5a2c:	dc 01       	movw	r26, r24
    5a2e:	4d 91       	ld	r20, X+
    5a30:	5c 91       	ld	r21, X
    5a32:	2b 85       	ldd	r18, Y+11	; 0x0b
    5a34:	3c 85       	ldd	r19, Y+12	; 0x0c
    5a36:	c9 01       	movw	r24, r18
    5a38:	88 0f       	add	r24, r24
    5a3a:	99 1f       	adc	r25, r25
    5a3c:	82 0f       	add	r24, r18
    5a3e:	93 1f       	adc	r25, r19
    5a40:	9e 01       	movw	r18, r28
    5a42:	2f 5f       	subi	r18, 0xFF	; 255
    5a44:	3f 4f       	sbci	r19, 0xFF	; 255
    5a46:	82 0f       	add	r24, r18
    5a48:	93 1f       	adc	r25, r19
    5a4a:	82 96       	adiw	r24, 0x22	; 34
    5a4c:	fc 01       	movw	r30, r24
    5a4e:	80 81       	ld	r24, Z
    5a50:	91 81       	ldd	r25, Z+1	; 0x01
    5a52:	a2 81       	ldd	r26, Z+2	; 0x02
    5a54:	fa 01       	movw	r30, r20
    5a56:	80 83       	st	Z, r24
    5a58:	91 83       	std	Z+1, r25	; 0x01
    5a5a:	a2 83       	std	Z+2, r26	; 0x02
    5a5c:	8f 81       	ldd	r24, Y+7	; 0x07
    5a5e:	98 85       	ldd	r25, Y+8	; 0x08
    5a60:	88 0f       	add	r24, r24
    5a62:	99 1f       	adc	r25, r25
    5a64:	9e 01       	movw	r18, r28
    5a66:	2f 5f       	subi	r18, 0xFF	; 255
    5a68:	3f 4f       	sbci	r19, 0xFF	; 255
    5a6a:	82 0f       	add	r24, r18
    5a6c:	93 1f       	adc	r25, r19
    5a6e:	4a 96       	adiw	r24, 0x1a	; 26
    5a70:	dc 01       	movw	r26, r24
    5a72:	0d 90       	ld	r0, X+
    5a74:	bc 91       	ld	r27, X
    5a76:	a0 2d       	mov	r26, r0
    5a78:	cd 57       	subi	r28, 0x7D	; 125
    5a7a:	df 4f       	sbci	r29, 0xFF	; 255
    5a7c:	b9 83       	std	Y+1, r27	; 0x01
    5a7e:	a8 83       	st	Y, r26
    5a80:	c3 58       	subi	r28, 0x83	; 131
    5a82:	d0 40       	sbci	r29, 0x00	; 0
    5a84:	ce 01       	movw	r24, r28
    5a86:	8f 57       	subi	r24, 0x7F	; 127
    5a88:	9f 4f       	sbci	r25, 0xFF	; 255
    5a8a:	fc 01       	movw	r30, r24
    5a8c:	80 81       	ld	r24, Z
    5a8e:	91 81       	ldd	r25, Z+1	; 0x01
    5a90:	9c 01       	movw	r18, r24
    5a92:	22 0f       	add	r18, r18
    5a94:	33 1f       	adc	r19, r19
    5a96:	22 0f       	add	r18, r18
    5a98:	33 1f       	adc	r19, r19
    5a9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a9e:	82 0f       	add	r24, r18
    5aa0:	93 1f       	adc	r25, r19
    5aa2:	88 0f       	add	r24, r24
    5aa4:	99 1f       	adc	r25, r25
    5aa6:	88 0f       	add	r24, r24
    5aa8:	99 1f       	adc	r25, r25
    5aaa:	9e 01       	movw	r18, r28
    5aac:	2f 5f       	subi	r18, 0xFF	; 255
    5aae:	3f 4f       	sbci	r19, 0xFF	; 255
    5ab0:	82 0f       	add	r24, r18
    5ab2:	93 1f       	adc	r25, r19
    5ab4:	8e 96       	adiw	r24, 0x2e	; 46
    5ab6:	fc 01       	movw	r30, r24
    5ab8:	80 81       	ld	r24, Z
    5aba:	91 81       	ldd	r25, Z+1	; 0x01
    5abc:	a2 81       	ldd	r26, Z+2	; 0x02
    5abe:	b3 81       	ldd	r27, Z+3	; 0x03
    5ac0:	ac 01       	movw	r20, r24
    5ac2:	bd 01       	movw	r22, r26
    5ac4:	cd 57       	subi	r28, 0x7D	; 125
    5ac6:	df 4f       	sbci	r29, 0xFF	; 255
    5ac8:	88 81       	ld	r24, Y
    5aca:	99 81       	ldd	r25, Y+1	; 0x01
    5acc:	c3 58       	subi	r28, 0x83	; 131
    5ace:	d0 40       	sbci	r29, 0x00	; 0
    5ad0:	72 d2       	rcall	.+1252   	; 0x5fb6 <PLYR_SetPlayerPosition>
    5ad2:	8f 81       	ldd	r24, Y+7	; 0x07
    5ad4:	98 85       	ldd	r25, Y+8	; 0x08
    5ad6:	01 96       	adiw	r24, 0x01	; 1
    5ad8:	98 87       	std	Y+8, r25	; 0x08
    5ada:	8f 83       	std	Y+7, r24	; 0x07
    5adc:	8f 81       	ldd	r24, Y+7	; 0x07
    5ade:	98 85       	ldd	r25, Y+8	; 0x08
    5ae0:	04 97       	sbiw	r24, 0x04	; 4
    5ae2:	0c f4       	brge	.+2      	; 0x5ae6 <InitPlayersAfterServerConnection+0x50e>
    5ae4:	63 cf       	rjmp	.-314    	; 0x59ac <InitPlayersAfterServerConnection+0x3d4>
    5ae6:	cc 57       	subi	r28, 0x7C	; 124
    5ae8:	df 4f       	sbci	r29, 0xFF	; 255
    5aea:	0f b6       	in	r0, 0x3f	; 63
    5aec:	f8 94       	cli
    5aee:	de bf       	out	0x3e, r29	; 62
    5af0:	0f be       	out	0x3f, r0	; 63
    5af2:	cd bf       	out	0x3d, r28	; 61
    5af4:	df 91       	pop	r29
    5af6:	cf 91       	pop	r28
    5af8:	08 95       	ret

00005afa <InitPlayers>:
    5afa:	0f 93       	push	r16
    5afc:	1f 93       	push	r17
    5afe:	cf 93       	push	r28
    5b00:	df 93       	push	r29
    5b02:	cd b7       	in	r28, 0x3d	; 61
    5b04:	de b7       	in	r29, 0x3e	; 62
    5b06:	a2 97       	sbiw	r28, 0x22	; 34
    5b08:	0f b6       	in	r0, 0x3f	; 63
    5b0a:	f8 94       	cli
    5b0c:	de bf       	out	0x3e, r29	; 62
    5b0e:	0f be       	out	0x3f, r0	; 63
    5b10:	cd bf       	out	0x3d, r28	; 61
    5b12:	98 a3       	std	Y+32, r25	; 0x20
    5b14:	8f 8f       	std	Y+31, r24	; 0x1f
    5b16:	66 d7       	rcall	.+3788   	; 0x69e4 <COLOR_Blue>
    5b18:	a8 2f       	mov	r26, r24
    5b1a:	cb 01       	movw	r24, r22
    5b1c:	8b 83       	std	Y+3, r24	; 0x03
    5b1e:	9c 83       	std	Y+4, r25	; 0x04
    5b20:	ad 83       	std	Y+5, r26	; 0x05
    5b22:	ef 8d       	ldd	r30, Y+31	; 0x1f
    5b24:	f8 a1       	ldd	r31, Y+32	; 0x20
    5b26:	8b 81       	ldd	r24, Y+3	; 0x03
    5b28:	9c 81       	ldd	r25, Y+4	; 0x04
    5b2a:	ad 81       	ldd	r26, Y+5	; 0x05
    5b2c:	0e e1       	ldi	r16, 0x1E	; 30
    5b2e:	10 e0       	ldi	r17, 0x00	; 0
    5b30:	2a e0       	ldi	r18, 0x0A	; 10
    5b32:	30 e0       	ldi	r19, 0x00	; 0
    5b34:	ac 01       	movw	r20, r24
    5b36:	6a 2f       	mov	r22, r26
    5b38:	cf 01       	movw	r24, r30
    5b3a:	97 d1       	rcall	.+814    	; 0x5e6a <PLYR_InitPlayer>
    5b3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5b3e:	98 a1       	ldd	r25, Y+32	; 0x20
    5b40:	fc 01       	movw	r30, r24
    5b42:	17 82       	std	Z+7, r1	; 0x07
    5b44:	3b d7       	rcall	.+3702   	; 0x69bc <COLOR_Green>
    5b46:	a8 2f       	mov	r26, r24
    5b48:	cb 01       	movw	r24, r22
    5b4a:	8e 83       	std	Y+6, r24	; 0x06
    5b4c:	9f 83       	std	Y+7, r25	; 0x07
    5b4e:	a8 87       	std	Y+8, r26	; 0x08
    5b50:	21 d7       	rcall	.+3650   	; 0x6994 <COLOR_Red>
    5b52:	a8 2f       	mov	r26, r24
    5b54:	cb 01       	movw	r24, r22
    5b56:	89 87       	std	Y+9, r24	; 0x09
    5b58:	9a 87       	std	Y+10, r25	; 0x0a
    5b5a:	ab 87       	std	Y+11, r26	; 0x0b
    5b5c:	57 d7       	rcall	.+3758   	; 0x6a0c <COLOR_Cyan>
    5b5e:	a8 2f       	mov	r26, r24
    5b60:	cb 01       	movw	r24, r22
    5b62:	8c 87       	std	Y+12, r24	; 0x0c
    5b64:	9d 87       	std	Y+13, r25	; 0x0d
    5b66:	ae 87       	std	Y+14, r26	; 0x0e
    5b68:	8c e0       	ldi	r24, 0x0C	; 12
    5b6a:	ef ef       	ldi	r30, 0xFF	; 255
    5b6c:	f8 e0       	ldi	r31, 0x08	; 8
    5b6e:	de 01       	movw	r26, r28
    5b70:	1f 96       	adiw	r26, 0x0f	; 15
    5b72:	01 90       	ld	r0, Z+
    5b74:	0d 92       	st	X+, r0
    5b76:	8a 95       	dec	r24
    5b78:	e1 f7       	brne	.-8      	; 0x5b72 <InitPlayers+0x78>
    5b7a:	1b 8e       	std	Y+27, r1	; 0x1b
    5b7c:	1c 8e       	std	Y+28, r1	; 0x1c
    5b7e:	1d 8e       	std	Y+29, r1	; 0x1d
    5b80:	1e 8e       	std	Y+30, r1	; 0x1e
    5b82:	81 e0       	ldi	r24, 0x01	; 1
    5b84:	8b 8f       	std	Y+27, r24	; 0x1b
    5b86:	81 e0       	ldi	r24, 0x01	; 1
    5b88:	8d 8f       	std	Y+29, r24	; 0x1d
    5b8a:	1a 82       	std	Y+2, r1	; 0x02
    5b8c:	19 82       	std	Y+1, r1	; 0x01
    5b8e:	71 c0       	rjmp	.+226    	; 0x5c72 <InitPlayers+0x178>
    5b90:	89 81       	ldd	r24, Y+1	; 0x01
    5b92:	9a 81       	ldd	r25, Y+2	; 0x02
    5b94:	9c 01       	movw	r18, r24
    5b96:	2f 5f       	subi	r18, 0xFF	; 255
    5b98:	3f 4f       	sbci	r19, 0xFF	; 255
    5b9a:	45 e1       	ldi	r20, 0x15	; 21
    5b9c:	42 9f       	mul	r20, r18
    5b9e:	c0 01       	movw	r24, r0
    5ba0:	43 9f       	mul	r20, r19
    5ba2:	90 0d       	add	r25, r0
    5ba4:	11 24       	eor	r1, r1
    5ba6:	2f 8d       	ldd	r18, Y+31	; 0x1f
    5ba8:	38 a1       	ldd	r19, Y+32	; 0x20
    5baa:	f9 01       	movw	r30, r18
    5bac:	e8 0f       	add	r30, r24
    5bae:	f9 1f       	adc	r31, r25
    5bb0:	fa a3       	std	Y+34, r31	; 0x22
    5bb2:	e9 a3       	std	Y+33, r30	; 0x21
    5bb4:	29 81       	ldd	r18, Y+1	; 0x01
    5bb6:	3a 81       	ldd	r19, Y+2	; 0x02
    5bb8:	c9 01       	movw	r24, r18
    5bba:	88 0f       	add	r24, r24
    5bbc:	99 1f       	adc	r25, r25
    5bbe:	82 0f       	add	r24, r18
    5bc0:	93 1f       	adc	r25, r19
    5bc2:	9e 01       	movw	r18, r28
    5bc4:	2f 5f       	subi	r18, 0xFF	; 255
    5bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    5bc8:	82 0f       	add	r24, r18
    5bca:	93 1f       	adc	r25, r19
    5bcc:	05 96       	adiw	r24, 0x05	; 5
    5bce:	fc 01       	movw	r30, r24
    5bd0:	80 81       	ld	r24, Z
    5bd2:	91 81       	ldd	r25, Z+1	; 0x01
    5bd4:	a2 81       	ldd	r26, Z+2	; 0x02
    5bd6:	0e e1       	ldi	r16, 0x1E	; 30
    5bd8:	10 e0       	ldi	r17, 0x00	; 0
    5bda:	2a e0       	ldi	r18, 0x0A	; 10
    5bdc:	30 e0       	ldi	r19, 0x00	; 0
    5bde:	ac 01       	movw	r20, r24
    5be0:	6a 2f       	mov	r22, r26
    5be2:	89 a1       	ldd	r24, Y+33	; 0x21
    5be4:	9a a1       	ldd	r25, Y+34	; 0x22
    5be6:	41 d1       	rcall	.+642    	; 0x5e6a <PLYR_InitPlayer>
    5be8:	9e 01       	movw	r18, r28
    5bea:	25 5e       	subi	r18, 0xE5	; 229
    5bec:	3f 4f       	sbci	r19, 0xFF	; 255
    5bee:	89 81       	ldd	r24, Y+1	; 0x01
    5bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    5bf2:	82 0f       	add	r24, r18
    5bf4:	93 1f       	adc	r25, r19
    5bf6:	fc 01       	movw	r30, r24
    5bf8:	60 81       	ld	r22, Z
    5bfa:	2f 8d       	ldd	r18, Y+31	; 0x1f
    5bfc:	38 a1       	ldd	r19, Y+32	; 0x20
    5bfe:	49 81       	ldd	r20, Y+1	; 0x01
    5c00:	5a 81       	ldd	r21, Y+2	; 0x02
    5c02:	75 e1       	ldi	r23, 0x15	; 21
    5c04:	74 9f       	mul	r23, r20
    5c06:	c0 01       	movw	r24, r0
    5c08:	75 9f       	mul	r23, r21
    5c0a:	90 0d       	add	r25, r0
    5c0c:	11 24       	eor	r1, r1
    5c0e:	82 0f       	add	r24, r18
    5c10:	93 1f       	adc	r25, r19
    5c12:	4c 96       	adiw	r24, 0x1c	; 28
    5c14:	fc 01       	movw	r30, r24
    5c16:	60 83       	st	Z, r22
    5c18:	89 81       	ldd	r24, Y+1	; 0x01
    5c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    5c1c:	9c 01       	movw	r18, r24
    5c1e:	2f 5f       	subi	r18, 0xFF	; 255
    5c20:	3f 4f       	sbci	r19, 0xFF	; 255
    5c22:	45 e1       	ldi	r20, 0x15	; 21
    5c24:	42 9f       	mul	r20, r18
    5c26:	c0 01       	movw	r24, r0
    5c28:	43 9f       	mul	r20, r19
    5c2a:	90 0d       	add	r25, r0
    5c2c:	11 24       	eor	r1, r1
    5c2e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    5c30:	38 a1       	ldd	r19, Y+32	; 0x20
    5c32:	f9 01       	movw	r30, r18
    5c34:	e8 0f       	add	r30, r24
    5c36:	f9 1f       	adc	r31, r25
    5c38:	fa a3       	std	Y+34, r31	; 0x22
    5c3a:	e9 a3       	std	Y+33, r30	; 0x21
    5c3c:	89 81       	ldd	r24, Y+1	; 0x01
    5c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c40:	88 0f       	add	r24, r24
    5c42:	99 1f       	adc	r25, r25
    5c44:	88 0f       	add	r24, r24
    5c46:	99 1f       	adc	r25, r25
    5c48:	9e 01       	movw	r18, r28
    5c4a:	2f 5f       	subi	r18, 0xFF	; 255
    5c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c4e:	82 0f       	add	r24, r18
    5c50:	93 1f       	adc	r25, r19
    5c52:	0e 96       	adiw	r24, 0x0e	; 14
    5c54:	fc 01       	movw	r30, r24
    5c56:	80 81       	ld	r24, Z
    5c58:	91 81       	ldd	r25, Z+1	; 0x01
    5c5a:	a2 81       	ldd	r26, Z+2	; 0x02
    5c5c:	b3 81       	ldd	r27, Z+3	; 0x03
    5c5e:	ac 01       	movw	r20, r24
    5c60:	bd 01       	movw	r22, r26
    5c62:	89 a1       	ldd	r24, Y+33	; 0x21
    5c64:	9a a1       	ldd	r25, Y+34	; 0x22
    5c66:	a7 d1       	rcall	.+846    	; 0x5fb6 <PLYR_SetPlayerPosition>
    5c68:	89 81       	ldd	r24, Y+1	; 0x01
    5c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    5c6c:	01 96       	adiw	r24, 0x01	; 1
    5c6e:	9a 83       	std	Y+2, r25	; 0x02
    5c70:	89 83       	std	Y+1, r24	; 0x01
    5c72:	89 81       	ldd	r24, Y+1	; 0x01
    5c74:	9a 81       	ldd	r25, Y+2	; 0x02
    5c76:	03 97       	sbiw	r24, 0x03	; 3
    5c78:	0c f4       	brge	.+2      	; 0x5c7c <InitPlayers+0x182>
    5c7a:	8a cf       	rjmp	.-236    	; 0x5b90 <InitPlayers+0x96>
    5c7c:	00 00       	nop
    5c7e:	a2 96       	adiw	r28, 0x22	; 34
    5c80:	0f b6       	in	r0, 0x3f	; 63
    5c82:	f8 94       	cli
    5c84:	de bf       	out	0x3e, r29	; 62
    5c86:	0f be       	out	0x3f, r0	; 63
    5c88:	cd bf       	out	0x3d, r28	; 61
    5c8a:	df 91       	pop	r29
    5c8c:	cf 91       	pop	r28
    5c8e:	1f 91       	pop	r17
    5c90:	0f 91       	pop	r16
    5c92:	08 95       	ret

00005c94 <GAME_RefreshScreenTask>:
    5c94:	0f 93       	push	r16
    5c96:	1f 93       	push	r17
    5c98:	cf 93       	push	r28
    5c9a:	df 93       	push	r29
    5c9c:	cd b7       	in	r28, 0x3d	; 61
    5c9e:	de b7       	in	r29, 0x3e	; 62
    5ca0:	a0 97       	sbiw	r28, 0x20	; 32
    5ca2:	0f b6       	in	r0, 0x3f	; 63
    5ca4:	f8 94       	cli
    5ca6:	de bf       	out	0x3e, r29	; 62
    5ca8:	0f be       	out	0x3f, r0	; 63
    5caa:	cd bf       	out	0x3d, r28	; 61
    5cac:	98 a3       	std	Y+32, r25	; 0x20
    5cae:	8f 8f       	std	Y+31, r24	; 0x1f
    5cb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5cb2:	98 a1       	ldd	r25, Y+32	; 0x20
    5cb4:	98 87       	std	Y+8, r25	; 0x08
    5cb6:	8f 83       	std	Y+7, r24	; 0x07
    5cb8:	0e 94 4d 22 	call	0x449a	; 0x449a <xTaskGetTickCount>
    5cbc:	9c 87       	std	Y+12, r25	; 0x0c
    5cbe:	8b 87       	std	Y+11, r24	; 0x0b
    5cc0:	8a e0       	ldi	r24, 0x0A	; 10
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
    5cc4:	9a 87       	std	Y+10, r25	; 0x0a
    5cc6:	89 87       	std	Y+9, r24	; 0x09
    5cc8:	8f 81       	ldd	r24, Y+7	; 0x07
    5cca:	98 85       	ldd	r25, Y+8	; 0x08
    5ccc:	9b d4       	rcall	.+2358   	; 0x6604 <RNDR_PlayerAsDrawable>
    5cce:	a8 2f       	mov	r26, r24
    5cd0:	cb 01       	movw	r24, r22
    5cd2:	8d 87       	std	Y+13, r24	; 0x0d
    5cd4:	9e 87       	std	Y+14, r25	; 0x0e
    5cd6:	af 87       	std	Y+15, r26	; 0x0f
    5cd8:	81 e0       	ldi	r24, 0x01	; 1
    5cda:	90 e0       	ldi	r25, 0x00	; 0
    5cdc:	9a 83       	std	Y+2, r25	; 0x02
    5cde:	89 83       	std	Y+1, r24	; 0x01
    5ce0:	2d c0       	rjmp	.+90     	; 0x5d3c <GAME_RefreshScreenTask+0xa8>
    5ce2:	89 81       	ldd	r24, Y+1	; 0x01
    5ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ce6:	01 97       	sbiw	r24, 0x01	; 1
    5ce8:	9c 01       	movw	r18, r24
    5cea:	2f 5f       	subi	r18, 0xFF	; 255
    5cec:	3f 4f       	sbci	r19, 0xFF	; 255
    5cee:	45 e1       	ldi	r20, 0x15	; 21
    5cf0:	42 9f       	mul	r20, r18
    5cf2:	c0 01       	movw	r24, r0
    5cf4:	43 9f       	mul	r20, r19
    5cf6:	90 0d       	add	r25, r0
    5cf8:	11 24       	eor	r1, r1
    5cfa:	2f 81       	ldd	r18, Y+7	; 0x07
    5cfc:	38 85       	ldd	r19, Y+8	; 0x08
    5cfe:	a9 01       	movw	r20, r18
    5d00:	48 0f       	add	r20, r24
    5d02:	59 1f       	adc	r21, r25
    5d04:	29 81       	ldd	r18, Y+1	; 0x01
    5d06:	3a 81       	ldd	r19, Y+2	; 0x02
    5d08:	c9 01       	movw	r24, r18
    5d0a:	88 0f       	add	r24, r24
    5d0c:	99 1f       	adc	r25, r25
    5d0e:	82 0f       	add	r24, r18
    5d10:	93 1f       	adc	r25, r19
    5d12:	9e 01       	movw	r18, r28
    5d14:	2f 5f       	subi	r18, 0xFF	; 255
    5d16:	3f 4f       	sbci	r19, 0xFF	; 255
    5d18:	82 0f       	add	r24, r18
    5d1a:	93 1f       	adc	r25, r19
    5d1c:	8c 01       	movw	r16, r24
    5d1e:	04 5f       	subi	r16, 0xF4	; 244
    5d20:	1f 4f       	sbci	r17, 0xFF	; 255
    5d22:	ca 01       	movw	r24, r20
    5d24:	6f d4       	rcall	.+2270   	; 0x6604 <RNDR_PlayerAsDrawable>
    5d26:	a8 2f       	mov	r26, r24
    5d28:	cb 01       	movw	r24, r22
    5d2a:	f8 01       	movw	r30, r16
    5d2c:	80 83       	st	Z, r24
    5d2e:	91 83       	std	Z+1, r25	; 0x01
    5d30:	a2 83       	std	Z+2, r26	; 0x02
    5d32:	89 81       	ldd	r24, Y+1	; 0x01
    5d34:	9a 81       	ldd	r25, Y+2	; 0x02
    5d36:	01 96       	adiw	r24, 0x01	; 1
    5d38:	9a 83       	std	Y+2, r25	; 0x02
    5d3a:	89 83       	std	Y+1, r24	; 0x01
    5d3c:	89 81       	ldd	r24, Y+1	; 0x01
    5d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d40:	04 97       	sbiw	r24, 0x04	; 4
    5d42:	7c f2       	brlt	.-98     	; 0x5ce2 <GAME_RefreshScreenTask+0x4e>
    5d44:	1c 82       	std	Y+4, r1	; 0x04
    5d46:	1b 82       	std	Y+3, r1	; 0x03
    5d48:	2a c0       	rjmp	.+84     	; 0x5d9e <GAME_RefreshScreenTask+0x10a>
    5d4a:	2b 81       	ldd	r18, Y+3	; 0x03
    5d4c:	3c 81       	ldd	r19, Y+4	; 0x04
    5d4e:	c9 01       	movw	r24, r18
    5d50:	88 0f       	add	r24, r24
    5d52:	99 1f       	adc	r25, r25
    5d54:	82 0f       	add	r24, r18
    5d56:	93 1f       	adc	r25, r19
    5d58:	9e 01       	movw	r18, r28
    5d5a:	2f 5f       	subi	r18, 0xFF	; 255
    5d5c:	3f 4f       	sbci	r19, 0xFF	; 255
    5d5e:	82 0f       	add	r24, r18
    5d60:	93 1f       	adc	r25, r19
    5d62:	0c 96       	adiw	r24, 0x0c	; 12
    5d64:	fc 01       	movw	r30, r24
    5d66:	80 81       	ld	r24, Z
    5d68:	91 81       	ldd	r25, Z+1	; 0x01
    5d6a:	a2 81       	ldd	r26, Z+2	; 0x02
    5d6c:	89 8f       	std	Y+25, r24	; 0x19
    5d6e:	9a 8f       	std	Y+26, r25	; 0x1a
    5d70:	ab 8f       	std	Y+27, r26	; 0x1b
    5d72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d74:	88 2f       	mov	r24, r24
    5d76:	90 e0       	ldi	r25, 0x00	; 0
    5d78:	88 0f       	add	r24, r24
    5d7a:	99 1f       	adc	r25, r25
    5d7c:	82 5f       	subi	r24, 0xF2	; 242
    5d7e:	98 4f       	sbci	r25, 0xF8	; 248
    5d80:	fc 01       	movw	r30, r24
    5d82:	20 81       	ld	r18, Z
    5d84:	31 81       	ldd	r19, Z+1	; 0x01
    5d86:	89 8d       	ldd	r24, Y+25	; 0x19
    5d88:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5d8a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    5d8c:	bc 01       	movw	r22, r24
    5d8e:	8a 2f       	mov	r24, r26
    5d90:	f9 01       	movw	r30, r18
    5d92:	19 95       	eicall
    5d94:	8b 81       	ldd	r24, Y+3	; 0x03
    5d96:	9c 81       	ldd	r25, Y+4	; 0x04
    5d98:	01 96       	adiw	r24, 0x01	; 1
    5d9a:	9c 83       	std	Y+4, r25	; 0x04
    5d9c:	8b 83       	std	Y+3, r24	; 0x03
    5d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    5da0:	9c 81       	ldd	r25, Y+4	; 0x04
    5da2:	04 97       	sbiw	r24, 0x04	; 4
    5da4:	94 f2       	brlt	.-92     	; 0x5d4a <GAME_RefreshScreenTask+0xb6>
    5da6:	1e 82       	std	Y+6, r1	; 0x06
    5da8:	1d 82       	std	Y+5, r1	; 0x05
    5daa:	2a c0       	rjmp	.+84     	; 0x5e00 <GAME_RefreshScreenTask+0x16c>
    5dac:	2d 81       	ldd	r18, Y+5	; 0x05
    5dae:	3e 81       	ldd	r19, Y+6	; 0x06
    5db0:	c9 01       	movw	r24, r18
    5db2:	88 0f       	add	r24, r24
    5db4:	99 1f       	adc	r25, r25
    5db6:	82 0f       	add	r24, r18
    5db8:	93 1f       	adc	r25, r19
    5dba:	9e 01       	movw	r18, r28
    5dbc:	2f 5f       	subi	r18, 0xFF	; 255
    5dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    5dc0:	82 0f       	add	r24, r18
    5dc2:	93 1f       	adc	r25, r19
    5dc4:	0c 96       	adiw	r24, 0x0c	; 12
    5dc6:	fc 01       	movw	r30, r24
    5dc8:	80 81       	ld	r24, Z
    5dca:	91 81       	ldd	r25, Z+1	; 0x01
    5dcc:	a2 81       	ldd	r26, Z+2	; 0x02
    5dce:	8c 8f       	std	Y+28, r24	; 0x1c
    5dd0:	9d 8f       	std	Y+29, r25	; 0x1d
    5dd2:	ae 8f       	std	Y+30, r26	; 0x1e
    5dd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5dd6:	88 2f       	mov	r24, r24
    5dd8:	90 e0       	ldi	r25, 0x00	; 0
    5dda:	88 0f       	add	r24, r24
    5ddc:	99 1f       	adc	r25, r25
    5dde:	86 5f       	subi	r24, 0xF6	; 246
    5de0:	98 4f       	sbci	r25, 0xF8	; 248
    5de2:	fc 01       	movw	r30, r24
    5de4:	20 81       	ld	r18, Z
    5de6:	31 81       	ldd	r19, Z+1	; 0x01
    5de8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5dea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5dec:	ae 8d       	ldd	r26, Y+30	; 0x1e
    5dee:	bc 01       	movw	r22, r24
    5df0:	8a 2f       	mov	r24, r26
    5df2:	f9 01       	movw	r30, r18
    5df4:	19 95       	eicall
    5df6:	8d 81       	ldd	r24, Y+5	; 0x05
    5df8:	9e 81       	ldd	r25, Y+6	; 0x06
    5dfa:	01 96       	adiw	r24, 0x01	; 1
    5dfc:	9e 83       	std	Y+6, r25	; 0x06
    5dfe:	8d 83       	std	Y+5, r24	; 0x05
    5e00:	8d 81       	ldd	r24, Y+5	; 0x05
    5e02:	9e 81       	ldd	r25, Y+6	; 0x06
    5e04:	04 97       	sbiw	r24, 0x04	; 4
    5e06:	94 f2       	brlt	.-92     	; 0x5dac <GAME_RefreshScreenTask+0x118>
    5e08:	29 85       	ldd	r18, Y+9	; 0x09
    5e0a:	3a 85       	ldd	r19, Y+10	; 0x0a
    5e0c:	ce 01       	movw	r24, r28
    5e0e:	0b 96       	adiw	r24, 0x0b	; 11
    5e10:	b9 01       	movw	r22, r18
    5e12:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <xTaskDelayUntil>
    5e16:	96 cf       	rjmp	.-212    	; 0x5d44 <GAME_RefreshScreenTask+0xb0>

00005e18 <GAME_InitGame>:
}

void GAME_InitGame(Game *game)
{
    5e18:	cf 93       	push	r28
    5e1a:	df 93       	push	r29
    5e1c:	1f 92       	push	r1
    5e1e:	1f 92       	push	r1
    5e20:	cd b7       	in	r28, 0x3d	; 61
    5e22:	de b7       	in	r29, 0x3e	; 62
    5e24:	9a 83       	std	Y+2, r25	; 0x02
    5e26:	89 83       	std	Y+1, r24	; 0x01
	InitPlayers(game);
    5e28:	89 81       	ldd	r24, Y+1	; 0x01
    5e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    5e2c:	66 de       	rcall	.-820    	; 0x5afa <InitPlayers>
}
    5e2e:	00 00       	nop
    5e30:	0f 90       	pop	r0
    5e32:	0f 90       	pop	r0
    5e34:	df 91       	pop	r29
    5e36:	cf 91       	pop	r28
    5e38:	08 95       	ret

00005e3a <GAME_InitGameAfterServerConnection>:

void GAME_InitGameAfterServerConnection(Game *game, int localPlayerId)
{
    5e3a:	cf 93       	push	r28
    5e3c:	df 93       	push	r29
    5e3e:	00 d0       	rcall	.+0      	; 0x5e40 <GAME_InitGameAfterServerConnection+0x6>
    5e40:	1f 92       	push	r1
    5e42:	cd b7       	in	r28, 0x3d	; 61
    5e44:	de b7       	in	r29, 0x3e	; 62
    5e46:	9a 83       	std	Y+2, r25	; 0x02
    5e48:	89 83       	std	Y+1, r24	; 0x01
    5e4a:	7c 83       	std	Y+4, r23	; 0x04
    5e4c:	6b 83       	std	Y+3, r22	; 0x03
	InitPlayersAfterServerConnection(game, localPlayerId);
    5e4e:	2b 81       	ldd	r18, Y+3	; 0x03
    5e50:	3c 81       	ldd	r19, Y+4	; 0x04
    5e52:	89 81       	ldd	r24, Y+1	; 0x01
    5e54:	9a 81       	ldd	r25, Y+2	; 0x02
    5e56:	b9 01       	movw	r22, r18
    5e58:	bf db       	rcall	.-2178   	; 0x55d8 <InitPlayersAfterServerConnection>
}
    5e5a:	00 00       	nop
    5e5c:	0f 90       	pop	r0
    5e5e:	0f 90       	pop	r0
    5e60:	0f 90       	pop	r0
    5e62:	0f 90       	pop	r0
    5e64:	df 91       	pop	r29
    5e66:	cf 91       	pop	r28
    5e68:	08 95       	ret

00005e6a <PLYR_InitPlayer>:
#define LOWER_LEFT_RIGHT_POSITION_BOUND 0
#define UPPER_LEFT_RIGHT_POSITION_BOUND 230
#define MOVE_PLAYER_AMOUNT 20


void PLYR_InitPlayer(Player *p_player, RGB color, int width, int height) {
    5e6a:	0f 93       	push	r16
    5e6c:	1f 93       	push	r17
    5e6e:	cf 93       	push	r28
    5e70:	df 93       	push	r29
    5e72:	cd b7       	in	r28, 0x3d	; 61
    5e74:	de b7       	in	r29, 0x3e	; 62
    5e76:	2d 97       	sbiw	r28, 0x0d	; 13
    5e78:	0f b6       	in	r0, 0x3f	; 63
    5e7a:	f8 94       	cli
    5e7c:	de bf       	out	0x3e, r29	; 62
    5e7e:	0f be       	out	0x3f, r0	; 63
    5e80:	cd bf       	out	0x3d, r28	; 61
    5e82:	9e 83       	std	Y+6, r25	; 0x06
    5e84:	8d 83       	std	Y+5, r24	; 0x05
    5e86:	4f 83       	std	Y+7, r20	; 0x07
    5e88:	58 87       	std	Y+8, r21	; 0x08
    5e8a:	69 87       	std	Y+9, r22	; 0x09
    5e8c:	3b 87       	std	Y+11, r19	; 0x0b
    5e8e:	2a 87       	std	Y+10, r18	; 0x0a
    5e90:	1d 87       	std	Y+13, r17	; 0x0d
    5e92:	0c 87       	std	Y+12, r16	; 0x0c
    p_player->color = color;
    5e94:	2d 81       	ldd	r18, Y+5	; 0x05
    5e96:	3e 81       	ldd	r19, Y+6	; 0x06
    5e98:	8f 81       	ldd	r24, Y+7	; 0x07
    5e9a:	98 85       	ldd	r25, Y+8	; 0x08
    5e9c:	a9 85       	ldd	r26, Y+9	; 0x09
    5e9e:	f9 01       	movw	r30, r18
    5ea0:	80 83       	st	Z, r24
    5ea2:	91 83       	std	Z+1, r25	; 0x01
    5ea4:	a2 83       	std	Z+2, r26	; 0x02
    //Place the player in the middle
    Coordinate initialPosition = {.XPosition = UPPER_LEFT_RIGHT_POSITION_BOUND / 2, .YPosition = 0};
    5ea6:	83 e7       	ldi	r24, 0x73	; 115
    5ea8:	90 e0       	ldi	r25, 0x00	; 0
    5eaa:	9a 83       	std	Y+2, r25	; 0x02
    5eac:	89 83       	std	Y+1, r24	; 0x01
    5eae:	1c 82       	std	Y+4, r1	; 0x04
    5eb0:	1b 82       	std	Y+3, r1	; 0x03
	p_player->hasBeenRenderedYet = 0;
    5eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    5eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    5eb6:	fc 01       	movw	r30, r24
    5eb8:	10 8a       	std	Z+16, r1	; 0x10
    5eba:	17 86       	std	Z+15, r1	; 0x0f
    p_player->Position = initialPosition;
    5ebc:	2d 81       	ldd	r18, Y+5	; 0x05
    5ebe:	3e 81       	ldd	r19, Y+6	; 0x06
    5ec0:	89 81       	ldd	r24, Y+1	; 0x01
    5ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ec4:	ab 81       	ldd	r26, Y+3	; 0x03
    5ec6:	bc 81       	ldd	r27, Y+4	; 0x04
    5ec8:	f9 01       	movw	r30, r18
    5eca:	83 83       	std	Z+3, r24	; 0x03
    5ecc:	94 83       	std	Z+4, r25	; 0x04
    5ece:	a5 83       	std	Z+5, r26	; 0x05
    5ed0:	b6 83       	std	Z+6, r27	; 0x06
    p_player->width = width;
    5ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    5ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    5ed6:	2a 85       	ldd	r18, Y+10	; 0x0a
    5ed8:	3b 85       	ldd	r19, Y+11	; 0x0b
    5eda:	fc 01       	movw	r30, r24
    5edc:	32 8b       	std	Z+18, r19	; 0x12
    5ede:	21 8b       	std	Z+17, r18	; 0x11
    p_player->height = height;
    5ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    5ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    5ee4:	2c 85       	ldd	r18, Y+12	; 0x0c
    5ee6:	3d 85       	ldd	r19, Y+13	; 0x0d
    5ee8:	fc 01       	movw	r30, r24
    5eea:	34 8b       	std	Z+20, r19	; 0x14
    5eec:	23 8b       	std	Z+19, r18	; 0x13
}
    5eee:	00 00       	nop
    5ef0:	2d 96       	adiw	r28, 0x0d	; 13
    5ef2:	0f b6       	in	r0, 0x3f	; 63
    5ef4:	f8 94       	cli
    5ef6:	de bf       	out	0x3e, r29	; 62
    5ef8:	0f be       	out	0x3f, r0	; 63
    5efa:	cd bf       	out	0x3d, r28	; 61
    5efc:	df 91       	pop	r29
    5efe:	cf 91       	pop	r28
    5f00:	1f 91       	pop	r17
    5f02:	0f 91       	pop	r16
    5f04:	08 95       	ret

00005f06 <PLYR_MoveRight>:
/*    The move right and move left functions only affect the X axis,
      and are only intented to be used for the local player. For
      players handled by the server the position can be set using the
      SetPlayerPosition function which can change the y coordinates */
/************************************************************************/
void PLYR_MoveRight(Player *p_player) {
    5f06:	cf 93       	push	r28
    5f08:	df 93       	push	r29
    5f0a:	00 d0       	rcall	.+0      	; 0x5f0c <PLYR_MoveRight+0x6>
    5f0c:	00 d0       	rcall	.+0      	; 0x5f0e <PLYR_MoveRight+0x8>
    5f0e:	cd b7       	in	r28, 0x3d	; 61
    5f10:	de b7       	in	r29, 0x3e	; 62
    5f12:	9e 83       	std	Y+6, r25	; 0x06
    5f14:	8d 83       	std	Y+5, r24	; 0x05
    Coordinate position = p_player->Position;
    5f16:	8d 81       	ldd	r24, Y+5	; 0x05
    5f18:	9e 81       	ldd	r25, Y+6	; 0x06
    5f1a:	fc 01       	movw	r30, r24
    5f1c:	83 81       	ldd	r24, Z+3	; 0x03
    5f1e:	94 81       	ldd	r25, Z+4	; 0x04
    5f20:	a5 81       	ldd	r26, Z+5	; 0x05
    5f22:	b6 81       	ldd	r27, Z+6	; 0x06
    5f24:	89 83       	std	Y+1, r24	; 0x01
    5f26:	9a 83       	std	Y+2, r25	; 0x02
    5f28:	ab 83       	std	Y+3, r26	; 0x03
    5f2a:	bc 83       	std	Y+4, r27	; 0x04
    position.XPosition = position.XPosition + MOVE_PLAYER_AMOUNT;
    5f2c:	89 81       	ldd	r24, Y+1	; 0x01
    5f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f30:	44 96       	adiw	r24, 0x14	; 20
    5f32:	9a 83       	std	Y+2, r25	; 0x02
    5f34:	89 83       	std	Y+1, r24	; 0x01
    PLYR_SetPlayerPosition(p_player, position);
    5f36:	89 81       	ldd	r24, Y+1	; 0x01
    5f38:	9a 81       	ldd	r25, Y+2	; 0x02
    5f3a:	ab 81       	ldd	r26, Y+3	; 0x03
    5f3c:	bc 81       	ldd	r27, Y+4	; 0x04
    5f3e:	2d 81       	ldd	r18, Y+5	; 0x05
    5f40:	3e 81       	ldd	r19, Y+6	; 0x06
    5f42:	ac 01       	movw	r20, r24
    5f44:	bd 01       	movw	r22, r26
    5f46:	c9 01       	movw	r24, r18
    5f48:	36 d0       	rcall	.+108    	; 0x5fb6 <PLYR_SetPlayerPosition>
}
    5f4a:	00 00       	nop
    5f4c:	26 96       	adiw	r28, 0x06	; 6
    5f4e:	0f b6       	in	r0, 0x3f	; 63
    5f50:	f8 94       	cli
    5f52:	de bf       	out	0x3e, r29	; 62
    5f54:	0f be       	out	0x3f, r0	; 63
    5f56:	cd bf       	out	0x3d, r28	; 61
    5f58:	df 91       	pop	r29
    5f5a:	cf 91       	pop	r28
    5f5c:	08 95       	ret

00005f5e <PLYR_MoveLeft>:

void PLYR_MoveLeft(Player *p_player) {
    5f5e:	cf 93       	push	r28
    5f60:	df 93       	push	r29
    5f62:	00 d0       	rcall	.+0      	; 0x5f64 <PLYR_MoveLeft+0x6>
    5f64:	00 d0       	rcall	.+0      	; 0x5f66 <PLYR_MoveLeft+0x8>
    5f66:	cd b7       	in	r28, 0x3d	; 61
    5f68:	de b7       	in	r29, 0x3e	; 62
    5f6a:	9e 83       	std	Y+6, r25	; 0x06
    5f6c:	8d 83       	std	Y+5, r24	; 0x05
    Coordinate position = p_player->Position;
    5f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    5f70:	9e 81       	ldd	r25, Y+6	; 0x06
    5f72:	fc 01       	movw	r30, r24
    5f74:	83 81       	ldd	r24, Z+3	; 0x03
    5f76:	94 81       	ldd	r25, Z+4	; 0x04
    5f78:	a5 81       	ldd	r26, Z+5	; 0x05
    5f7a:	b6 81       	ldd	r27, Z+6	; 0x06
    5f7c:	89 83       	std	Y+1, r24	; 0x01
    5f7e:	9a 83       	std	Y+2, r25	; 0x02
    5f80:	ab 83       	std	Y+3, r26	; 0x03
    5f82:	bc 83       	std	Y+4, r27	; 0x04
    position.XPosition = position.XPosition - MOVE_PLAYER_AMOUNT;
    5f84:	89 81       	ldd	r24, Y+1	; 0x01
    5f86:	9a 81       	ldd	r25, Y+2	; 0x02
    5f88:	44 97       	sbiw	r24, 0x14	; 20
    5f8a:	9a 83       	std	Y+2, r25	; 0x02
    5f8c:	89 83       	std	Y+1, r24	; 0x01
    PLYR_SetPlayerPosition(p_player, position);
    5f8e:	89 81       	ldd	r24, Y+1	; 0x01
    5f90:	9a 81       	ldd	r25, Y+2	; 0x02
    5f92:	ab 81       	ldd	r26, Y+3	; 0x03
    5f94:	bc 81       	ldd	r27, Y+4	; 0x04
    5f96:	2d 81       	ldd	r18, Y+5	; 0x05
    5f98:	3e 81       	ldd	r19, Y+6	; 0x06
    5f9a:	ac 01       	movw	r20, r24
    5f9c:	bd 01       	movw	r22, r26
    5f9e:	c9 01       	movw	r24, r18
    5fa0:	0a d0       	rcall	.+20     	; 0x5fb6 <PLYR_SetPlayerPosition>
}
    5fa2:	00 00       	nop
    5fa4:	26 96       	adiw	r28, 0x06	; 6
    5fa6:	0f b6       	in	r0, 0x3f	; 63
    5fa8:	f8 94       	cli
    5faa:	de bf       	out	0x3e, r29	; 62
    5fac:	0f be       	out	0x3f, r0	; 63
    5fae:	cd bf       	out	0x3d, r28	; 61
    5fb0:	df 91       	pop	r29
    5fb2:	cf 91       	pop	r28
    5fb4:	08 95       	ret

00005fb6 <PLYR_SetPlayerPosition>:

void PLYR_SetPlayerPosition(Player *p_player, Coordinate newPosition) {
    5fb6:	cf 93       	push	r28
    5fb8:	df 93       	push	r29
    5fba:	00 d0       	rcall	.+0      	; 0x5fbc <PLYR_SetPlayerPosition+0x6>
    5fbc:	00 d0       	rcall	.+0      	; 0x5fbe <PLYR_SetPlayerPosition+0x8>
    5fbe:	cd b7       	in	r28, 0x3d	; 61
    5fc0:	de b7       	in	r29, 0x3e	; 62
    5fc2:	9a 83       	std	Y+2, r25	; 0x02
    5fc4:	89 83       	std	Y+1, r24	; 0x01
    5fc6:	4b 83       	std	Y+3, r20	; 0x03
    5fc8:	5c 83       	std	Y+4, r21	; 0x04
    5fca:	6d 83       	std	Y+5, r22	; 0x05
    5fcc:	7e 83       	std	Y+6, r23	; 0x06
    if(newPosition.XPosition < LOWER_LEFT_RIGHT_POSITION_BOUND)
    5fce:	8b 81       	ldd	r24, Y+3	; 0x03
    5fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    5fd2:	99 23       	and	r25, r25
    5fd4:	1c f4       	brge	.+6      	; 0x5fdc <PLYR_SetPlayerPosition+0x26>
        newPosition.XPosition = LOWER_LEFT_RIGHT_POSITION_BOUND;
    5fd6:	1c 82       	std	Y+4, r1	; 0x04
    5fd8:	1b 82       	std	Y+3, r1	; 0x03
    5fda:	09 c0       	rjmp	.+18     	; 0x5fee <PLYR_SetPlayerPosition+0x38>
    else if (newPosition.XPosition > UPPER_LEFT_RIGHT_POSITION_BOUND)
    5fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    5fde:	9c 81       	ldd	r25, Y+4	; 0x04
    5fe0:	87 3e       	cpi	r24, 0xE7	; 231
    5fe2:	91 05       	cpc	r25, r1
    5fe4:	24 f0       	brlt	.+8      	; 0x5fee <PLYR_SetPlayerPosition+0x38>
        newPosition.XPosition = UPPER_LEFT_RIGHT_POSITION_BOUND;
    5fe6:	86 ee       	ldi	r24, 0xE6	; 230
    5fe8:	90 e0       	ldi	r25, 0x00	; 0
    5fea:	9c 83       	std	Y+4, r25	; 0x04
    5fec:	8b 83       	std	Y+3, r24	; 0x03
    if (newPosition.YPosition < LOWER_LEFT_RIGHT_POSITION_BOUND)
    5fee:	8d 81       	ldd	r24, Y+5	; 0x05
    5ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    5ff2:	99 23       	and	r25, r25
    5ff4:	1c f4       	brge	.+6      	; 0x5ffc <PLYR_SetPlayerPosition+0x46>
        newPosition.YPosition = LOWER_LEFT_RIGHT_POSITION_BOUND;
    5ff6:	1e 82       	std	Y+6, r1	; 0x06
    5ff8:	1d 82       	std	Y+5, r1	; 0x05
    5ffa:	09 c0       	rjmp	.+18     	; 0x600e <PLYR_SetPlayerPosition+0x58>
    else if (newPosition.YPosition > UPPER_LEFT_RIGHT_POSITION_BOUND)
    5ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    5ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    6000:	87 3e       	cpi	r24, 0xE7	; 231
    6002:	91 05       	cpc	r25, r1
    6004:	24 f0       	brlt	.+8      	; 0x600e <PLYR_SetPlayerPosition+0x58>
        newPosition.YPosition = UPPER_LEFT_RIGHT_POSITION_BOUND;
    6006:	86 ee       	ldi	r24, 0xE6	; 230
    6008:	90 e0       	ldi	r25, 0x00	; 0
    600a:	9e 83       	std	Y+6, r25	; 0x06
    600c:	8d 83       	std	Y+5, r24	; 0x05
    p_player->Position = newPosition;
    600e:	29 81       	ldd	r18, Y+1	; 0x01
    6010:	3a 81       	ldd	r19, Y+2	; 0x02
    6012:	8b 81       	ldd	r24, Y+3	; 0x03
    6014:	9c 81       	ldd	r25, Y+4	; 0x04
    6016:	ad 81       	ldd	r26, Y+5	; 0x05
    6018:	be 81       	ldd	r27, Y+6	; 0x06
    601a:	f9 01       	movw	r30, r18
    601c:	83 83       	std	Z+3, r24	; 0x03
    601e:	94 83       	std	Z+4, r25	; 0x04
    6020:	a5 83       	std	Z+5, r26	; 0x05
    6022:	b6 83       	std	Z+6, r27	; 0x06
}
    6024:	00 00       	nop
    6026:	26 96       	adiw	r28, 0x06	; 6
    6028:	0f b6       	in	r0, 0x3f	; 63
    602a:	f8 94       	cli
    602c:	de bf       	out	0x3e, r29	; 62
    602e:	0f be       	out	0x3f, r0	; 63
    6030:	cd bf       	out	0x3d, r28	; 61
    6032:	df 91       	pop	r29
    6034:	cf 91       	pop	r28
    6036:	08 95       	ret

00006038 <getXCoord>:
	
	return z2;
}

uint16_t getXCoord()  
{
    6038:	cf 93       	push	r28
    603a:	df 93       	push	r29
    603c:	cd b7       	in	r28, 0x3d	; 61
    603e:	de b7       	in	r29, 0x3e	; 62
    6040:	2b 97       	sbiw	r28, 0x0b	; 11
    6042:	0f b6       	in	r0, 0x3f	; 63
    6044:	f8 94       	cli
    6046:	de bf       	out	0x3e, r29	; 62
    6048:	0f be       	out	0x3f, r0	; 63
    604a:	cd bf       	out	0x3d, r28	; 61
	uint8_t byte = 0x0B; 
    604c:	8b e0       	ldi	r24, 0x0B	; 11
    604e:	89 83       	std	Y+1, r24	; 0x01
	CS_low();
    6050:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <CS_low>
	bitBangTransmit(byte);
    6054:	89 81       	ldd	r24, Y+1	; 0x01
    6056:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <bitBangTransmit>
	uint16_t x = bitBangRecieve();
    605a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <bitBangRecieve>
    605e:	9b 83       	std	Y+3, r25	; 0x03
    6060:	8a 83       	std	Y+2, r24	; 0x02
	bitBangTransmit(byte);
    6062:	89 81       	ldd	r24, Y+1	; 0x01
    6064:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <bitBangTransmit>
	uint16_t x1 = bitBangRecieve();
    6068:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <bitBangRecieve>
    606c:	9d 83       	std	Y+5, r25	; 0x05
    606e:	8c 83       	std	Y+4, r24	; 0x04
	bitBangTransmit(byte);
    6070:	89 81       	ldd	r24, Y+1	; 0x01
    6072:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <bitBangTransmit>
	uint16_t x2 = bitBangRecieve();
    6076:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <bitBangRecieve>
    607a:	9f 83       	std	Y+7, r25	; 0x07
    607c:	8e 83       	std	Y+6, r24	; 0x06
	CS_high();
    607e:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <CS_high>
	uint16_t  x_pos = besttwoavg(x,x1,x2);
    6082:	4e 81       	ldd	r20, Y+6	; 0x06
    6084:	5f 81       	ldd	r21, Y+7	; 0x07
    6086:	2c 81       	ldd	r18, Y+4	; 0x04
    6088:	3d 81       	ldd	r19, Y+5	; 0x05
    608a:	8a 81       	ldd	r24, Y+2	; 0x02
    608c:	9b 81       	ldd	r25, Y+3	; 0x03
    608e:	b9 01       	movw	r22, r18
    6090:	51 d0       	rcall	.+162    	; 0x6134 <besttwoavg>
    6092:	99 87       	std	Y+9, r25	; 0x09
    6094:	88 87       	std	Y+8, r24	; 0x08
	uint16_t  x_cal = cal_Xpos(x_pos);
    6096:	88 85       	ldd	r24, Y+8	; 0x08
    6098:	99 85       	ldd	r25, Y+9	; 0x09
    609a:	f9 d0       	rcall	.+498    	; 0x628e <cal_Xpos>
    609c:	9b 87       	std	Y+11, r25	; 0x0b
    609e:	8a 87       	std	Y+10, r24	; 0x0a
	return x_cal;
    60a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    60a2:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    60a4:	2b 96       	adiw	r28, 0x0b	; 11
    60a6:	0f b6       	in	r0, 0x3f	; 63
    60a8:	f8 94       	cli
    60aa:	de bf       	out	0x3e, r29	; 62
    60ac:	0f be       	out	0x3f, r0	; 63
    60ae:	cd bf       	out	0x3d, r28	; 61
    60b0:	df 91       	pop	r29
    60b2:	cf 91       	pop	r28
    60b4:	08 95       	ret

000060b6 <getYCoord>:

uint16_t getYCoord()
{
    60b6:	cf 93       	push	r28
    60b8:	df 93       	push	r29
    60ba:	cd b7       	in	r28, 0x3d	; 61
    60bc:	de b7       	in	r29, 0x3e	; 62
    60be:	2b 97       	sbiw	r28, 0x0b	; 11
    60c0:	0f b6       	in	r0, 0x3f	; 63
    60c2:	f8 94       	cli
    60c4:	de bf       	out	0x3e, r29	; 62
    60c6:	0f be       	out	0x3f, r0	; 63
    60c8:	cd bf       	out	0x3d, r28	; 61
	uint8_t byte = 0x9;
    60ca:	89 e0       	ldi	r24, 0x09	; 9
    60cc:	89 83       	std	Y+1, r24	; 0x01
	CS_low();
    60ce:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <CS_low>
	bitBangTransmit(byte);
    60d2:	89 81       	ldd	r24, Y+1	; 0x01
    60d4:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <bitBangTransmit>
	uint16_t  y = bitBangRecieve(); 
    60d8:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <bitBangRecieve>
    60dc:	9b 83       	std	Y+3, r25	; 0x03
    60de:	8a 83       	std	Y+2, r24	; 0x02
	bitBangTransmit(byte);
    60e0:	89 81       	ldd	r24, Y+1	; 0x01
    60e2:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <bitBangTransmit>
	uint16_t  y1 = bitBangRecieve(); // first can be noicy
    60e6:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <bitBangRecieve>
    60ea:	9d 83       	std	Y+5, r25	; 0x05
    60ec:	8c 83       	std	Y+4, r24	; 0x04
	bitBangTransmit(byte);
    60ee:	89 81       	ldd	r24, Y+1	; 0x01
    60f0:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <bitBangTransmit>
	uint16_t  y2 = bitBangRecieve();
    60f4:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <bitBangRecieve>
    60f8:	9f 83       	std	Y+7, r25	; 0x07
    60fa:	8e 83       	std	Y+6, r24	; 0x06
	CS_high();
    60fc:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <CS_high>
	uint16_t  y_pos = besttwoavg(y,y1,y2);
    6100:	4e 81       	ldd	r20, Y+6	; 0x06
    6102:	5f 81       	ldd	r21, Y+7	; 0x07
    6104:	2c 81       	ldd	r18, Y+4	; 0x04
    6106:	3d 81       	ldd	r19, Y+5	; 0x05
    6108:	8a 81       	ldd	r24, Y+2	; 0x02
    610a:	9b 81       	ldd	r25, Y+3	; 0x03
    610c:	b9 01       	movw	r22, r18
    610e:	12 d0       	rcall	.+36     	; 0x6134 <besttwoavg>
    6110:	99 87       	std	Y+9, r25	; 0x09
    6112:	88 87       	std	Y+8, r24	; 0x08
	uint16_t  y_cal = cal_Ypos(y_pos);
    6114:	88 85       	ldd	r24, Y+8	; 0x08
    6116:	99 85       	ldd	r25, Y+9	; 0x09
    6118:	e9 d0       	rcall	.+466    	; 0x62ec <cal_Ypos>
    611a:	9b 87       	std	Y+11, r25	; 0x0b
    611c:	8a 87       	std	Y+10, r24	; 0x0a
	return y_cal;
    611e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6120:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    6122:	2b 96       	adiw	r28, 0x0b	; 11
    6124:	0f b6       	in	r0, 0x3f	; 63
    6126:	f8 94       	cli
    6128:	de bf       	out	0x3e, r29	; 62
    612a:	0f be       	out	0x3f, r0	; 63
    612c:	cd bf       	out	0x3d, r28	; 61
    612e:	df 91       	pop	r29
    6130:	cf 91       	pop	r28
    6132:	08 95       	ret

00006134 <besttwoavg>:
	//CS_high();
	//return Ly;
//}

uint16_t  besttwoavg( uint16_t  sample , uint16_t  sample1 , uint16_t  sample2 )
 {
    6134:	cf 93       	push	r28
    6136:	df 93       	push	r29
    6138:	cd b7       	in	r28, 0x3d	; 61
    613a:	de b7       	in	r29, 0x3e	; 62
    613c:	2e 97       	sbiw	r28, 0x0e	; 14
    613e:	0f b6       	in	r0, 0x3f	; 63
    6140:	f8 94       	cli
    6142:	de bf       	out	0x3e, r29	; 62
    6144:	0f be       	out	0x3f, r0	; 63
    6146:	cd bf       	out	0x3d, r28	; 61
    6148:	9a 87       	std	Y+10, r25	; 0x0a
    614a:	89 87       	std	Y+9, r24	; 0x09
    614c:	7c 87       	std	Y+12, r23	; 0x0c
    614e:	6b 87       	std	Y+11, r22	; 0x0b
    6150:	5e 87       	std	Y+14, r21	; 0x0e
    6152:	4d 87       	std	Y+13, r20	; 0x0d
	 uint16_t  a, b, c;
	 uint16_t  reta = 0;
    6154:	18 86       	std	Y+8, r1	; 0x08
    6156:	1f 82       	std	Y+7, r1	; 0x07
	 if ( sample > sample1 )
    6158:	29 85       	ldd	r18, Y+9	; 0x09
    615a:	3a 85       	ldd	r19, Y+10	; 0x0a
    615c:	8b 85       	ldd	r24, Y+11	; 0x0b
    615e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6160:	82 17       	cp	r24, r18
    6162:	93 07       	cpc	r25, r19
    6164:	58 f4       	brcc	.+22     	; 0x617c <besttwoavg+0x48>
	 a = sample - sample1; else a = sample1 - sample;
    6166:	29 85       	ldd	r18, Y+9	; 0x09
    6168:	3a 85       	ldd	r19, Y+10	; 0x0a
    616a:	8b 85       	ldd	r24, Y+11	; 0x0b
    616c:	9c 85       	ldd	r25, Y+12	; 0x0c
    616e:	a9 01       	movw	r20, r18
    6170:	48 1b       	sub	r20, r24
    6172:	59 0b       	sbc	r21, r25
    6174:	ca 01       	movw	r24, r20
    6176:	9a 83       	std	Y+2, r25	; 0x02
    6178:	89 83       	std	Y+1, r24	; 0x01
    617a:	0a c0       	rjmp	.+20     	; 0x6190 <besttwoavg+0x5c>
    617c:	2b 85       	ldd	r18, Y+11	; 0x0b
    617e:	3c 85       	ldd	r19, Y+12	; 0x0c
    6180:	89 85       	ldd	r24, Y+9	; 0x09
    6182:	9a 85       	ldd	r25, Y+10	; 0x0a
    6184:	a9 01       	movw	r20, r18
    6186:	48 1b       	sub	r20, r24
    6188:	59 0b       	sbc	r21, r25
    618a:	ca 01       	movw	r24, r20
    618c:	9a 83       	std	Y+2, r25	; 0x02
    618e:	89 83       	std	Y+1, r24	; 0x01
	 
	 if ( sample > sample2 )
    6190:	29 85       	ldd	r18, Y+9	; 0x09
    6192:	3a 85       	ldd	r19, Y+10	; 0x0a
    6194:	8d 85       	ldd	r24, Y+13	; 0x0d
    6196:	9e 85       	ldd	r25, Y+14	; 0x0e
    6198:	82 17       	cp	r24, r18
    619a:	93 07       	cpc	r25, r19
    619c:	58 f4       	brcc	.+22     	; 0x61b4 <besttwoavg+0x80>
	 b = sample - sample2; else b = sample2 - sample;
    619e:	29 85       	ldd	r18, Y+9	; 0x09
    61a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    61a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    61a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    61a6:	a9 01       	movw	r20, r18
    61a8:	48 1b       	sub	r20, r24
    61aa:	59 0b       	sbc	r21, r25
    61ac:	ca 01       	movw	r24, r20
    61ae:	9c 83       	std	Y+4, r25	; 0x04
    61b0:	8b 83       	std	Y+3, r24	; 0x03
    61b2:	0a c0       	rjmp	.+20     	; 0x61c8 <besttwoavg+0x94>
    61b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    61b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    61b8:	89 85       	ldd	r24, Y+9	; 0x09
    61ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    61bc:	a9 01       	movw	r20, r18
    61be:	48 1b       	sub	r20, r24
    61c0:	59 0b       	sbc	r21, r25
    61c2:	ca 01       	movw	r24, r20
    61c4:	9c 83       	std	Y+4, r25	; 0x04
    61c6:	8b 83       	std	Y+3, r24	; 0x03
	 
	 if ( sample2 > sample1 )
    61c8:	2d 85       	ldd	r18, Y+13	; 0x0d
    61ca:	3e 85       	ldd	r19, Y+14	; 0x0e
    61cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    61ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    61d0:	82 17       	cp	r24, r18
    61d2:	93 07       	cpc	r25, r19
    61d4:	58 f4       	brcc	.+22     	; 0x61ec <besttwoavg+0xb8>
	 c = sample2 - sample1; else c = sample1 - sample2;
    61d6:	2d 85       	ldd	r18, Y+13	; 0x0d
    61d8:	3e 85       	ldd	r19, Y+14	; 0x0e
    61da:	8b 85       	ldd	r24, Y+11	; 0x0b
    61dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    61de:	a9 01       	movw	r20, r18
    61e0:	48 1b       	sub	r20, r24
    61e2:	59 0b       	sbc	r21, r25
    61e4:	ca 01       	movw	r24, r20
    61e6:	9e 83       	std	Y+6, r25	; 0x06
    61e8:	8d 83       	std	Y+5, r24	; 0x05
    61ea:	0a c0       	rjmp	.+20     	; 0x6200 <besttwoavg+0xcc>
    61ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    61ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    61f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    61f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    61f4:	a9 01       	movw	r20, r18
    61f6:	48 1b       	sub	r20, r24
    61f8:	59 0b       	sbc	r21, r25
    61fa:	ca 01       	movw	r24, r20
    61fc:	9e 83       	std	Y+6, r25	; 0x06
    61fe:	8d 83       	std	Y+5, r24	; 0x05

	 if ( a <= b && a <= c )
    6200:	29 81       	ldd	r18, Y+1	; 0x01
    6202:	3a 81       	ldd	r19, Y+2	; 0x02
    6204:	8b 81       	ldd	r24, Y+3	; 0x03
    6206:	9c 81       	ldd	r25, Y+4	; 0x04
    6208:	82 17       	cp	r24, r18
    620a:	93 07       	cpc	r25, r19
    620c:	90 f0       	brcs	.+36     	; 0x6232 <besttwoavg+0xfe>
    620e:	29 81       	ldd	r18, Y+1	; 0x01
    6210:	3a 81       	ldd	r19, Y+2	; 0x02
    6212:	8d 81       	ldd	r24, Y+5	; 0x05
    6214:	9e 81       	ldd	r25, Y+6	; 0x06
    6216:	82 17       	cp	r24, r18
    6218:	93 07       	cpc	r25, r19
    621a:	58 f0       	brcs	.+22     	; 0x6232 <besttwoavg+0xfe>
	 reta = (sample + sample1) >> 1;
    621c:	29 85       	ldd	r18, Y+9	; 0x09
    621e:	3a 85       	ldd	r19, Y+10	; 0x0a
    6220:	8b 85       	ldd	r24, Y+11	; 0x0b
    6222:	9c 85       	ldd	r25, Y+12	; 0x0c
    6224:	82 0f       	add	r24, r18
    6226:	93 1f       	adc	r25, r19
    6228:	96 95       	lsr	r25
    622a:	87 95       	ror	r24
    622c:	98 87       	std	Y+8, r25	; 0x08
    622e:	8f 83       	std	Y+7, r24	; 0x07
    6230:	23 c0       	rjmp	.+70     	; 0x6278 <besttwoavg+0x144>
	 
	 else if ( b <= a && b <= c )
    6232:	2b 81       	ldd	r18, Y+3	; 0x03
    6234:	3c 81       	ldd	r19, Y+4	; 0x04
    6236:	89 81       	ldd	r24, Y+1	; 0x01
    6238:	9a 81       	ldd	r25, Y+2	; 0x02
    623a:	82 17       	cp	r24, r18
    623c:	93 07       	cpc	r25, r19
    623e:	90 f0       	brcs	.+36     	; 0x6264 <besttwoavg+0x130>
    6240:	2b 81       	ldd	r18, Y+3	; 0x03
    6242:	3c 81       	ldd	r19, Y+4	; 0x04
    6244:	8d 81       	ldd	r24, Y+5	; 0x05
    6246:	9e 81       	ldd	r25, Y+6	; 0x06
    6248:	82 17       	cp	r24, r18
    624a:	93 07       	cpc	r25, r19
    624c:	58 f0       	brcs	.+22     	; 0x6264 <besttwoavg+0x130>
	 reta = (sample + sample2) >> 1;
    624e:	29 85       	ldd	r18, Y+9	; 0x09
    6250:	3a 85       	ldd	r19, Y+10	; 0x0a
    6252:	8d 85       	ldd	r24, Y+13	; 0x0d
    6254:	9e 85       	ldd	r25, Y+14	; 0x0e
    6256:	82 0f       	add	r24, r18
    6258:	93 1f       	adc	r25, r19
    625a:	96 95       	lsr	r25
    625c:	87 95       	ror	r24
    625e:	98 87       	std	Y+8, r25	; 0x08
    6260:	8f 83       	std	Y+7, r24	; 0x07
    6262:	0a c0       	rjmp	.+20     	; 0x6278 <besttwoavg+0x144>
	 
	 else
	 reta = (sample1 + sample2) >> 1;
    6264:	2b 85       	ldd	r18, Y+11	; 0x0b
    6266:	3c 85       	ldd	r19, Y+12	; 0x0c
    6268:	8d 85       	ldd	r24, Y+13	; 0x0d
    626a:	9e 85       	ldd	r25, Y+14	; 0x0e
    626c:	82 0f       	add	r24, r18
    626e:	93 1f       	adc	r25, r19
    6270:	96 95       	lsr	r25
    6272:	87 95       	ror	r24
    6274:	98 87       	std	Y+8, r25	; 0x08
    6276:	8f 83       	std	Y+7, r24	; 0x07
	 return (reta);
    6278:	8f 81       	ldd	r24, Y+7	; 0x07
    627a:	98 85       	ldd	r25, Y+8	; 0x08
 }
    627c:	2e 96       	adiw	r28, 0x0e	; 14
    627e:	0f b6       	in	r0, 0x3f	; 63
    6280:	f8 94       	cli
    6282:	de bf       	out	0x3e, r29	; 62
    6284:	0f be       	out	0x3f, r0	; 63
    6286:	cd bf       	out	0x3d, r28	; 61
    6288:	df 91       	pop	r29
    628a:	cf 91       	pop	r28
    628c:	08 95       	ret

0000628e <cal_Xpos>:
  	//x: 515 3540
	//y: 572 3566
	//240x320
uint16_t  cal_Xpos( uint16_t  sample)
 {
    628e:	cf 93       	push	r28
    6290:	df 93       	push	r29
    6292:	00 d0       	rcall	.+0      	; 0x6294 <cal_Xpos+0x6>
    6294:	1f 92       	push	r1
    6296:	cd b7       	in	r28, 0x3d	; 61
    6298:	de b7       	in	r29, 0x3e	; 62
    629a:	9c 83       	std	Y+4, r25	; 0x04
    629c:	8b 83       	std	Y+3, r24	; 0x03
	 uint16_t  reta = 0;
    629e:	1a 82       	std	Y+2, r1	; 0x02
    62a0:	19 82       	std	Y+1, r1	; 0x01
	 reta = 0.0793*(sample-515);
    62a2:	8b 81       	ldd	r24, Y+3	; 0x03
    62a4:	9c 81       	ldd	r25, Y+4	; 0x04
    62a6:	83 50       	subi	r24, 0x03	; 3
    62a8:	92 40       	sbci	r25, 0x02	; 2
    62aa:	cc 01       	movw	r24, r24
    62ac:	a0 e0       	ldi	r26, 0x00	; 0
    62ae:	b0 e0       	ldi	r27, 0x00	; 0
    62b0:	bc 01       	movw	r22, r24
    62b2:	cd 01       	movw	r24, r26
    62b4:	58 d4       	rcall	.+2224   	; 0x6b66 <__floatunsisf>
    62b6:	dc 01       	movw	r26, r24
    62b8:	cb 01       	movw	r24, r22
    62ba:	2a e0       	ldi	r18, 0x0A	; 10
    62bc:	38 e6       	ldi	r19, 0x68	; 104
    62be:	42 ea       	ldi	r20, 0xA2	; 162
    62c0:	5d e3       	ldi	r21, 0x3D	; 61
    62c2:	bc 01       	movw	r22, r24
    62c4:	cd 01       	movw	r24, r26
    62c6:	05 d5       	rcall	.+2570   	; 0x6cd2 <__mulsf3>
    62c8:	dc 01       	movw	r26, r24
    62ca:	cb 01       	movw	r24, r22
    62cc:	bc 01       	movw	r22, r24
    62ce:	cd 01       	movw	r24, r26
    62d0:	1e d4       	rcall	.+2108   	; 0x6b0e <__fixunssfsi>
    62d2:	dc 01       	movw	r26, r24
    62d4:	cb 01       	movw	r24, r22
    62d6:	9a 83       	std	Y+2, r25	; 0x02
    62d8:	89 83       	std	Y+1, r24	; 0x01
	 return (reta);
    62da:	89 81       	ldd	r24, Y+1	; 0x01
    62dc:	9a 81       	ldd	r25, Y+2	; 0x02
 }
    62de:	0f 90       	pop	r0
    62e0:	0f 90       	pop	r0
    62e2:	0f 90       	pop	r0
    62e4:	0f 90       	pop	r0
    62e6:	df 91       	pop	r29
    62e8:	cf 91       	pop	r28
    62ea:	08 95       	ret

000062ec <cal_Ypos>:
 
uint16_t  cal_Ypos( uint16_t  sample)
  {
    62ec:	cf 93       	push	r28
    62ee:	df 93       	push	r29
    62f0:	00 d0       	rcall	.+0      	; 0x62f2 <cal_Ypos+0x6>
    62f2:	1f 92       	push	r1
    62f4:	cd b7       	in	r28, 0x3d	; 61
    62f6:	de b7       	in	r29, 0x3e	; 62
    62f8:	9c 83       	std	Y+4, r25	; 0x04
    62fa:	8b 83       	std	Y+3, r24	; 0x03
	  uint16_t  reta = 0;
    62fc:	1a 82       	std	Y+2, r1	; 0x02
    62fe:	19 82       	std	Y+1, r1	; 0x01
	  reta = 0.1068*(sample-572);
    6300:	8b 81       	ldd	r24, Y+3	; 0x03
    6302:	9c 81       	ldd	r25, Y+4	; 0x04
    6304:	8c 53       	subi	r24, 0x3C	; 60
    6306:	92 40       	sbci	r25, 0x02	; 2
    6308:	cc 01       	movw	r24, r24
    630a:	a0 e0       	ldi	r26, 0x00	; 0
    630c:	b0 e0       	ldi	r27, 0x00	; 0
    630e:	bc 01       	movw	r22, r24
    6310:	cd 01       	movw	r24, r26
    6312:	29 d4       	rcall	.+2130   	; 0x6b66 <__floatunsisf>
    6314:	dc 01       	movw	r26, r24
    6316:	cb 01       	movw	r24, r22
    6318:	25 ef       	ldi	r18, 0xF5	; 245
    631a:	39 eb       	ldi	r19, 0xB9	; 185
    631c:	4a ed       	ldi	r20, 0xDA	; 218
    631e:	5d e3       	ldi	r21, 0x3D	; 61
    6320:	bc 01       	movw	r22, r24
    6322:	cd 01       	movw	r24, r26
    6324:	d6 d4       	rcall	.+2476   	; 0x6cd2 <__mulsf3>
    6326:	dc 01       	movw	r26, r24
    6328:	cb 01       	movw	r24, r22
    632a:	bc 01       	movw	r22, r24
    632c:	cd 01       	movw	r24, r26
    632e:	ef d3       	rcall	.+2014   	; 0x6b0e <__fixunssfsi>
    6330:	dc 01       	movw	r26, r24
    6332:	cb 01       	movw	r24, r22
    6334:	9a 83       	std	Y+2, r25	; 0x02
    6336:	89 83       	std	Y+1, r24	; 0x01
	  return (reta);
    6338:	89 81       	ldd	r24, Y+1	; 0x01
    633a:	9a 81       	ldd	r25, Y+2	; 0x02
  }
    633c:	0f 90       	pop	r0
    633e:	0f 90       	pop	r0
    6340:	0f 90       	pop	r0
    6342:	0f 90       	pop	r0
    6344:	df 91       	pop	r29
    6346:	cf 91       	pop	r28
    6348:	08 95       	ret

0000634a <touched_readX>:

uint16_t touched_readX()
{
    634a:	cf 93       	push	r28
    634c:	df 93       	push	r29
    634e:	1f 92       	push	r1
    6350:	1f 92       	push	r1
    6352:	cd b7       	in	r28, 0x3d	; 61
    6354:	de b7       	in	r29, 0x3e	; 62
	uint16_t x = getXCoord();
    6356:	70 de       	rcall	.-800    	; 0x6038 <getXCoord>
    6358:	9a 83       	std	Y+2, r25	; 0x02
    635a:	89 83       	std	Y+1, r24	; 0x01
	return x;
    635c:	89 81       	ldd	r24, Y+1	; 0x01
    635e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6360:	0f 90       	pop	r0
    6362:	0f 90       	pop	r0
    6364:	df 91       	pop	r29
    6366:	cf 91       	pop	r28
    6368:	08 95       	ret

0000636a <touched_readY>:

uint16_t touched_readY()
{
    636a:	cf 93       	push	r28
    636c:	df 93       	push	r29
    636e:	1f 92       	push	r1
    6370:	1f 92       	push	r1
    6372:	cd b7       	in	r28, 0x3d	; 61
    6374:	de b7       	in	r29, 0x3e	; 62
	uint16_t y = getYCoord();
    6376:	9f de       	rcall	.-706    	; 0x60b6 <getYCoord>
    6378:	9a 83       	std	Y+2, r25	; 0x02
    637a:	89 83       	std	Y+1, r24	; 0x01
	return y;
    637c:	89 81       	ldd	r24, Y+1	; 0x01
    637e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6380:	0f 90       	pop	r0
    6382:	0f 90       	pop	r0
    6384:	df 91       	pop	r29
    6386:	cf 91       	pop	r28
    6388:	08 95       	ret

0000638a <touchTaskOnInterrupt>:

uint16_t touchTaskOnInterrupt()
{
    638a:	cf 93       	push	r28
    638c:	df 93       	push	r29
    638e:	cd b7       	in	r28, 0x3d	; 61
    6390:	de b7       	in	r29, 0x3e	; 62
	static uint16_t coordinateTouch[1];
	coordinateTouch[0] = touched_readX();
    6392:	db df       	rcall	.-74     	; 0x634a <touched_readX>
    6394:	90 93 c4 13 	sts	0x13C4, r25	; 0x8013c4 <coordinateTouch.2033+0x1>
    6398:	80 93 c3 13 	sts	0x13C3, r24	; 0x8013c3 <coordinateTouch.2033>
	coordinateTouch[1] = touched_readY();
    639c:	e6 df       	rcall	.-52     	; 0x636a <touched_readY>
    639e:	90 93 c6 13 	sts	0x13C6, r25	; 0x8013c6 <g_espCommandQueue+0x1>
    63a2:	80 93 c5 13 	sts	0x13C5, r24	; 0x8013c5 <g_espCommandQueue>
    63a6:	8c e3       	ldi	r24, 0x3C	; 60
	EIFR |= 1 << INTF4;
    63a8:	90 e0       	ldi	r25, 0x00	; 0
    63aa:	2c e3       	ldi	r18, 0x3C	; 60
    63ac:	30 e0       	ldi	r19, 0x00	; 0
    63ae:	f9 01       	movw	r30, r18
    63b0:	20 81       	ld	r18, Z
    63b2:	20 61       	ori	r18, 0x10	; 16
    63b4:	fc 01       	movw	r30, r24
    63b6:	20 83       	st	Z, r18
    63b8:	8d e3       	ldi	r24, 0x3D	; 61
	EIMSK |= 1 << INT4;
    63ba:	90 e0       	ldi	r25, 0x00	; 0
    63bc:	2d e3       	ldi	r18, 0x3D	; 61
    63be:	30 e0       	ldi	r19, 0x00	; 0
    63c0:	f9 01       	movw	r30, r18
    63c2:	20 81       	ld	r18, Z
    63c4:	20 61       	ori	r18, 0x10	; 16
    63c6:	fc 01       	movw	r30, r24
    63c8:	20 83       	st	Z, r18
    63ca:	83 ec       	ldi	r24, 0xC3	; 195

	return coordinateTouch;
    63cc:	93 e1       	ldi	r25, 0x13	; 19
    63ce:	df 91       	pop	r29
}
    63d0:	cf 91       	pop	r28
    63d2:	08 95       	ret

000063d4 <initTouch>:
    63d4:	cf 93       	push	r28

void initTouch()
{
    63d6:	df 93       	push	r29
    63d8:	cd b7       	in	r28, 0x3d	; 61
    63da:	de b7       	in	r29, 0x3e	; 62
	bitBang_Init();
    63dc:	0e 94 8a 09 	call	0x1314	; 0x1314 <bitBang_Init>
}
    63e0:	00 00       	nop
    63e2:	df 91       	pop	r29
    63e4:	cf 91       	pop	r28
    63e6:	08 95       	ret

000063e8 <__vector_5>:

int touch_flag = 0;

ISR(INT4_vect)
{
    63e8:	1f 92       	push	r1
    63ea:	0f 92       	push	r0
    63ec:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    63f0:	0f 92       	push	r0
    63f2:	11 24       	eor	r1, r1
    63f4:	8f 93       	push	r24
    63f6:	9f 93       	push	r25
    63f8:	cf 93       	push	r28
    63fa:	df 93       	push	r29
    63fc:	cd b7       	in	r28, 0x3d	; 61
    63fe:	de b7       	in	r29, 0x3e	; 62
	//EIMSK &= ~(1 << 4);
	touch_flag = 1;
    6400:	81 e0       	ldi	r24, 0x01	; 1
    6402:	90 e0       	ldi	r25, 0x00	; 0
    6404:	90 93 c2 13 	sts	0x13C2, r25	; 0x8013c2 <touch_flag+0x1>
    6408:	80 93 c1 13 	sts	0x13C1, r24	; 0x8013c1 <touch_flag>
}
    640c:	00 00       	nop
    640e:	df 91       	pop	r29
    6410:	cf 91       	pop	r28
    6412:	9f 91       	pop	r25
    6414:	8f 91       	pop	r24
    6416:	0f 90       	pop	r0
    6418:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    641c:	0f 90       	pop	r0
    641e:	1f 90       	pop	r1
    6420:	18 95       	reti

00006422 <main>:


FILE uart_str = FDEV_SETUP_STREAM(UART_PutChar, NULL, _FDEV_SETUP_RW);

int main(int argc, char **argv)
{
    6422:	8f 92       	push	r8
    6424:	9f 92       	push	r9
    6426:	af 92       	push	r10
    6428:	bf 92       	push	r11
    642a:	cf 92       	push	r12
    642c:	df 92       	push	r13
    642e:	ef 92       	push	r14
    6430:	ff 92       	push	r15
    6432:	0f 93       	push	r16
    6434:	1f 93       	push	r17
    6436:	cf 93       	push	r28
    6438:	df 93       	push	r29
    643a:	cd b7       	in	r28, 0x3d	; 61
    643c:	de b7       	in	r29, 0x3e	; 62
    643e:	c2 56       	subi	r28, 0x62	; 98
    6440:	d1 09       	sbc	r29, r1
    6442:	0f b6       	in	r0, 0x3f	; 63
    6444:	f8 94       	cli
    6446:	de bf       	out	0x3e, r29	; 62
    6448:	0f be       	out	0x3f, r0	; 63
    644a:	cd bf       	out	0x3d, r28	; 61
    644c:	9e 01       	movw	r18, r28
    644e:	21 5a       	subi	r18, 0xA1	; 161
    6450:	3f 4f       	sbci	r19, 0xFF	; 255
    6452:	f9 01       	movw	r30, r18
    6454:	91 83       	std	Z+1, r25	; 0x01
    6456:	80 83       	st	Z, r24
    6458:	ce 01       	movw	r24, r28
    645a:	8f 59       	subi	r24, 0x9F	; 159
    645c:	9f 4f       	sbci	r25, 0xFF	; 255
    645e:	fc 01       	movw	r30, r24
    6460:	71 83       	std	Z+1, r23	; 0x01
    6462:	60 83       	st	Z, r22
	TFT_DisplayInit();
    6464:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <TFT_DisplayInit>
	UART_InitUART(57600, 8, 'N', 1);
    6468:	01 e0       	ldi	r16, 0x01	; 1
    646a:	2e e4       	ldi	r18, 0x4E	; 78
    646c:	48 e0       	ldi	r20, 0x08	; 8
    646e:	60 e0       	ldi	r22, 0x00	; 0
    6470:	71 ee       	ldi	r23, 0xE1	; 225
    6472:	80 e0       	ldi	r24, 0x00	; 0
    6474:	90 e0       	ldi	r25, 0x00	; 0
    6476:	0e 94 50 12 	call	0x24a0	; 0x24a0 <UART_InitUART>
	initTouch();
    647a:	ac df       	rcall	.-168    	; 0x63d4 <initTouch>
	stdout = &uart_str;
    647c:	8c ef       	ldi	r24, 0xFC	; 252
    647e:	96 e0       	ldi	r25, 0x06	; 6
    6480:	90 93 e0 13 	sts	0x13E0, r25	; 0x8013e0 <__iob+0x3>
    6484:	80 93 df 13 	sts	0x13DF, r24	; 0x8013df <__iob+0x2>
	printf("Test\r\n");
    6488:	8b e0       	ldi	r24, 0x0B	; 11
    648a:	99 e0       	ldi	r25, 0x09	; 9
    648c:	f2 d4       	rcall	.+2532   	; 0x6e72 <puts>
	printf("Test\r\n");
    648e:	8b e0       	ldi	r24, 0x0B	; 11
    6490:	99 e0       	ldi	r25, 0x09	; 9
    6492:	ef d4       	rcall	.+2526   	; 0x6e72 <puts>
	EICRB &= ~(1 << ISC40);
    6494:	8a e6       	ldi	r24, 0x6A	; 106
    6496:	90 e0       	ldi	r25, 0x00	; 0
    6498:	2a e6       	ldi	r18, 0x6A	; 106
    649a:	30 e0       	ldi	r19, 0x00	; 0
    649c:	f9 01       	movw	r30, r18
    649e:	20 81       	ld	r18, Z
    64a0:	2e 7f       	andi	r18, 0xFE	; 254
    64a2:	fc 01       	movw	r30, r24
    64a4:	20 83       	st	Z, r18
	EICRB |= 1 << ISC41;
    64a6:	8a e6       	ldi	r24, 0x6A	; 106
    64a8:	90 e0       	ldi	r25, 0x00	; 0
    64aa:	2a e6       	ldi	r18, 0x6A	; 106
    64ac:	30 e0       	ldi	r19, 0x00	; 0
    64ae:	f9 01       	movw	r30, r18
    64b0:	20 81       	ld	r18, Z
    64b2:	22 60       	ori	r18, 0x02	; 2
    64b4:	fc 01       	movw	r30, r24
    64b6:	20 83       	st	Z, r18
	EIMSK |= 1 << INT4;
    64b8:	8d e3       	ldi	r24, 0x3D	; 61
    64ba:	90 e0       	ldi	r25, 0x00	; 0
    64bc:	2d e3       	ldi	r18, 0x3D	; 61
    64be:	30 e0       	ldi	r19, 0x00	; 0
    64c0:	f9 01       	movw	r30, r18
    64c2:	20 81       	ld	r18, Z
    64c4:	20 61       	ori	r18, 0x10	; 16
    64c6:	fc 01       	movw	r30, r24
	//Make the whole screen white
	TFT_FillRectangle(0, 0, 320, 240, COLOR_White());
    64c8:	20 83       	st	Z, r18
    64ca:	4e d2       	rcall	.+1180   	; 0x6968 <COLOR_White>
    64cc:	a8 2f       	mov	r26, r24
    64ce:	cb 01       	movw	r24, r22
    64d0:	7c 01       	movw	r14, r24
    64d2:	0a 2f       	mov	r16, r26
    64d4:	20 ef       	ldi	r18, 0xF0	; 240
    64d6:	30 e0       	ldi	r19, 0x00	; 0
    64d8:	40 e4       	ldi	r20, 0x40	; 64
    64da:	51 e0       	ldi	r21, 0x01	; 1
    64dc:	60 e0       	ldi	r22, 0x00	; 0
    64de:	70 e0       	ldi	r23, 0x00	; 0
    64e0:	80 e0       	ldi	r24, 0x00	; 0
    64e2:	90 e0       	ldi	r25, 0x00	; 0
    64e4:	0e 94 7b 07 	call	0xef6	; 0xef6 <TFT_FillRectangle>
	//Make buttons
	RGB black = {.Red = 0, .Green = 0, .Blue = 0};
    64e8:	19 82       	std	Y+1, r1	; 0x01
    64ea:	1a 82       	std	Y+2, r1	; 0x02
    64ec:	1b 82       	std	Y+3, r1	; 0x03
	RGB yellow = {.Red = 31, .Green = 63, .Blue = 0};
    64ee:	8f e1       	ldi	r24, 0x1F	; 31
    64f0:	8c 83       	std	Y+4, r24	; 0x04
    64f2:	8f e3       	ldi	r24, 0x3F	; 63
    64f4:	8d 83       	std	Y+5, r24	; 0x05
    64f6:	1e 82       	std	Y+6, r1	; 0x06
	TFT_DrawCharacter(250,170,'L', yellow,black, 6, 8);
    64f8:	29 81       	ldd	r18, Y+1	; 0x01
    64fa:	3a 81       	ldd	r19, Y+2	; 0x02
    64fc:	4b 81       	ldd	r20, Y+3	; 0x03
    64fe:	8c 81       	ldd	r24, Y+4	; 0x04
    6500:	9d 81       	ldd	r25, Y+5	; 0x05
    6502:	ae 81       	ldd	r26, Y+6	; 0x06
    6504:	68 94       	set
    6506:	88 24       	eor	r8, r8
    6508:	83 f8       	bld	r8, 3
    650a:	91 2c       	mov	r9, r1
    650c:	0f 2e       	mov	r0, r31
    650e:	f6 e0       	ldi	r31, 0x06	; 6
    6510:	af 2e       	mov	r10, r31
    6512:	b1 2c       	mov	r11, r1
    6514:	f0 2d       	mov	r31, r0
    6516:	69 01       	movw	r12, r18
    6518:	e4 2e       	mov	r14, r20
    651a:	8c 01       	movw	r16, r24
    651c:	2a 2f       	mov	r18, r26
    651e:	4c e4       	ldi	r20, 0x4C	; 76
    6520:	6a ea       	ldi	r22, 0xAA	; 170
    6522:	70 e0       	ldi	r23, 0x00	; 0
    6524:	8a ef       	ldi	r24, 0xFA	; 250
    6526:	90 e0       	ldi	r25, 0x00	; 0
    6528:	0e 94 25 08 	call	0x104a	; 0x104a <TFT_DrawCharacter>
	TFT_DrawCharacter(250,20,'R', yellow, black, 6, 8);
    652c:	29 81       	ldd	r18, Y+1	; 0x01
    652e:	3a 81       	ldd	r19, Y+2	; 0x02
    6530:	4b 81       	ldd	r20, Y+3	; 0x03
    6532:	8c 81       	ldd	r24, Y+4	; 0x04
    6534:	9d 81       	ldd	r25, Y+5	; 0x05
    6536:	ae 81       	ldd	r26, Y+6	; 0x06
    6538:	68 94       	set
    653a:	88 24       	eor	r8, r8
    653c:	83 f8       	bld	r8, 3
    653e:	91 2c       	mov	r9, r1
    6540:	0f 2e       	mov	r0, r31
    6542:	f6 e0       	ldi	r31, 0x06	; 6
    6544:	af 2e       	mov	r10, r31
    6546:	b1 2c       	mov	r11, r1
    6548:	f0 2d       	mov	r31, r0
    654a:	69 01       	movw	r12, r18
    654c:	e4 2e       	mov	r14, r20
    654e:	8c 01       	movw	r16, r24
    6550:	2a 2f       	mov	r18, r26
    6552:	42 e5       	ldi	r20, 0x52	; 82
    6554:	64 e1       	ldi	r22, 0x14	; 20
    6556:	70 e0       	ldi	r23, 0x00	; 0
    6558:	8a ef       	ldi	r24, 0xFA	; 250
    655a:	90 e0       	ldi	r25, 0x00	; 0
    655c:	0e 94 25 08 	call	0x104a	; 0x104a <TFT_DrawCharacter>
	
	//Initialize the game and run the tasks associated with it
	Game game;
	GAME_InitGame(&game);
    6560:	ce 01       	movw	r24, r28
    6562:	07 96       	adiw	r24, 0x07	; 7
    6564:	59 dc       	rcall	.-1870   	; 0x5e18 <GAME_InitGame>
	
	xTaskCreate(GAME_RefreshScreenTask, "Task1", configMINIMAL_STACK_SIZE, (void *)&game, tskIDLE_PRIORITY, NULL);
    6566:	ce 01       	movw	r24, r28
    6568:	07 96       	adiw	r24, 0x07	; 7
    656a:	e1 2c       	mov	r14, r1
    656c:	f1 2c       	mov	r15, r1
    656e:	00 e0       	ldi	r16, 0x00	; 0
    6570:	9c 01       	movw	r18, r24
    6572:	4c e2       	ldi	r20, 0x2C	; 44
    6574:	51 e0       	ldi	r21, 0x01	; 1
    6576:	61 e1       	ldi	r22, 0x11	; 17
    6578:	79 e0       	ldi	r23, 0x09	; 9
    657a:	8a e4       	ldi	r24, 0x4A	; 74
    657c:	9e e2       	ldi	r25, 0x2E	; 46
    657e:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <xTaskCreate>
	//xTaskCreate(GAME_MovePlayersTask, "Task2", configMINIMAL_STACK_SIZE, (void *)&game, tskIDLE_PRIORITY, NULL);
	//Initialize ESP32 Communication and tasks associated  with it
	ESPCB_Initialize();
    6582:	0e 94 22 01 	call	0x244	; 0x244 <ESPCB_Initialize>
	ESPCH_TaskParams espchTaskParams = {.espCommandQueueHandle = ESPBC_GetCommandQueueHandle(), .game = &game};
    6586:	ce 01       	movw	r24, r28
    6588:	85 5a       	subi	r24, 0xA5	; 165
    658a:	9f 4f       	sbci	r25, 0xFF	; 255
    658c:	9e 01       	movw	r18, r28
    658e:	29 5f       	subi	r18, 0xF9	; 249
    6590:	3f 4f       	sbci	r19, 0xFF	; 255
    6592:	fc 01       	movw	r30, r24
    6594:	31 83       	std	Z+1, r19	; 0x01
    6596:	20 83       	st	Z, r18
    6598:	0e 94 a5 00 	call	0x14a	; 0x14a <ESPBC_GetCommandQueueHandle>
    659c:	9c 01       	movw	r18, r24
    659e:	ce 01       	movw	r24, r28
    65a0:	85 5a       	subi	r24, 0xA5	; 165
    65a2:	9f 4f       	sbci	r25, 0xFF	; 255
    65a4:	fc 01       	movw	r30, r24
    65a6:	33 83       	std	Z+3, r19	; 0x03
    65a8:	22 83       	std	Z+2, r18	; 0x02
	xTaskCreate(ESPBC_BuildCommandTask, "Task4", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
    65aa:	e1 2c       	mov	r14, r1
    65ac:	f1 2c       	mov	r15, r1
    65ae:	00 e0       	ldi	r16, 0x00	; 0
    65b0:	20 e0       	ldi	r18, 0x00	; 0
    65b2:	30 e0       	ldi	r19, 0x00	; 0
    65b4:	4c e2       	ldi	r20, 0x2C	; 44
    65b6:	51 e0       	ldi	r21, 0x01	; 1
    65b8:	67 e1       	ldi	r22, 0x17	; 23
    65ba:	79 e0       	ldi	r23, 0x09	; 9
    65bc:	80 eb       	ldi	r24, 0xB0	; 176
    65be:	90 e0       	ldi	r25, 0x00	; 0
    65c0:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <xTaskCreate>
	xTaskCreate(ESPCH_HandleCommandsTask, "Task0", configMINIMAL_STACK_SIZE, (void *)&espchTaskParams, tskIDLE_PRIORITY, NULL);
    65c4:	ce 01       	movw	r24, r28
    65c6:	85 5a       	subi	r24, 0xA5	; 165
    65c8:	9f 4f       	sbci	r25, 0xFF	; 255
    65ca:	e1 2c       	mov	r14, r1
    65cc:	f1 2c       	mov	r15, r1
    65ce:	00 e0       	ldi	r16, 0x00	; 0
    65d0:	9c 01       	movw	r18, r24
    65d2:	4c e2       	ldi	r20, 0x2C	; 44
    65d4:	51 e0       	ldi	r21, 0x01	; 1
    65d6:	6d e1       	ldi	r22, 0x1D	; 29
    65d8:	79 e0       	ldi	r23, 0x09	; 9
    65da:	88 e7       	ldi	r24, 0x78	; 120
    65dc:	93 e0       	ldi	r25, 0x03	; 3
    65de:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <xTaskCreate>
	xTaskCreate(polIfTouched, "Task5", configMINIMAL_STACK_SIZE, &game, tskIDLE_PRIORITY, NULL);
    65e2:	ce 01       	movw	r24, r28
    65e4:	07 96       	adiw	r24, 0x07	; 7
    65e6:	e1 2c       	mov	r14, r1
    65e8:	f1 2c       	mov	r15, r1
    65ea:	00 e0       	ldi	r16, 0x00	; 0
    65ec:	9c 01       	movw	r18, r24
    65ee:	4c e2       	ldi	r20, 0x2C	; 44
    65f0:	51 e0       	ldi	r21, 0x01	; 1
    65f2:	63 e2       	ldi	r22, 0x23	; 35
    65f4:	79 e0       	ldi	r23, 0x09	; 9
    65f6:	8d e9       	ldi	r24, 0x9D	; 157
    65f8:	99 e2       	ldi	r25, 0x29	; 41
    65fa:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <xTaskCreate>
	//xTaskCreate(GenerateTestCommands, "Task3", configMINIMAL_STACK_SIZE, &game, tskIDLE_PRIORITY, NULL);
	
	

	vTaskStartScheduler(); // When starting the scheduler, interrupts should be enabled.
    65fe:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <vTaskStartScheduler>


	while (1)
	{
	}
    6602:	ff cf       	rjmp	.-2      	; 0x6602 <main+0x1e0>

00006604 <RNDR_PlayerAsDrawable>:
    return (Drawable){(void*)c, DRAWABLE_PLAYER};
}

Drawable RNDR_ScoreboardAsDrawable(const Scoreboard* d) {
    return (Drawable){(void*)d, DRAWABLE_SCOREBOARD};
}
    6604:	cf 93       	push	r28
    6606:	df 93       	push	r29
    6608:	1f 92       	push	r1
    660a:	1f 92       	push	r1
    660c:	cd b7       	in	r28, 0x3d	; 61
    660e:	de b7       	in	r29, 0x3e	; 62
    6610:	9a 83       	std	Y+2, r25	; 0x02
    6612:	89 83       	std	Y+1, r24	; 0x01
    6614:	29 81       	ldd	r18, Y+1	; 0x01
    6616:	3a 81       	ldd	r19, Y+2	; 0x02
    6618:	41 e0       	ldi	r20, 0x01	; 1
    661a:	a4 2f       	mov	r26, r20
    661c:	c9 01       	movw	r24, r18
    661e:	bc 01       	movw	r22, r24
    6620:	8a 2f       	mov	r24, r26
    6622:	0f 90       	pop	r0
    6624:	0f 90       	pop	r0
    6626:	df 91       	pop	r29
    6628:	cf 91       	pop	r28
    662a:	08 95       	ret

0000662c <RenderScoreboard>:
void RenderScoreboard(Drawable a) {
    662c:	cf 93       	push	r28
    662e:	df 93       	push	r29
    6630:	00 d0       	rcall	.+0      	; 0x6632 <RenderScoreboard+0x6>
    6632:	1f 92       	push	r1
    6634:	1f 92       	push	r1
    6636:	cd b7       	in	r28, 0x3d	; 61
    6638:	de b7       	in	r29, 0x3e	; 62
    663a:	6b 83       	std	Y+3, r22	; 0x03
    663c:	7c 83       	std	Y+4, r23	; 0x04
    663e:	8d 83       	std	Y+5, r24	; 0x05
    Scoreboard* d = (Scoreboard*)a.drawable;
    6640:	8b 81       	ldd	r24, Y+3	; 0x03
    6642:	9c 81       	ldd	r25, Y+4	; 0x04
    6644:	9a 83       	std	Y+2, r25	; 0x02
    6646:	89 83       	std	Y+1, r24	; 0x01
    // Draw red parts of danish flag
    //FillRectangle(140,140,320-140,100,31,0,0);
}
    6648:	00 00       	nop
    664a:	0f 90       	pop	r0
    664c:	0f 90       	pop	r0
    664e:	0f 90       	pop	r0
    6650:	0f 90       	pop	r0
    6652:	0f 90       	pop	r0
    6654:	df 91       	pop	r29
    6656:	cf 91       	pop	r28
    6658:	08 95       	ret

0000665a <UnrenderScoreboard>:
void UnrenderScoreboard(Drawable a) {
    665a:	cf 93       	push	r28
    665c:	df 93       	push	r29
    665e:	00 d0       	rcall	.+0      	; 0x6660 <UnrenderScoreboard+0x6>
    6660:	1f 92       	push	r1
    6662:	1f 92       	push	r1
    6664:	cd b7       	in	r28, 0x3d	; 61
    6666:	de b7       	in	r29, 0x3e	; 62
    6668:	6b 83       	std	Y+3, r22	; 0x03
    666a:	7c 83       	std	Y+4, r23	; 0x04
    666c:	8d 83       	std	Y+5, r24	; 0x05
    Scoreboard* d = (Scoreboard*)a.drawable;
    666e:	8b 81       	ldd	r24, Y+3	; 0x03
    6670:	9c 81       	ldd	r25, Y+4	; 0x04
    6672:	9a 83       	std	Y+2, r25	; 0x02
    6674:	89 83       	std	Y+1, r24	; 0x01
    // Draw red parts of danish flag
    //FillRectangle(140,140,320-140,100,31,0,0);
}
    6676:	00 00       	nop
    6678:	0f 90       	pop	r0
    667a:	0f 90       	pop	r0
    667c:	0f 90       	pop	r0
    667e:	0f 90       	pop	r0
    6680:	0f 90       	pop	r0
    6682:	df 91       	pop	r29
    6684:	cf 91       	pop	r28
    6686:	08 95       	ret

00006688 <RenderPlayer>:

void RenderPlayer(Drawable a) {
    6688:	ef 92       	push	r14
    668a:	ff 92       	push	r15
    668c:	0f 93       	push	r16
    668e:	cf 93       	push	r28
    6690:	df 93       	push	r29
    6692:	cd b7       	in	r28, 0x3d	; 61
    6694:	de b7       	in	r29, 0x3e	; 62
    6696:	28 97       	sbiw	r28, 0x08	; 8
    6698:	0f b6       	in	r0, 0x3f	; 63
    669a:	f8 94       	cli
    669c:	de bf       	out	0x3e, r29	; 62
    669e:	0f be       	out	0x3f, r0	; 63
    66a0:	cd bf       	out	0x3d, r28	; 61
    66a2:	6e 83       	std	Y+6, r22	; 0x06
    66a4:	7f 83       	std	Y+7, r23	; 0x07
    66a6:	88 87       	std	Y+8, r24	; 0x08
    Player* p = (Player*)a.drawable;
    66a8:	8e 81       	ldd	r24, Y+6	; 0x06
    66aa:	9f 81       	ldd	r25, Y+7	; 0x07
    66ac:	9a 83       	std	Y+2, r25	; 0x02
    66ae:	89 83       	std	Y+1, r24	; 0x01
	
    RGB color = {.Blue = p->color.Blue, .Green = p->color.Green, .Red = p->color.Red};
    66b0:	89 81       	ldd	r24, Y+1	; 0x01
    66b2:	9a 81       	ldd	r25, Y+2	; 0x02
    66b4:	fc 01       	movw	r30, r24
    66b6:	80 81       	ld	r24, Z
    66b8:	8b 83       	std	Y+3, r24	; 0x03
    66ba:	89 81       	ldd	r24, Y+1	; 0x01
    66bc:	9a 81       	ldd	r25, Y+2	; 0x02
    66be:	fc 01       	movw	r30, r24
    66c0:	81 81       	ldd	r24, Z+1	; 0x01
    66c2:	8c 83       	std	Y+4, r24	; 0x04
    66c4:	89 81       	ldd	r24, Y+1	; 0x01
    66c6:	9a 81       	ldd	r25, Y+2	; 0x02
    66c8:	fc 01       	movw	r30, r24
    66ca:	82 81       	ldd	r24, Z+2	; 0x02
    66cc:	8d 83       	std	Y+5, r24	; 0x05
	if(p->orientation == PLAYER_HORIZONTAL)
    66ce:	89 81       	ldd	r24, Y+1	; 0x01
    66d0:	9a 81       	ldd	r25, Y+2	; 0x02
    66d2:	fc 01       	movw	r30, r24
    66d4:	87 81       	ldd	r24, Z+7	; 0x07
    66d6:	88 23       	and	r24, r24
    66d8:	f1 f5       	brne	.+124    	; 0x6756 <RenderPlayer+0xce>
	{
		TFT_FillRectangle(p->Position.XPosition, p->Position.YPosition, p->width, p->height, color);
    66da:	89 81       	ldd	r24, Y+1	; 0x01
    66dc:	9a 81       	ldd	r25, Y+2	; 0x02
    66de:	fc 01       	movw	r30, r24
    66e0:	83 89       	ldd	r24, Z+19	; 0x13
    66e2:	94 89       	ldd	r25, Z+20	; 0x14
    66e4:	9c 01       	movw	r18, r24
    66e6:	89 81       	ldd	r24, Y+1	; 0x01
    66e8:	9a 81       	ldd	r25, Y+2	; 0x02
    66ea:	fc 01       	movw	r30, r24
    66ec:	81 89       	ldd	r24, Z+17	; 0x11
    66ee:	92 89       	ldd	r25, Z+18	; 0x12
    66f0:	ac 01       	movw	r20, r24
    66f2:	89 81       	ldd	r24, Y+1	; 0x01
    66f4:	9a 81       	ldd	r25, Y+2	; 0x02
    66f6:	fc 01       	movw	r30, r24
    66f8:	85 81       	ldd	r24, Z+5	; 0x05
    66fa:	96 81       	ldd	r25, Z+6	; 0x06
    66fc:	bc 01       	movw	r22, r24
    66fe:	89 81       	ldd	r24, Y+1	; 0x01
    6700:	9a 81       	ldd	r25, Y+2	; 0x02
    6702:	fc 01       	movw	r30, r24
    6704:	83 81       	ldd	r24, Z+3	; 0x03
    6706:	94 81       	ldd	r25, Z+4	; 0x04
    6708:	fc 01       	movw	r30, r24
    670a:	8b 81       	ldd	r24, Y+3	; 0x03
    670c:	9c 81       	ldd	r25, Y+4	; 0x04
    670e:	ad 81       	ldd	r26, Y+5	; 0x05
    6710:	7c 01       	movw	r14, r24
    6712:	0a 2f       	mov	r16, r26
    6714:	cf 01       	movw	r24, r30
    6716:	0e 94 7b 07 	call	0xef6	; 0xef6 <TFT_FillRectangle>
		p->latestRenderedOrientation = p->orientation;
    671a:	89 81       	ldd	r24, Y+1	; 0x01
    671c:	9a 81       	ldd	r25, Y+2	; 0x02
    671e:	fc 01       	movw	r30, r24
    6720:	27 81       	ldd	r18, Z+7	; 0x07
    6722:	89 81       	ldd	r24, Y+1	; 0x01
    6724:	9a 81       	ldd	r25, Y+2	; 0x02
    6726:	fc 01       	movw	r30, r24
    6728:	22 87       	std	Z+10, r18	; 0x0a
		p->latestRenderedPosition = p->Position;
    672a:	29 81       	ldd	r18, Y+1	; 0x01
    672c:	3a 81       	ldd	r19, Y+2	; 0x02
    672e:	89 81       	ldd	r24, Y+1	; 0x01
    6730:	9a 81       	ldd	r25, Y+2	; 0x02
    6732:	fc 01       	movw	r30, r24
    6734:	83 81       	ldd	r24, Z+3	; 0x03
    6736:	94 81       	ldd	r25, Z+4	; 0x04
    6738:	a5 81       	ldd	r26, Z+5	; 0x05
    673a:	b6 81       	ldd	r27, Z+6	; 0x06
    673c:	f9 01       	movw	r30, r18
    673e:	83 87       	std	Z+11, r24	; 0x0b
    6740:	94 87       	std	Z+12, r25	; 0x0c
    6742:	a5 87       	std	Z+13, r26	; 0x0d
    6744:	b6 87       	std	Z+14, r27	; 0x0e
		p->hasBeenRenderedYet = 1;
    6746:	89 81       	ldd	r24, Y+1	; 0x01
    6748:	9a 81       	ldd	r25, Y+2	; 0x02
    674a:	21 e0       	ldi	r18, 0x01	; 1
    674c:	30 e0       	ldi	r19, 0x00	; 0
    674e:	fc 01       	movw	r30, r24
    6750:	30 8b       	std	Z+16, r19	; 0x10
    6752:	27 87       	std	Z+15, r18	; 0x0f
		p->latestRenderedPosition = p->Position;
		p->hasBeenRenderedYet = 1;	
	}
	else
		printf("Player orientation is invalid: %d", p->orientation);
}
    6754:	59 c0       	rjmp	.+178    	; 0x6808 <RenderPlayer+0x180>
		TFT_FillRectangle(p->Position.XPosition, p->Position.YPosition, p->width, p->height, color);
		p->latestRenderedOrientation = p->orientation;
		p->latestRenderedPosition = p->Position;
		p->hasBeenRenderedYet = 1;
	}
	else if(p->orientation == PLAYER_VERTICAL)
    6756:	89 81       	ldd	r24, Y+1	; 0x01
    6758:	9a 81       	ldd	r25, Y+2	; 0x02
    675a:	fc 01       	movw	r30, r24
    675c:	87 81       	ldd	r24, Z+7	; 0x07
    675e:	81 30       	cpi	r24, 0x01	; 1
    6760:	f1 f5       	brne	.+124    	; 0x67de <RenderPlayer+0x156>
	{
		TFT_FillRectangle(p->Position.XPosition, p->Position.YPosition, p->height, p->width, color);
    6762:	89 81       	ldd	r24, Y+1	; 0x01
    6764:	9a 81       	ldd	r25, Y+2	; 0x02
    6766:	fc 01       	movw	r30, r24
    6768:	81 89       	ldd	r24, Z+17	; 0x11
    676a:	92 89       	ldd	r25, Z+18	; 0x12
    676c:	9c 01       	movw	r18, r24
    676e:	89 81       	ldd	r24, Y+1	; 0x01
    6770:	9a 81       	ldd	r25, Y+2	; 0x02
    6772:	fc 01       	movw	r30, r24
    6774:	83 89       	ldd	r24, Z+19	; 0x13
    6776:	94 89       	ldd	r25, Z+20	; 0x14
    6778:	ac 01       	movw	r20, r24
    677a:	89 81       	ldd	r24, Y+1	; 0x01
    677c:	9a 81       	ldd	r25, Y+2	; 0x02
    677e:	fc 01       	movw	r30, r24
    6780:	85 81       	ldd	r24, Z+5	; 0x05
    6782:	96 81       	ldd	r25, Z+6	; 0x06
    6784:	bc 01       	movw	r22, r24
    6786:	89 81       	ldd	r24, Y+1	; 0x01
    6788:	9a 81       	ldd	r25, Y+2	; 0x02
    678a:	fc 01       	movw	r30, r24
    678c:	83 81       	ldd	r24, Z+3	; 0x03
    678e:	94 81       	ldd	r25, Z+4	; 0x04
    6790:	fc 01       	movw	r30, r24
    6792:	8b 81       	ldd	r24, Y+3	; 0x03
    6794:	9c 81       	ldd	r25, Y+4	; 0x04
    6796:	ad 81       	ldd	r26, Y+5	; 0x05
    6798:	7c 01       	movw	r14, r24
    679a:	0a 2f       	mov	r16, r26
    679c:	cf 01       	movw	r24, r30
    679e:	0e 94 7b 07 	call	0xef6	; 0xef6 <TFT_FillRectangle>
		p->latestRenderedOrientation = p->orientation;
    67a2:	89 81       	ldd	r24, Y+1	; 0x01
    67a4:	9a 81       	ldd	r25, Y+2	; 0x02
    67a6:	fc 01       	movw	r30, r24
    67a8:	27 81       	ldd	r18, Z+7	; 0x07
    67aa:	89 81       	ldd	r24, Y+1	; 0x01
    67ac:	9a 81       	ldd	r25, Y+2	; 0x02
    67ae:	fc 01       	movw	r30, r24
    67b0:	22 87       	std	Z+10, r18	; 0x0a
		p->latestRenderedPosition = p->Position;
    67b2:	29 81       	ldd	r18, Y+1	; 0x01
    67b4:	3a 81       	ldd	r19, Y+2	; 0x02
    67b6:	89 81       	ldd	r24, Y+1	; 0x01
    67b8:	9a 81       	ldd	r25, Y+2	; 0x02
    67ba:	fc 01       	movw	r30, r24
    67bc:	83 81       	ldd	r24, Z+3	; 0x03
    67be:	94 81       	ldd	r25, Z+4	; 0x04
    67c0:	a5 81       	ldd	r26, Z+5	; 0x05
    67c2:	b6 81       	ldd	r27, Z+6	; 0x06
    67c4:	f9 01       	movw	r30, r18
    67c6:	83 87       	std	Z+11, r24	; 0x0b
    67c8:	94 87       	std	Z+12, r25	; 0x0c
    67ca:	a5 87       	std	Z+13, r26	; 0x0d
    67cc:	b6 87       	std	Z+14, r27	; 0x0e
		p->hasBeenRenderedYet = 1;	
    67ce:	89 81       	ldd	r24, Y+1	; 0x01
    67d0:	9a 81       	ldd	r25, Y+2	; 0x02
    67d2:	21 e0       	ldi	r18, 0x01	; 1
    67d4:	30 e0       	ldi	r19, 0x00	; 0
    67d6:	fc 01       	movw	r30, r24
    67d8:	30 8b       	std	Z+16, r19	; 0x10
    67da:	27 87       	std	Z+15, r18	; 0x0f
	}
	else
		printf("Player orientation is invalid: %d", p->orientation);
}
    67dc:	15 c0       	rjmp	.+42     	; 0x6808 <RenderPlayer+0x180>
		p->latestRenderedOrientation = p->orientation;
		p->latestRenderedPosition = p->Position;
		p->hasBeenRenderedYet = 1;	
	}
	else
		printf("Player orientation is invalid: %d", p->orientation);
    67de:	89 81       	ldd	r24, Y+1	; 0x01
    67e0:	9a 81       	ldd	r25, Y+2	; 0x02
    67e2:	fc 01       	movw	r30, r24
    67e4:	87 81       	ldd	r24, Z+7	; 0x07
    67e6:	88 2f       	mov	r24, r24
    67e8:	90 e0       	ldi	r25, 0x00	; 0
    67ea:	29 2f       	mov	r18, r25
    67ec:	2f 93       	push	r18
    67ee:	8f 93       	push	r24
    67f0:	89 e2       	ldi	r24, 0x29	; 41
    67f2:	99 e0       	ldi	r25, 0x09	; 9
    67f4:	89 2f       	mov	r24, r25
    67f6:	8f 93       	push	r24
    67f8:	89 e2       	ldi	r24, 0x29	; 41
    67fa:	99 e0       	ldi	r25, 0x09	; 9
    67fc:	8f 93       	push	r24
    67fe:	26 d3       	rcall	.+1612   	; 0x6e4c <printf>
    6800:	0f 90       	pop	r0
    6802:	0f 90       	pop	r0
    6804:	0f 90       	pop	r0
    6806:	0f 90       	pop	r0
}
    6808:	00 00       	nop
    680a:	28 96       	adiw	r28, 0x08	; 8
    680c:	0f b6       	in	r0, 0x3f	; 63
    680e:	f8 94       	cli
    6810:	de bf       	out	0x3e, r29	; 62
    6812:	0f be       	out	0x3f, r0	; 63
    6814:	cd bf       	out	0x3d, r28	; 61
    6816:	df 91       	pop	r29
    6818:	cf 91       	pop	r28
    681a:	0f 91       	pop	r16
    681c:	ff 90       	pop	r15
    681e:	ef 90       	pop	r14
    6820:	08 95       	ret

00006822 <UnrenderPlayer>:
void UnrenderPlayer(Drawable a) {
    6822:	ef 92       	push	r14
    6824:	ff 92       	push	r15
    6826:	0f 93       	push	r16
    6828:	cf 93       	push	r28
    682a:	df 93       	push	r29
    682c:	00 d0       	rcall	.+0      	; 0x682e <UnrenderPlayer+0xc>
    682e:	1f 92       	push	r1
    6830:	1f 92       	push	r1
    6832:	cd b7       	in	r28, 0x3d	; 61
    6834:	de b7       	in	r29, 0x3e	; 62
    6836:	6b 83       	std	Y+3, r22	; 0x03
    6838:	7c 83       	std	Y+4, r23	; 0x04
    683a:	8d 83       	std	Y+5, r24	; 0x05
    Player* p = (Player*)a.drawable;
    683c:	8b 81       	ldd	r24, Y+3	; 0x03
    683e:	9c 81       	ldd	r25, Y+4	; 0x04
    6840:	9a 83       	std	Y+2, r25	; 0x02
    6842:	89 83       	std	Y+1, r24	; 0x01
	if(p->hasBeenRenderedYet)
    6844:	89 81       	ldd	r24, Y+1	; 0x01
    6846:	9a 81       	ldd	r25, Y+2	; 0x02
    6848:	fc 01       	movw	r30, r24
    684a:	87 85       	ldd	r24, Z+15	; 0x0f
    684c:	90 89       	ldd	r25, Z+16	; 0x10
    684e:	89 2b       	or	r24, r25
    6850:	09 f4       	brne	.+2      	; 0x6854 <UnrenderPlayer+0x32>
    6852:	6a c0       	rjmp	.+212    	; 0x6928 <UnrenderPlayer+0x106>
	{
		if(p->latestRenderedOrientation == PLAYER_HORIZONTAL)
    6854:	89 81       	ldd	r24, Y+1	; 0x01
    6856:	9a 81       	ldd	r25, Y+2	; 0x02
    6858:	fc 01       	movw	r30, r24
    685a:	82 85       	ldd	r24, Z+10	; 0x0a
    685c:	88 23       	and	r24, r24
    685e:	21 f5       	brne	.+72     	; 0x68a8 <UnrenderPlayer+0x86>
			TFT_FillRectangle(p->latestRenderedPosition.XPosition, p->latestRenderedPosition.YPosition, p->width, p->height, BACKGROUND_COLOR);
    6860:	89 81       	ldd	r24, Y+1	; 0x01
    6862:	9a 81       	ldd	r25, Y+2	; 0x02
    6864:	fc 01       	movw	r30, r24
    6866:	83 89       	ldd	r24, Z+19	; 0x13
    6868:	94 89       	ldd	r25, Z+20	; 0x14
    686a:	9c 01       	movw	r18, r24
    686c:	89 81       	ldd	r24, Y+1	; 0x01
    686e:	9a 81       	ldd	r25, Y+2	; 0x02
    6870:	fc 01       	movw	r30, r24
    6872:	81 89       	ldd	r24, Z+17	; 0x11
    6874:	92 89       	ldd	r25, Z+18	; 0x12
    6876:	ac 01       	movw	r20, r24
    6878:	89 81       	ldd	r24, Y+1	; 0x01
    687a:	9a 81       	ldd	r25, Y+2	; 0x02
    687c:	fc 01       	movw	r30, r24
    687e:	85 85       	ldd	r24, Z+13	; 0x0d
    6880:	96 85       	ldd	r25, Z+14	; 0x0e
    6882:	bc 01       	movw	r22, r24
    6884:	89 81       	ldd	r24, Y+1	; 0x01
    6886:	9a 81       	ldd	r25, Y+2	; 0x02
    6888:	fc 01       	movw	r30, r24
    688a:	83 85       	ldd	r24, Z+11	; 0x0b
    688c:	94 85       	ldd	r25, Z+12	; 0x0c
    688e:	fc 01       	movw	r30, r24
    6890:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <BACKGROUND_COLOR>
    6894:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <BACKGROUND_COLOR+0x1>
    6898:	a0 91 14 07 	lds	r26, 0x0714	; 0x800714 <BACKGROUND_COLOR+0x2>
    689c:	7c 01       	movw	r14, r24
    689e:	0a 2f       	mov	r16, r26
    68a0:	cf 01       	movw	r24, r30
    68a2:	0e 94 7b 07 	call	0xef6	; 0xef6 <TFT_FillRectangle>
		printf("Player %d has not been rendered before and therefore it will not be unrendered\r\n", p->ServerAssignedPlayerId);
	}
		
		
	
}
    68a6:	54 c0       	rjmp	.+168    	; 0x6950 <UnrenderPlayer+0x12e>
    Player* p = (Player*)a.drawable;
	if(p->hasBeenRenderedYet)
	{
		if(p->latestRenderedOrientation == PLAYER_HORIZONTAL)
			TFT_FillRectangle(p->latestRenderedPosition.XPosition, p->latestRenderedPosition.YPosition, p->width, p->height, BACKGROUND_COLOR);
		else if(p->latestRenderedOrientation == PLAYER_VERTICAL)
    68a8:	89 81       	ldd	r24, Y+1	; 0x01
    68aa:	9a 81       	ldd	r25, Y+2	; 0x02
    68ac:	fc 01       	movw	r30, r24
    68ae:	82 85       	ldd	r24, Z+10	; 0x0a
    68b0:	81 30       	cpi	r24, 0x01	; 1
    68b2:	21 f5       	brne	.+72     	; 0x68fc <UnrenderPlayer+0xda>
			TFT_FillRectangle(p->latestRenderedPosition.XPosition, p->latestRenderedPosition.YPosition, p->height, p->width, BACKGROUND_COLOR);
    68b4:	89 81       	ldd	r24, Y+1	; 0x01
    68b6:	9a 81       	ldd	r25, Y+2	; 0x02
    68b8:	fc 01       	movw	r30, r24
    68ba:	81 89       	ldd	r24, Z+17	; 0x11
    68bc:	92 89       	ldd	r25, Z+18	; 0x12
    68be:	9c 01       	movw	r18, r24
    68c0:	89 81       	ldd	r24, Y+1	; 0x01
    68c2:	9a 81       	ldd	r25, Y+2	; 0x02
    68c4:	fc 01       	movw	r30, r24
    68c6:	83 89       	ldd	r24, Z+19	; 0x13
    68c8:	94 89       	ldd	r25, Z+20	; 0x14
    68ca:	ac 01       	movw	r20, r24
    68cc:	89 81       	ldd	r24, Y+1	; 0x01
    68ce:	9a 81       	ldd	r25, Y+2	; 0x02
    68d0:	fc 01       	movw	r30, r24
    68d2:	85 85       	ldd	r24, Z+13	; 0x0d
    68d4:	96 85       	ldd	r25, Z+14	; 0x0e
    68d6:	bc 01       	movw	r22, r24
    68d8:	89 81       	ldd	r24, Y+1	; 0x01
    68da:	9a 81       	ldd	r25, Y+2	; 0x02
    68dc:	fc 01       	movw	r30, r24
    68de:	83 85       	ldd	r24, Z+11	; 0x0b
    68e0:	94 85       	ldd	r25, Z+12	; 0x0c
    68e2:	fc 01       	movw	r30, r24
    68e4:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <BACKGROUND_COLOR>
    68e8:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <BACKGROUND_COLOR+0x1>
    68ec:	a0 91 14 07 	lds	r26, 0x0714	; 0x800714 <BACKGROUND_COLOR+0x2>
    68f0:	7c 01       	movw	r14, r24
    68f2:	0a 2f       	mov	r16, r26
    68f4:	cf 01       	movw	r24, r30
    68f6:	0e 94 7b 07 	call	0xef6	; 0xef6 <TFT_FillRectangle>
		printf("Player %d has not been rendered before and therefore it will not be unrendered\r\n", p->ServerAssignedPlayerId);
	}
		
		
	
}
    68fa:	2a c0       	rjmp	.+84     	; 0x6950 <UnrenderPlayer+0x12e>
		if(p->latestRenderedOrientation == PLAYER_HORIZONTAL)
			TFT_FillRectangle(p->latestRenderedPosition.XPosition, p->latestRenderedPosition.YPosition, p->width, p->height, BACKGROUND_COLOR);
		else if(p->latestRenderedOrientation == PLAYER_VERTICAL)
			TFT_FillRectangle(p->latestRenderedPosition.XPosition, p->latestRenderedPosition.YPosition, p->height, p->width, BACKGROUND_COLOR);
		else
			printf("Player orientation is invalid: %d\r\n", p->orientation);
    68fc:	89 81       	ldd	r24, Y+1	; 0x01
    68fe:	9a 81       	ldd	r25, Y+2	; 0x02
    6900:	fc 01       	movw	r30, r24
    6902:	87 81       	ldd	r24, Z+7	; 0x07
    6904:	88 2f       	mov	r24, r24
    6906:	90 e0       	ldi	r25, 0x00	; 0
    6908:	29 2f       	mov	r18, r25
    690a:	2f 93       	push	r18
    690c:	8f 93       	push	r24
    690e:	8b e4       	ldi	r24, 0x4B	; 75
    6910:	99 e0       	ldi	r25, 0x09	; 9
    6912:	89 2f       	mov	r24, r25
    6914:	8f 93       	push	r24
    6916:	8b e4       	ldi	r24, 0x4B	; 75
    6918:	99 e0       	ldi	r25, 0x09	; 9
    691a:	8f 93       	push	r24
    691c:	97 d2       	rcall	.+1326   	; 0x6e4c <printf>
    691e:	0f 90       	pop	r0
    6920:	0f 90       	pop	r0
    6922:	0f 90       	pop	r0
    6924:	0f 90       	pop	r0
		printf("Player %d has not been rendered before and therefore it will not be unrendered\r\n", p->ServerAssignedPlayerId);
	}
		
		
	
}
    6926:	14 c0       	rjmp	.+40     	; 0x6950 <UnrenderPlayer+0x12e>
		else
			printf("Player orientation is invalid: %d\r\n", p->orientation);
	}
	else
	{
		printf("Player %d has not been rendered before and therefore it will not be unrendered\r\n", p->ServerAssignedPlayerId);
    6928:	89 81       	ldd	r24, Y+1	; 0x01
    692a:	9a 81       	ldd	r25, Y+2	; 0x02
    692c:	fc 01       	movw	r30, r24
    692e:	80 85       	ldd	r24, Z+8	; 0x08
    6930:	91 85       	ldd	r25, Z+9	; 0x09
    6932:	29 2f       	mov	r18, r25
    6934:	2f 93       	push	r18
    6936:	8f 93       	push	r24
    6938:	8f e6       	ldi	r24, 0x6F	; 111
    693a:	99 e0       	ldi	r25, 0x09	; 9
    693c:	89 2f       	mov	r24, r25
    693e:	8f 93       	push	r24
    6940:	8f e6       	ldi	r24, 0x6F	; 111
    6942:	99 e0       	ldi	r25, 0x09	; 9
    6944:	8f 93       	push	r24
    6946:	82 d2       	rcall	.+1284   	; 0x6e4c <printf>
    6948:	0f 90       	pop	r0
    694a:	0f 90       	pop	r0
    694c:	0f 90       	pop	r0
    694e:	0f 90       	pop	r0
	}
		
		
	
}
    6950:	00 00       	nop
    6952:	0f 90       	pop	r0
    6954:	0f 90       	pop	r0
    6956:	0f 90       	pop	r0
    6958:	0f 90       	pop	r0
    695a:	0f 90       	pop	r0
    695c:	df 91       	pop	r29
    695e:	cf 91       	pop	r28
    6960:	0f 91       	pop	r16
    6962:	ff 90       	pop	r15
    6964:	ef 90       	pop	r14
    6966:	08 95       	ret

00006968 <COLOR_White>:
    return rgb;
}
RGB COLOR_Magenta() {
    RGB rgb = {.Red = 31, .Green = 0, .Blue = 31};
    return rgb;
}
    6968:	cf 93       	push	r28
    696a:	df 93       	push	r29
    696c:	00 d0       	rcall	.+0      	; 0x696e <COLOR_White+0x6>
    696e:	cd b7       	in	r28, 0x3d	; 61
    6970:	de b7       	in	r29, 0x3e	; 62
    6972:	8f e1       	ldi	r24, 0x1F	; 31
    6974:	89 83       	std	Y+1, r24	; 0x01
    6976:	8f e3       	ldi	r24, 0x3F	; 63
    6978:	8a 83       	std	Y+2, r24	; 0x02
    697a:	8f e1       	ldi	r24, 0x1F	; 31
    697c:	8b 83       	std	Y+3, r24	; 0x03
    697e:	89 81       	ldd	r24, Y+1	; 0x01
    6980:	9a 81       	ldd	r25, Y+2	; 0x02
    6982:	ab 81       	ldd	r26, Y+3	; 0x03
    6984:	bc 01       	movw	r22, r24
    6986:	8a 2f       	mov	r24, r26
    6988:	0f 90       	pop	r0
    698a:	0f 90       	pop	r0
    698c:	0f 90       	pop	r0
    698e:	df 91       	pop	r29
    6990:	cf 91       	pop	r28
    6992:	08 95       	ret

00006994 <COLOR_Red>:
    6994:	cf 93       	push	r28
    6996:	df 93       	push	r29
    6998:	00 d0       	rcall	.+0      	; 0x699a <COLOR_Red+0x6>
    699a:	cd b7       	in	r28, 0x3d	; 61
    699c:	de b7       	in	r29, 0x3e	; 62
    699e:	8f e1       	ldi	r24, 0x1F	; 31
    69a0:	89 83       	std	Y+1, r24	; 0x01
    69a2:	1a 82       	std	Y+2, r1	; 0x02
    69a4:	1b 82       	std	Y+3, r1	; 0x03
    69a6:	89 81       	ldd	r24, Y+1	; 0x01
    69a8:	9a 81       	ldd	r25, Y+2	; 0x02
    69aa:	ab 81       	ldd	r26, Y+3	; 0x03
    69ac:	bc 01       	movw	r22, r24
    69ae:	8a 2f       	mov	r24, r26
    69b0:	0f 90       	pop	r0
    69b2:	0f 90       	pop	r0
    69b4:	0f 90       	pop	r0
    69b6:	df 91       	pop	r29
    69b8:	cf 91       	pop	r28
    69ba:	08 95       	ret

000069bc <COLOR_Green>:
    69bc:	cf 93       	push	r28
    69be:	df 93       	push	r29
    69c0:	00 d0       	rcall	.+0      	; 0x69c2 <COLOR_Green+0x6>
    69c2:	cd b7       	in	r28, 0x3d	; 61
    69c4:	de b7       	in	r29, 0x3e	; 62
    69c6:	19 82       	std	Y+1, r1	; 0x01
    69c8:	8f e3       	ldi	r24, 0x3F	; 63
    69ca:	8a 83       	std	Y+2, r24	; 0x02
    69cc:	1b 82       	std	Y+3, r1	; 0x03
    69ce:	89 81       	ldd	r24, Y+1	; 0x01
    69d0:	9a 81       	ldd	r25, Y+2	; 0x02
    69d2:	ab 81       	ldd	r26, Y+3	; 0x03
    69d4:	bc 01       	movw	r22, r24
    69d6:	8a 2f       	mov	r24, r26
    69d8:	0f 90       	pop	r0
    69da:	0f 90       	pop	r0
    69dc:	0f 90       	pop	r0
    69de:	df 91       	pop	r29
    69e0:	cf 91       	pop	r28
    69e2:	08 95       	ret

000069e4 <COLOR_Blue>:
    69e4:	cf 93       	push	r28
    69e6:	df 93       	push	r29
    69e8:	00 d0       	rcall	.+0      	; 0x69ea <COLOR_Blue+0x6>
    69ea:	cd b7       	in	r28, 0x3d	; 61
    69ec:	de b7       	in	r29, 0x3e	; 62
    69ee:	19 82       	std	Y+1, r1	; 0x01
    69f0:	1a 82       	std	Y+2, r1	; 0x02
    69f2:	8f e1       	ldi	r24, 0x1F	; 31
    69f4:	8b 83       	std	Y+3, r24	; 0x03
    69f6:	89 81       	ldd	r24, Y+1	; 0x01
    69f8:	9a 81       	ldd	r25, Y+2	; 0x02
    69fa:	ab 81       	ldd	r26, Y+3	; 0x03
    69fc:	bc 01       	movw	r22, r24
    69fe:	8a 2f       	mov	r24, r26
    6a00:	0f 90       	pop	r0
    6a02:	0f 90       	pop	r0
    6a04:	0f 90       	pop	r0
    6a06:	df 91       	pop	r29
    6a08:	cf 91       	pop	r28
    6a0a:	08 95       	ret

00006a0c <COLOR_Cyan>:
RGB COLOR_Cyan() {
    6a0c:	cf 93       	push	r28
    6a0e:	df 93       	push	r29
    6a10:	00 d0       	rcall	.+0      	; 0x6a12 <COLOR_Cyan+0x6>
    6a12:	cd b7       	in	r28, 0x3d	; 61
    6a14:	de b7       	in	r29, 0x3e	; 62
    RGB rgb = {.Red = 0, .Green = 63, .Blue = 31};
    6a16:	19 82       	std	Y+1, r1	; 0x01
    6a18:	8f e3       	ldi	r24, 0x3F	; 63
    6a1a:	8a 83       	std	Y+2, r24	; 0x02
    6a1c:	8f e1       	ldi	r24, 0x1F	; 31
    6a1e:	8b 83       	std	Y+3, r24	; 0x03
    return rgb;
    6a20:	89 81       	ldd	r24, Y+1	; 0x01
    6a22:	9a 81       	ldd	r25, Y+2	; 0x02
    6a24:	ab 81       	ldd	r26, Y+3	; 0x03
    6a26:	bc 01       	movw	r22, r24
    6a28:	8a 2f       	mov	r24, r26
    6a2a:	0f 90       	pop	r0
    6a2c:	0f 90       	pop	r0
    6a2e:	0f 90       	pop	r0
    6a30:	df 91       	pop	r29
    6a32:	cf 91       	pop	r28
    6a34:	08 95       	ret

00006a36 <__cmpsf2>:
    6a36:	d4 d0       	rcall	.+424    	; 0x6be0 <__fp_cmp>
    6a38:	08 f4       	brcc	.+2      	; 0x6a3c <__cmpsf2+0x6>
    6a3a:	81 e0       	ldi	r24, 0x01	; 1
    6a3c:	08 95       	ret

00006a3e <__divsf3>:
    6a3e:	0c d0       	rcall	.+24     	; 0x6a58 <__divsf3x>
    6a40:	0a c1       	rjmp	.+532    	; 0x6c56 <__fp_round>
    6a42:	02 d1       	rcall	.+516    	; 0x6c48 <__fp_pscB>
    6a44:	40 f0       	brcs	.+16     	; 0x6a56 <__divsf3+0x18>
    6a46:	f9 d0       	rcall	.+498    	; 0x6c3a <__fp_pscA>
    6a48:	30 f0       	brcs	.+12     	; 0x6a56 <__divsf3+0x18>
    6a4a:	21 f4       	brne	.+8      	; 0x6a54 <__divsf3+0x16>
    6a4c:	5f 3f       	cpi	r21, 0xFF	; 255
    6a4e:	19 f0       	breq	.+6      	; 0x6a56 <__divsf3+0x18>
    6a50:	eb c0       	rjmp	.+470    	; 0x6c28 <__fp_inf>
    6a52:	51 11       	cpse	r21, r1
    6a54:	34 c1       	rjmp	.+616    	; 0x6cbe <__fp_szero>
    6a56:	ee c0       	rjmp	.+476    	; 0x6c34 <__fp_nan>

00006a58 <__divsf3x>:
    6a58:	0f d1       	rcall	.+542    	; 0x6c78 <__fp_split3>
    6a5a:	98 f3       	brcs	.-26     	; 0x6a42 <__divsf3+0x4>

00006a5c <__divsf3_pse>:
    6a5c:	99 23       	and	r25, r25
    6a5e:	c9 f3       	breq	.-14     	; 0x6a52 <__divsf3+0x14>
    6a60:	55 23       	and	r21, r21
    6a62:	b1 f3       	breq	.-20     	; 0x6a50 <__divsf3+0x12>
    6a64:	95 1b       	sub	r25, r21
    6a66:	55 0b       	sbc	r21, r21
    6a68:	bb 27       	eor	r27, r27
    6a6a:	aa 27       	eor	r26, r26
    6a6c:	62 17       	cp	r22, r18
    6a6e:	73 07       	cpc	r23, r19
    6a70:	84 07       	cpc	r24, r20
    6a72:	38 f0       	brcs	.+14     	; 0x6a82 <__divsf3_pse+0x26>
    6a74:	9f 5f       	subi	r25, 0xFF	; 255
    6a76:	5f 4f       	sbci	r21, 0xFF	; 255
    6a78:	22 0f       	add	r18, r18
    6a7a:	33 1f       	adc	r19, r19
    6a7c:	44 1f       	adc	r20, r20
    6a7e:	aa 1f       	adc	r26, r26
    6a80:	a9 f3       	breq	.-22     	; 0x6a6c <__divsf3_pse+0x10>
    6a82:	33 d0       	rcall	.+102    	; 0x6aea <__divsf3_pse+0x8e>
    6a84:	0e 2e       	mov	r0, r30
    6a86:	3a f0       	brmi	.+14     	; 0x6a96 <__divsf3_pse+0x3a>
    6a88:	e0 e8       	ldi	r30, 0x80	; 128
    6a8a:	30 d0       	rcall	.+96     	; 0x6aec <__divsf3_pse+0x90>
    6a8c:	91 50       	subi	r25, 0x01	; 1
    6a8e:	50 40       	sbci	r21, 0x00	; 0
    6a90:	e6 95       	lsr	r30
    6a92:	00 1c       	adc	r0, r0
    6a94:	ca f7       	brpl	.-14     	; 0x6a88 <__divsf3_pse+0x2c>
    6a96:	29 d0       	rcall	.+82     	; 0x6aea <__divsf3_pse+0x8e>
    6a98:	fe 2f       	mov	r31, r30
    6a9a:	27 d0       	rcall	.+78     	; 0x6aea <__divsf3_pse+0x8e>
    6a9c:	66 0f       	add	r22, r22
    6a9e:	77 1f       	adc	r23, r23
    6aa0:	88 1f       	adc	r24, r24
    6aa2:	bb 1f       	adc	r27, r27
    6aa4:	26 17       	cp	r18, r22
    6aa6:	37 07       	cpc	r19, r23
    6aa8:	48 07       	cpc	r20, r24
    6aaa:	ab 07       	cpc	r26, r27
    6aac:	b0 e8       	ldi	r27, 0x80	; 128
    6aae:	09 f0       	breq	.+2      	; 0x6ab2 <__divsf3_pse+0x56>
    6ab0:	bb 0b       	sbc	r27, r27
    6ab2:	80 2d       	mov	r24, r0
    6ab4:	bf 01       	movw	r22, r30
    6ab6:	ff 27       	eor	r31, r31
    6ab8:	93 58       	subi	r25, 0x83	; 131
    6aba:	5f 4f       	sbci	r21, 0xFF	; 255
    6abc:	2a f0       	brmi	.+10     	; 0x6ac8 <__divsf3_pse+0x6c>
    6abe:	9e 3f       	cpi	r25, 0xFE	; 254
    6ac0:	51 05       	cpc	r21, r1
    6ac2:	68 f0       	brcs	.+26     	; 0x6ade <__divsf3_pse+0x82>
    6ac4:	b1 c0       	rjmp	.+354    	; 0x6c28 <__fp_inf>
    6ac6:	fb c0       	rjmp	.+502    	; 0x6cbe <__fp_szero>
    6ac8:	5f 3f       	cpi	r21, 0xFF	; 255
    6aca:	ec f3       	brlt	.-6      	; 0x6ac6 <__divsf3_pse+0x6a>
    6acc:	98 3e       	cpi	r25, 0xE8	; 232
    6ace:	dc f3       	brlt	.-10     	; 0x6ac6 <__divsf3_pse+0x6a>
    6ad0:	86 95       	lsr	r24
    6ad2:	77 95       	ror	r23
    6ad4:	67 95       	ror	r22
    6ad6:	b7 95       	ror	r27
    6ad8:	f7 95       	ror	r31
    6ada:	9f 5f       	subi	r25, 0xFF	; 255
    6adc:	c9 f7       	brne	.-14     	; 0x6ad0 <__divsf3_pse+0x74>
    6ade:	88 0f       	add	r24, r24
    6ae0:	91 1d       	adc	r25, r1
    6ae2:	96 95       	lsr	r25
    6ae4:	87 95       	ror	r24
    6ae6:	97 f9       	bld	r25, 7
    6ae8:	08 95       	ret
    6aea:	e1 e0       	ldi	r30, 0x01	; 1
    6aec:	66 0f       	add	r22, r22
    6aee:	77 1f       	adc	r23, r23
    6af0:	88 1f       	adc	r24, r24
    6af2:	bb 1f       	adc	r27, r27
    6af4:	62 17       	cp	r22, r18
    6af6:	73 07       	cpc	r23, r19
    6af8:	84 07       	cpc	r24, r20
    6afa:	ba 07       	cpc	r27, r26
    6afc:	20 f0       	brcs	.+8      	; 0x6b06 <__divsf3_pse+0xaa>
    6afe:	62 1b       	sub	r22, r18
    6b00:	73 0b       	sbc	r23, r19
    6b02:	84 0b       	sbc	r24, r20
    6b04:	ba 0b       	sbc	r27, r26
    6b06:	ee 1f       	adc	r30, r30
    6b08:	88 f7       	brcc	.-30     	; 0x6aec <__divsf3_pse+0x90>
    6b0a:	e0 95       	com	r30
    6b0c:	08 95       	ret

00006b0e <__fixunssfsi>:
    6b0e:	bc d0       	rcall	.+376    	; 0x6c88 <__fp_splitA>
    6b10:	88 f0       	brcs	.+34     	; 0x6b34 <__fixunssfsi+0x26>
    6b12:	9f 57       	subi	r25, 0x7F	; 127
    6b14:	90 f0       	brcs	.+36     	; 0x6b3a <__fixunssfsi+0x2c>
    6b16:	b9 2f       	mov	r27, r25
    6b18:	99 27       	eor	r25, r25
    6b1a:	b7 51       	subi	r27, 0x17	; 23
    6b1c:	a0 f0       	brcs	.+40     	; 0x6b46 <__fixunssfsi+0x38>
    6b1e:	d1 f0       	breq	.+52     	; 0x6b54 <__fixunssfsi+0x46>
    6b20:	66 0f       	add	r22, r22
    6b22:	77 1f       	adc	r23, r23
    6b24:	88 1f       	adc	r24, r24
    6b26:	99 1f       	adc	r25, r25
    6b28:	1a f0       	brmi	.+6      	; 0x6b30 <__fixunssfsi+0x22>
    6b2a:	ba 95       	dec	r27
    6b2c:	c9 f7       	brne	.-14     	; 0x6b20 <__fixunssfsi+0x12>
    6b2e:	12 c0       	rjmp	.+36     	; 0x6b54 <__fixunssfsi+0x46>
    6b30:	b1 30       	cpi	r27, 0x01	; 1
    6b32:	81 f0       	breq	.+32     	; 0x6b54 <__fixunssfsi+0x46>
    6b34:	c3 d0       	rcall	.+390    	; 0x6cbc <__fp_zero>
    6b36:	b1 e0       	ldi	r27, 0x01	; 1
    6b38:	08 95       	ret
    6b3a:	c0 c0       	rjmp	.+384    	; 0x6cbc <__fp_zero>
    6b3c:	67 2f       	mov	r22, r23
    6b3e:	78 2f       	mov	r23, r24
    6b40:	88 27       	eor	r24, r24
    6b42:	b8 5f       	subi	r27, 0xF8	; 248
    6b44:	39 f0       	breq	.+14     	; 0x6b54 <__fixunssfsi+0x46>
    6b46:	b9 3f       	cpi	r27, 0xF9	; 249
    6b48:	cc f3       	brlt	.-14     	; 0x6b3c <__fixunssfsi+0x2e>
    6b4a:	86 95       	lsr	r24
    6b4c:	77 95       	ror	r23
    6b4e:	67 95       	ror	r22
    6b50:	b3 95       	inc	r27
    6b52:	d9 f7       	brne	.-10     	; 0x6b4a <__fixunssfsi+0x3c>
    6b54:	3e f4       	brtc	.+14     	; 0x6b64 <__fixunssfsi+0x56>
    6b56:	90 95       	com	r25
    6b58:	80 95       	com	r24
    6b5a:	70 95       	com	r23
    6b5c:	61 95       	neg	r22
    6b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    6b60:	8f 4f       	sbci	r24, 0xFF	; 255
    6b62:	9f 4f       	sbci	r25, 0xFF	; 255
    6b64:	08 95       	ret

00006b66 <__floatunsisf>:
    6b66:	e8 94       	clt
    6b68:	09 c0       	rjmp	.+18     	; 0x6b7c <__floatsisf+0x12>

00006b6a <__floatsisf>:
    6b6a:	97 fb       	bst	r25, 7
    6b6c:	3e f4       	brtc	.+14     	; 0x6b7c <__floatsisf+0x12>
    6b6e:	90 95       	com	r25
    6b70:	80 95       	com	r24
    6b72:	70 95       	com	r23
    6b74:	61 95       	neg	r22
    6b76:	7f 4f       	sbci	r23, 0xFF	; 255
    6b78:	8f 4f       	sbci	r24, 0xFF	; 255
    6b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    6b7c:	99 23       	and	r25, r25
    6b7e:	a9 f0       	breq	.+42     	; 0x6baa <__floatsisf+0x40>
    6b80:	f9 2f       	mov	r31, r25
    6b82:	96 e9       	ldi	r25, 0x96	; 150
    6b84:	bb 27       	eor	r27, r27
    6b86:	93 95       	inc	r25
    6b88:	f6 95       	lsr	r31
    6b8a:	87 95       	ror	r24
    6b8c:	77 95       	ror	r23
    6b8e:	67 95       	ror	r22
    6b90:	b7 95       	ror	r27
    6b92:	f1 11       	cpse	r31, r1
    6b94:	f8 cf       	rjmp	.-16     	; 0x6b86 <__floatsisf+0x1c>
    6b96:	fa f4       	brpl	.+62     	; 0x6bd6 <__floatsisf+0x6c>
    6b98:	bb 0f       	add	r27, r27
    6b9a:	11 f4       	brne	.+4      	; 0x6ba0 <__floatsisf+0x36>
    6b9c:	60 ff       	sbrs	r22, 0
    6b9e:	1b c0       	rjmp	.+54     	; 0x6bd6 <__floatsisf+0x6c>
    6ba0:	6f 5f       	subi	r22, 0xFF	; 255
    6ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ba4:	8f 4f       	sbci	r24, 0xFF	; 255
    6ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ba8:	16 c0       	rjmp	.+44     	; 0x6bd6 <__floatsisf+0x6c>
    6baa:	88 23       	and	r24, r24
    6bac:	11 f0       	breq	.+4      	; 0x6bb2 <__floatsisf+0x48>
    6bae:	96 e9       	ldi	r25, 0x96	; 150
    6bb0:	11 c0       	rjmp	.+34     	; 0x6bd4 <__floatsisf+0x6a>
    6bb2:	77 23       	and	r23, r23
    6bb4:	21 f0       	breq	.+8      	; 0x6bbe <__floatsisf+0x54>
    6bb6:	9e e8       	ldi	r25, 0x8E	; 142
    6bb8:	87 2f       	mov	r24, r23
    6bba:	76 2f       	mov	r23, r22
    6bbc:	05 c0       	rjmp	.+10     	; 0x6bc8 <__floatsisf+0x5e>
    6bbe:	66 23       	and	r22, r22
    6bc0:	71 f0       	breq	.+28     	; 0x6bde <__floatsisf+0x74>
    6bc2:	96 e8       	ldi	r25, 0x86	; 134
    6bc4:	86 2f       	mov	r24, r22
    6bc6:	70 e0       	ldi	r23, 0x00	; 0
    6bc8:	60 e0       	ldi	r22, 0x00	; 0
    6bca:	2a f0       	brmi	.+10     	; 0x6bd6 <__floatsisf+0x6c>
    6bcc:	9a 95       	dec	r25
    6bce:	66 0f       	add	r22, r22
    6bd0:	77 1f       	adc	r23, r23
    6bd2:	88 1f       	adc	r24, r24
    6bd4:	da f7       	brpl	.-10     	; 0x6bcc <__floatsisf+0x62>
    6bd6:	88 0f       	add	r24, r24
    6bd8:	96 95       	lsr	r25
    6bda:	87 95       	ror	r24
    6bdc:	97 f9       	bld	r25, 7
    6bde:	08 95       	ret

00006be0 <__fp_cmp>:
    6be0:	99 0f       	add	r25, r25
    6be2:	00 08       	sbc	r0, r0
    6be4:	55 0f       	add	r21, r21
    6be6:	aa 0b       	sbc	r26, r26
    6be8:	e0 e8       	ldi	r30, 0x80	; 128
    6bea:	fe ef       	ldi	r31, 0xFE	; 254
    6bec:	16 16       	cp	r1, r22
    6bee:	17 06       	cpc	r1, r23
    6bf0:	e8 07       	cpc	r30, r24
    6bf2:	f9 07       	cpc	r31, r25
    6bf4:	c0 f0       	brcs	.+48     	; 0x6c26 <__fp_cmp+0x46>
    6bf6:	12 16       	cp	r1, r18
    6bf8:	13 06       	cpc	r1, r19
    6bfa:	e4 07       	cpc	r30, r20
    6bfc:	f5 07       	cpc	r31, r21
    6bfe:	98 f0       	brcs	.+38     	; 0x6c26 <__fp_cmp+0x46>
    6c00:	62 1b       	sub	r22, r18
    6c02:	73 0b       	sbc	r23, r19
    6c04:	84 0b       	sbc	r24, r20
    6c06:	95 0b       	sbc	r25, r21
    6c08:	39 f4       	brne	.+14     	; 0x6c18 <__fp_cmp+0x38>
    6c0a:	0a 26       	eor	r0, r26
    6c0c:	61 f0       	breq	.+24     	; 0x6c26 <__fp_cmp+0x46>
    6c0e:	23 2b       	or	r18, r19
    6c10:	24 2b       	or	r18, r20
    6c12:	25 2b       	or	r18, r21
    6c14:	21 f4       	brne	.+8      	; 0x6c1e <__fp_cmp+0x3e>
    6c16:	08 95       	ret
    6c18:	0a 26       	eor	r0, r26
    6c1a:	09 f4       	brne	.+2      	; 0x6c1e <__fp_cmp+0x3e>
    6c1c:	a1 40       	sbci	r26, 0x01	; 1
    6c1e:	a6 95       	lsr	r26
    6c20:	8f ef       	ldi	r24, 0xFF	; 255
    6c22:	81 1d       	adc	r24, r1
    6c24:	81 1d       	adc	r24, r1
    6c26:	08 95       	ret

00006c28 <__fp_inf>:
    6c28:	97 f9       	bld	r25, 7
    6c2a:	9f 67       	ori	r25, 0x7F	; 127
    6c2c:	80 e8       	ldi	r24, 0x80	; 128
    6c2e:	70 e0       	ldi	r23, 0x00	; 0
    6c30:	60 e0       	ldi	r22, 0x00	; 0
    6c32:	08 95       	ret

00006c34 <__fp_nan>:
    6c34:	9f ef       	ldi	r25, 0xFF	; 255
    6c36:	80 ec       	ldi	r24, 0xC0	; 192
    6c38:	08 95       	ret

00006c3a <__fp_pscA>:
    6c3a:	00 24       	eor	r0, r0
    6c3c:	0a 94       	dec	r0
    6c3e:	16 16       	cp	r1, r22
    6c40:	17 06       	cpc	r1, r23
    6c42:	18 06       	cpc	r1, r24
    6c44:	09 06       	cpc	r0, r25
    6c46:	08 95       	ret

00006c48 <__fp_pscB>:
    6c48:	00 24       	eor	r0, r0
    6c4a:	0a 94       	dec	r0
    6c4c:	12 16       	cp	r1, r18
    6c4e:	13 06       	cpc	r1, r19
    6c50:	14 06       	cpc	r1, r20
    6c52:	05 06       	cpc	r0, r21
    6c54:	08 95       	ret

00006c56 <__fp_round>:
    6c56:	09 2e       	mov	r0, r25
    6c58:	03 94       	inc	r0
    6c5a:	00 0c       	add	r0, r0
    6c5c:	11 f4       	brne	.+4      	; 0x6c62 <__fp_round+0xc>
    6c5e:	88 23       	and	r24, r24
    6c60:	52 f0       	brmi	.+20     	; 0x6c76 <__fp_round+0x20>
    6c62:	bb 0f       	add	r27, r27
    6c64:	40 f4       	brcc	.+16     	; 0x6c76 <__fp_round+0x20>
    6c66:	bf 2b       	or	r27, r31
    6c68:	11 f4       	brne	.+4      	; 0x6c6e <__fp_round+0x18>
    6c6a:	60 ff       	sbrs	r22, 0
    6c6c:	04 c0       	rjmp	.+8      	; 0x6c76 <__fp_round+0x20>
    6c6e:	6f 5f       	subi	r22, 0xFF	; 255
    6c70:	7f 4f       	sbci	r23, 0xFF	; 255
    6c72:	8f 4f       	sbci	r24, 0xFF	; 255
    6c74:	9f 4f       	sbci	r25, 0xFF	; 255
    6c76:	08 95       	ret

00006c78 <__fp_split3>:
    6c78:	57 fd       	sbrc	r21, 7
    6c7a:	90 58       	subi	r25, 0x80	; 128
    6c7c:	44 0f       	add	r20, r20
    6c7e:	55 1f       	adc	r21, r21
    6c80:	59 f0       	breq	.+22     	; 0x6c98 <__fp_splitA+0x10>
    6c82:	5f 3f       	cpi	r21, 0xFF	; 255
    6c84:	71 f0       	breq	.+28     	; 0x6ca2 <__fp_splitA+0x1a>
    6c86:	47 95       	ror	r20

00006c88 <__fp_splitA>:
    6c88:	88 0f       	add	r24, r24
    6c8a:	97 fb       	bst	r25, 7
    6c8c:	99 1f       	adc	r25, r25
    6c8e:	61 f0       	breq	.+24     	; 0x6ca8 <__fp_splitA+0x20>
    6c90:	9f 3f       	cpi	r25, 0xFF	; 255
    6c92:	79 f0       	breq	.+30     	; 0x6cb2 <__fp_splitA+0x2a>
    6c94:	87 95       	ror	r24
    6c96:	08 95       	ret
    6c98:	12 16       	cp	r1, r18
    6c9a:	13 06       	cpc	r1, r19
    6c9c:	14 06       	cpc	r1, r20
    6c9e:	55 1f       	adc	r21, r21
    6ca0:	f2 cf       	rjmp	.-28     	; 0x6c86 <__fp_split3+0xe>
    6ca2:	46 95       	lsr	r20
    6ca4:	f1 df       	rcall	.-30     	; 0x6c88 <__fp_splitA>
    6ca6:	08 c0       	rjmp	.+16     	; 0x6cb8 <__fp_splitA+0x30>
    6ca8:	16 16       	cp	r1, r22
    6caa:	17 06       	cpc	r1, r23
    6cac:	18 06       	cpc	r1, r24
    6cae:	99 1f       	adc	r25, r25
    6cb0:	f1 cf       	rjmp	.-30     	; 0x6c94 <__fp_splitA+0xc>
    6cb2:	86 95       	lsr	r24
    6cb4:	71 05       	cpc	r23, r1
    6cb6:	61 05       	cpc	r22, r1
    6cb8:	08 94       	sec
    6cba:	08 95       	ret

00006cbc <__fp_zero>:
    6cbc:	e8 94       	clt

00006cbe <__fp_szero>:
    6cbe:	bb 27       	eor	r27, r27
    6cc0:	66 27       	eor	r22, r22
    6cc2:	77 27       	eor	r23, r23
    6cc4:	cb 01       	movw	r24, r22
    6cc6:	97 f9       	bld	r25, 7
    6cc8:	08 95       	ret

00006cca <__gesf2>:
    6cca:	8a df       	rcall	.-236    	; 0x6be0 <__fp_cmp>
    6ccc:	08 f4       	brcc	.+2      	; 0x6cd0 <__gesf2+0x6>
    6cce:	8f ef       	ldi	r24, 0xFF	; 255
    6cd0:	08 95       	ret

00006cd2 <__mulsf3>:
    6cd2:	0b d0       	rcall	.+22     	; 0x6cea <__mulsf3x>
    6cd4:	c0 cf       	rjmp	.-128    	; 0x6c56 <__fp_round>
    6cd6:	b1 df       	rcall	.-158    	; 0x6c3a <__fp_pscA>
    6cd8:	28 f0       	brcs	.+10     	; 0x6ce4 <__mulsf3+0x12>
    6cda:	b6 df       	rcall	.-148    	; 0x6c48 <__fp_pscB>
    6cdc:	18 f0       	brcs	.+6      	; 0x6ce4 <__mulsf3+0x12>
    6cde:	95 23       	and	r25, r21
    6ce0:	09 f0       	breq	.+2      	; 0x6ce4 <__mulsf3+0x12>
    6ce2:	a2 cf       	rjmp	.-188    	; 0x6c28 <__fp_inf>
    6ce4:	a7 cf       	rjmp	.-178    	; 0x6c34 <__fp_nan>
    6ce6:	11 24       	eor	r1, r1
    6ce8:	ea cf       	rjmp	.-44     	; 0x6cbe <__fp_szero>

00006cea <__mulsf3x>:
    6cea:	c6 df       	rcall	.-116    	; 0x6c78 <__fp_split3>
    6cec:	a0 f3       	brcs	.-24     	; 0x6cd6 <__mulsf3+0x4>

00006cee <__mulsf3_pse>:
    6cee:	95 9f       	mul	r25, r21
    6cf0:	d1 f3       	breq	.-12     	; 0x6ce6 <__mulsf3+0x14>
    6cf2:	95 0f       	add	r25, r21
    6cf4:	50 e0       	ldi	r21, 0x00	; 0
    6cf6:	55 1f       	adc	r21, r21
    6cf8:	62 9f       	mul	r22, r18
    6cfa:	f0 01       	movw	r30, r0
    6cfc:	72 9f       	mul	r23, r18
    6cfe:	bb 27       	eor	r27, r27
    6d00:	f0 0d       	add	r31, r0
    6d02:	b1 1d       	adc	r27, r1
    6d04:	63 9f       	mul	r22, r19
    6d06:	aa 27       	eor	r26, r26
    6d08:	f0 0d       	add	r31, r0
    6d0a:	b1 1d       	adc	r27, r1
    6d0c:	aa 1f       	adc	r26, r26
    6d0e:	64 9f       	mul	r22, r20
    6d10:	66 27       	eor	r22, r22
    6d12:	b0 0d       	add	r27, r0
    6d14:	a1 1d       	adc	r26, r1
    6d16:	66 1f       	adc	r22, r22
    6d18:	82 9f       	mul	r24, r18
    6d1a:	22 27       	eor	r18, r18
    6d1c:	b0 0d       	add	r27, r0
    6d1e:	a1 1d       	adc	r26, r1
    6d20:	62 1f       	adc	r22, r18
    6d22:	73 9f       	mul	r23, r19
    6d24:	b0 0d       	add	r27, r0
    6d26:	a1 1d       	adc	r26, r1
    6d28:	62 1f       	adc	r22, r18
    6d2a:	83 9f       	mul	r24, r19
    6d2c:	a0 0d       	add	r26, r0
    6d2e:	61 1d       	adc	r22, r1
    6d30:	22 1f       	adc	r18, r18
    6d32:	74 9f       	mul	r23, r20
    6d34:	33 27       	eor	r19, r19
    6d36:	a0 0d       	add	r26, r0
    6d38:	61 1d       	adc	r22, r1
    6d3a:	23 1f       	adc	r18, r19
    6d3c:	84 9f       	mul	r24, r20
    6d3e:	60 0d       	add	r22, r0
    6d40:	21 1d       	adc	r18, r1
    6d42:	82 2f       	mov	r24, r18
    6d44:	76 2f       	mov	r23, r22
    6d46:	6a 2f       	mov	r22, r26
    6d48:	11 24       	eor	r1, r1
    6d4a:	9f 57       	subi	r25, 0x7F	; 127
    6d4c:	50 40       	sbci	r21, 0x00	; 0
    6d4e:	8a f0       	brmi	.+34     	; 0x6d72 <__mulsf3_pse+0x84>
    6d50:	e1 f0       	breq	.+56     	; 0x6d8a <__mulsf3_pse+0x9c>
    6d52:	88 23       	and	r24, r24
    6d54:	4a f0       	brmi	.+18     	; 0x6d68 <__mulsf3_pse+0x7a>
    6d56:	ee 0f       	add	r30, r30
    6d58:	ff 1f       	adc	r31, r31
    6d5a:	bb 1f       	adc	r27, r27
    6d5c:	66 1f       	adc	r22, r22
    6d5e:	77 1f       	adc	r23, r23
    6d60:	88 1f       	adc	r24, r24
    6d62:	91 50       	subi	r25, 0x01	; 1
    6d64:	50 40       	sbci	r21, 0x00	; 0
    6d66:	a9 f7       	brne	.-22     	; 0x6d52 <__mulsf3_pse+0x64>
    6d68:	9e 3f       	cpi	r25, 0xFE	; 254
    6d6a:	51 05       	cpc	r21, r1
    6d6c:	70 f0       	brcs	.+28     	; 0x6d8a <__mulsf3_pse+0x9c>
    6d6e:	5c cf       	rjmp	.-328    	; 0x6c28 <__fp_inf>
    6d70:	a6 cf       	rjmp	.-180    	; 0x6cbe <__fp_szero>
    6d72:	5f 3f       	cpi	r21, 0xFF	; 255
    6d74:	ec f3       	brlt	.-6      	; 0x6d70 <__mulsf3_pse+0x82>
    6d76:	98 3e       	cpi	r25, 0xE8	; 232
    6d78:	dc f3       	brlt	.-10     	; 0x6d70 <__mulsf3_pse+0x82>
    6d7a:	86 95       	lsr	r24
    6d7c:	77 95       	ror	r23
    6d7e:	67 95       	ror	r22
    6d80:	b7 95       	ror	r27
    6d82:	f7 95       	ror	r31
    6d84:	e7 95       	ror	r30
    6d86:	9f 5f       	subi	r25, 0xFF	; 255
    6d88:	c1 f7       	brne	.-16     	; 0x6d7a <__mulsf3_pse+0x8c>
    6d8a:	fe 2b       	or	r31, r30
    6d8c:	88 0f       	add	r24, r24
    6d8e:	91 1d       	adc	r25, r1
    6d90:	96 95       	lsr	r25
    6d92:	87 95       	ror	r24
    6d94:	97 f9       	bld	r25, 7
    6d96:	08 95       	ret

00006d98 <__mulsi3>:
    6d98:	db 01       	movw	r26, r22
    6d9a:	8f 93       	push	r24
    6d9c:	9f 93       	push	r25
    6d9e:	2d d0       	rcall	.+90     	; 0x6dfa <__muluhisi3>
    6da0:	bf 91       	pop	r27
    6da2:	af 91       	pop	r26
    6da4:	a2 9f       	mul	r26, r18
    6da6:	80 0d       	add	r24, r0
    6da8:	91 1d       	adc	r25, r1
    6daa:	a3 9f       	mul	r26, r19
    6dac:	90 0d       	add	r25, r0
    6dae:	b2 9f       	mul	r27, r18
    6db0:	90 0d       	add	r25, r0
    6db2:	11 24       	eor	r1, r1
    6db4:	08 95       	ret

00006db6 <__udivmodsi4>:
    6db6:	a1 e2       	ldi	r26, 0x21	; 33
    6db8:	1a 2e       	mov	r1, r26
    6dba:	aa 1b       	sub	r26, r26
    6dbc:	bb 1b       	sub	r27, r27
    6dbe:	fd 01       	movw	r30, r26
    6dc0:	0d c0       	rjmp	.+26     	; 0x6ddc <__udivmodsi4_ep>

00006dc2 <__udivmodsi4_loop>:
    6dc2:	aa 1f       	adc	r26, r26
    6dc4:	bb 1f       	adc	r27, r27
    6dc6:	ee 1f       	adc	r30, r30
    6dc8:	ff 1f       	adc	r31, r31
    6dca:	a2 17       	cp	r26, r18
    6dcc:	b3 07       	cpc	r27, r19
    6dce:	e4 07       	cpc	r30, r20
    6dd0:	f5 07       	cpc	r31, r21
    6dd2:	20 f0       	brcs	.+8      	; 0x6ddc <__udivmodsi4_ep>
    6dd4:	a2 1b       	sub	r26, r18
    6dd6:	b3 0b       	sbc	r27, r19
    6dd8:	e4 0b       	sbc	r30, r20
    6dda:	f5 0b       	sbc	r31, r21

00006ddc <__udivmodsi4_ep>:
    6ddc:	66 1f       	adc	r22, r22
    6dde:	77 1f       	adc	r23, r23
    6de0:	88 1f       	adc	r24, r24
    6de2:	99 1f       	adc	r25, r25
    6de4:	1a 94       	dec	r1
    6de6:	69 f7       	brne	.-38     	; 0x6dc2 <__udivmodsi4_loop>
    6de8:	60 95       	com	r22
    6dea:	70 95       	com	r23
    6dec:	80 95       	com	r24
    6dee:	90 95       	com	r25
    6df0:	9b 01       	movw	r18, r22
    6df2:	ac 01       	movw	r20, r24
    6df4:	bd 01       	movw	r22, r26
    6df6:	cf 01       	movw	r24, r30
    6df8:	08 95       	ret

00006dfa <__muluhisi3>:
    6dfa:	09 d0       	rcall	.+18     	; 0x6e0e <__umulhisi3>
    6dfc:	a5 9f       	mul	r26, r21
    6dfe:	90 0d       	add	r25, r0
    6e00:	b4 9f       	mul	r27, r20
    6e02:	90 0d       	add	r25, r0
    6e04:	a4 9f       	mul	r26, r20
    6e06:	80 0d       	add	r24, r0
    6e08:	91 1d       	adc	r25, r1
    6e0a:	11 24       	eor	r1, r1
    6e0c:	08 95       	ret

00006e0e <__umulhisi3>:
    6e0e:	a2 9f       	mul	r26, r18
    6e10:	b0 01       	movw	r22, r0
    6e12:	b3 9f       	mul	r27, r19
    6e14:	c0 01       	movw	r24, r0
    6e16:	a3 9f       	mul	r26, r19
    6e18:	70 0d       	add	r23, r0
    6e1a:	81 1d       	adc	r24, r1
    6e1c:	11 24       	eor	r1, r1
    6e1e:	91 1d       	adc	r25, r1
    6e20:	b2 9f       	mul	r27, r18
    6e22:	70 0d       	add	r23, r0
    6e24:	81 1d       	adc	r24, r1
    6e26:	11 24       	eor	r1, r1
    6e28:	91 1d       	adc	r25, r1
    6e2a:	08 95       	ret

00006e2c <memcpy>:
    6e2c:	fb 01       	movw	r30, r22
    6e2e:	dc 01       	movw	r26, r24
    6e30:	02 c0       	rjmp	.+4      	; 0x6e36 <memcpy+0xa>
    6e32:	01 90       	ld	r0, Z+
    6e34:	0d 92       	st	X+, r0
    6e36:	41 50       	subi	r20, 0x01	; 1
    6e38:	50 40       	sbci	r21, 0x00	; 0
    6e3a:	d8 f7       	brcc	.-10     	; 0x6e32 <memcpy+0x6>
    6e3c:	08 95       	ret

00006e3e <memset>:
    6e3e:	dc 01       	movw	r26, r24
    6e40:	01 c0       	rjmp	.+2      	; 0x6e44 <memset+0x6>
    6e42:	6d 93       	st	X+, r22
    6e44:	41 50       	subi	r20, 0x01	; 1
    6e46:	50 40       	sbci	r21, 0x00	; 0
    6e48:	e0 f7       	brcc	.-8      	; 0x6e42 <memset+0x4>
    6e4a:	08 95       	ret

00006e4c <printf>:
    6e4c:	cf 93       	push	r28
    6e4e:	df 93       	push	r29
    6e50:	cd b7       	in	r28, 0x3d	; 61
    6e52:	de b7       	in	r29, 0x3e	; 62
    6e54:	ae 01       	movw	r20, r28
    6e56:	4a 5f       	subi	r20, 0xFA	; 250
    6e58:	5f 4f       	sbci	r21, 0xFF	; 255
    6e5a:	fa 01       	movw	r30, r20
    6e5c:	61 91       	ld	r22, Z+
    6e5e:	71 91       	ld	r23, Z+
    6e60:	af 01       	movw	r20, r30
    6e62:	80 91 df 13 	lds	r24, 0x13DF	; 0x8013df <__iob+0x2>
    6e66:	90 91 e0 13 	lds	r25, 0x13E0	; 0x8013e0 <__iob+0x3>
    6e6a:	33 d0       	rcall	.+102    	; 0x6ed2 <vfprintf>
    6e6c:	df 91       	pop	r29
    6e6e:	cf 91       	pop	r28
    6e70:	08 95       	ret

00006e72 <puts>:
    6e72:	0f 93       	push	r16
    6e74:	1f 93       	push	r17
    6e76:	cf 93       	push	r28
    6e78:	df 93       	push	r29
    6e7a:	e0 91 df 13 	lds	r30, 0x13DF	; 0x8013df <__iob+0x2>
    6e7e:	f0 91 e0 13 	lds	r31, 0x13E0	; 0x8013e0 <__iob+0x3>
    6e82:	23 81       	ldd	r18, Z+3	; 0x03
    6e84:	21 ff       	sbrs	r18, 1
    6e86:	1b c0       	rjmp	.+54     	; 0x6ebe <puts+0x4c>
    6e88:	8c 01       	movw	r16, r24
    6e8a:	d0 e0       	ldi	r29, 0x00	; 0
    6e8c:	c0 e0       	ldi	r28, 0x00	; 0
    6e8e:	f8 01       	movw	r30, r16
    6e90:	81 91       	ld	r24, Z+
    6e92:	8f 01       	movw	r16, r30
    6e94:	60 91 df 13 	lds	r22, 0x13DF	; 0x8013df <__iob+0x2>
    6e98:	70 91 e0 13 	lds	r23, 0x13E0	; 0x8013e0 <__iob+0x3>
    6e9c:	db 01       	movw	r26, r22
    6e9e:	18 96       	adiw	r26, 0x08	; 8
    6ea0:	ed 91       	ld	r30, X+
    6ea2:	fc 91       	ld	r31, X
    6ea4:	19 97       	sbiw	r26, 0x09	; 9
    6ea6:	88 23       	and	r24, r24
    6ea8:	31 f0       	breq	.+12     	; 0x6eb6 <puts+0x44>
    6eaa:	19 95       	eicall
    6eac:	89 2b       	or	r24, r25
    6eae:	79 f3       	breq	.-34     	; 0x6e8e <puts+0x1c>
    6eb0:	df ef       	ldi	r29, 0xFF	; 255
    6eb2:	cf ef       	ldi	r28, 0xFF	; 255
    6eb4:	ec cf       	rjmp	.-40     	; 0x6e8e <puts+0x1c>
    6eb6:	8a e0       	ldi	r24, 0x0A	; 10
    6eb8:	19 95       	eicall
    6eba:	89 2b       	or	r24, r25
    6ebc:	19 f0       	breq	.+6      	; 0x6ec4 <puts+0x52>
    6ebe:	8f ef       	ldi	r24, 0xFF	; 255
    6ec0:	9f ef       	ldi	r25, 0xFF	; 255
    6ec2:	02 c0       	rjmp	.+4      	; 0x6ec8 <puts+0x56>
    6ec4:	8d 2f       	mov	r24, r29
    6ec6:	9c 2f       	mov	r25, r28
    6ec8:	df 91       	pop	r29
    6eca:	cf 91       	pop	r28
    6ecc:	1f 91       	pop	r17
    6ece:	0f 91       	pop	r16
    6ed0:	08 95       	ret

00006ed2 <vfprintf>:
    6ed2:	2f 92       	push	r2
    6ed4:	3f 92       	push	r3
    6ed6:	4f 92       	push	r4
    6ed8:	5f 92       	push	r5
    6eda:	6f 92       	push	r6
    6edc:	7f 92       	push	r7
    6ede:	8f 92       	push	r8
    6ee0:	9f 92       	push	r9
    6ee2:	af 92       	push	r10
    6ee4:	bf 92       	push	r11
    6ee6:	cf 92       	push	r12
    6ee8:	df 92       	push	r13
    6eea:	ef 92       	push	r14
    6eec:	ff 92       	push	r15
    6eee:	0f 93       	push	r16
    6ef0:	1f 93       	push	r17
    6ef2:	cf 93       	push	r28
    6ef4:	df 93       	push	r29
    6ef6:	cd b7       	in	r28, 0x3d	; 61
    6ef8:	de b7       	in	r29, 0x3e	; 62
    6efa:	2b 97       	sbiw	r28, 0x0b	; 11
    6efc:	0f b6       	in	r0, 0x3f	; 63
    6efe:	f8 94       	cli
    6f00:	de bf       	out	0x3e, r29	; 62
    6f02:	0f be       	out	0x3f, r0	; 63
    6f04:	cd bf       	out	0x3d, r28	; 61
    6f06:	6c 01       	movw	r12, r24
    6f08:	7b 01       	movw	r14, r22
    6f0a:	8a 01       	movw	r16, r20
    6f0c:	fc 01       	movw	r30, r24
    6f0e:	17 82       	std	Z+7, r1	; 0x07
    6f10:	16 82       	std	Z+6, r1	; 0x06
    6f12:	83 81       	ldd	r24, Z+3	; 0x03
    6f14:	81 ff       	sbrs	r24, 1
    6f16:	bf c1       	rjmp	.+894    	; 0x7296 <vfprintf+0x3c4>
    6f18:	ce 01       	movw	r24, r28
    6f1a:	01 96       	adiw	r24, 0x01	; 1
    6f1c:	3c 01       	movw	r6, r24
    6f1e:	f6 01       	movw	r30, r12
    6f20:	93 81       	ldd	r25, Z+3	; 0x03
    6f22:	f7 01       	movw	r30, r14
    6f24:	93 fd       	sbrc	r25, 3
    6f26:	85 91       	lpm	r24, Z+
    6f28:	93 ff       	sbrs	r25, 3
    6f2a:	81 91       	ld	r24, Z+
    6f2c:	7f 01       	movw	r14, r30
    6f2e:	88 23       	and	r24, r24
    6f30:	09 f4       	brne	.+2      	; 0x6f34 <vfprintf+0x62>
    6f32:	ad c1       	rjmp	.+858    	; 0x728e <vfprintf+0x3bc>
    6f34:	85 32       	cpi	r24, 0x25	; 37
    6f36:	39 f4       	brne	.+14     	; 0x6f46 <vfprintf+0x74>
    6f38:	93 fd       	sbrc	r25, 3
    6f3a:	85 91       	lpm	r24, Z+
    6f3c:	93 ff       	sbrs	r25, 3
    6f3e:	81 91       	ld	r24, Z+
    6f40:	7f 01       	movw	r14, r30
    6f42:	85 32       	cpi	r24, 0x25	; 37
    6f44:	21 f4       	brne	.+8      	; 0x6f4e <vfprintf+0x7c>
    6f46:	b6 01       	movw	r22, r12
    6f48:	90 e0       	ldi	r25, 0x00	; 0
    6f4a:	d6 d1       	rcall	.+940    	; 0x72f8 <fputc>
    6f4c:	e8 cf       	rjmp	.-48     	; 0x6f1e <vfprintf+0x4c>
    6f4e:	91 2c       	mov	r9, r1
    6f50:	21 2c       	mov	r2, r1
    6f52:	31 2c       	mov	r3, r1
    6f54:	ff e1       	ldi	r31, 0x1F	; 31
    6f56:	f3 15       	cp	r31, r3
    6f58:	d8 f0       	brcs	.+54     	; 0x6f90 <vfprintf+0xbe>
    6f5a:	8b 32       	cpi	r24, 0x2B	; 43
    6f5c:	79 f0       	breq	.+30     	; 0x6f7c <vfprintf+0xaa>
    6f5e:	38 f4       	brcc	.+14     	; 0x6f6e <vfprintf+0x9c>
    6f60:	80 32       	cpi	r24, 0x20	; 32
    6f62:	79 f0       	breq	.+30     	; 0x6f82 <vfprintf+0xb0>
    6f64:	83 32       	cpi	r24, 0x23	; 35
    6f66:	a1 f4       	brne	.+40     	; 0x6f90 <vfprintf+0xbe>
    6f68:	23 2d       	mov	r18, r3
    6f6a:	20 61       	ori	r18, 0x10	; 16
    6f6c:	1d c0       	rjmp	.+58     	; 0x6fa8 <vfprintf+0xd6>
    6f6e:	8d 32       	cpi	r24, 0x2D	; 45
    6f70:	61 f0       	breq	.+24     	; 0x6f8a <vfprintf+0xb8>
    6f72:	80 33       	cpi	r24, 0x30	; 48
    6f74:	69 f4       	brne	.+26     	; 0x6f90 <vfprintf+0xbe>
    6f76:	23 2d       	mov	r18, r3
    6f78:	21 60       	ori	r18, 0x01	; 1
    6f7a:	16 c0       	rjmp	.+44     	; 0x6fa8 <vfprintf+0xd6>
    6f7c:	83 2d       	mov	r24, r3
    6f7e:	82 60       	ori	r24, 0x02	; 2
    6f80:	38 2e       	mov	r3, r24
    6f82:	e3 2d       	mov	r30, r3
    6f84:	e4 60       	ori	r30, 0x04	; 4
    6f86:	3e 2e       	mov	r3, r30
    6f88:	2a c0       	rjmp	.+84     	; 0x6fde <vfprintf+0x10c>
    6f8a:	f3 2d       	mov	r31, r3
    6f8c:	f8 60       	ori	r31, 0x08	; 8
    6f8e:	1d c0       	rjmp	.+58     	; 0x6fca <vfprintf+0xf8>
    6f90:	37 fc       	sbrc	r3, 7
    6f92:	2d c0       	rjmp	.+90     	; 0x6fee <vfprintf+0x11c>
    6f94:	20 ed       	ldi	r18, 0xD0	; 208
    6f96:	28 0f       	add	r18, r24
    6f98:	2a 30       	cpi	r18, 0x0A	; 10
    6f9a:	40 f0       	brcs	.+16     	; 0x6fac <vfprintf+0xda>
    6f9c:	8e 32       	cpi	r24, 0x2E	; 46
    6f9e:	b9 f4       	brne	.+46     	; 0x6fce <vfprintf+0xfc>
    6fa0:	36 fc       	sbrc	r3, 6
    6fa2:	75 c1       	rjmp	.+746    	; 0x728e <vfprintf+0x3bc>
    6fa4:	23 2d       	mov	r18, r3
    6fa6:	20 64       	ori	r18, 0x40	; 64
    6fa8:	32 2e       	mov	r3, r18
    6faa:	19 c0       	rjmp	.+50     	; 0x6fde <vfprintf+0x10c>
    6fac:	36 fe       	sbrs	r3, 6
    6fae:	06 c0       	rjmp	.+12     	; 0x6fbc <vfprintf+0xea>
    6fb0:	8a e0       	ldi	r24, 0x0A	; 10
    6fb2:	98 9e       	mul	r9, r24
    6fb4:	20 0d       	add	r18, r0
    6fb6:	11 24       	eor	r1, r1
    6fb8:	92 2e       	mov	r9, r18
    6fba:	11 c0       	rjmp	.+34     	; 0x6fde <vfprintf+0x10c>
    6fbc:	ea e0       	ldi	r30, 0x0A	; 10
    6fbe:	2e 9e       	mul	r2, r30
    6fc0:	20 0d       	add	r18, r0
    6fc2:	11 24       	eor	r1, r1
    6fc4:	22 2e       	mov	r2, r18
    6fc6:	f3 2d       	mov	r31, r3
    6fc8:	f0 62       	ori	r31, 0x20	; 32
    6fca:	3f 2e       	mov	r3, r31
    6fcc:	08 c0       	rjmp	.+16     	; 0x6fde <vfprintf+0x10c>
    6fce:	8c 36       	cpi	r24, 0x6C	; 108
    6fd0:	21 f4       	brne	.+8      	; 0x6fda <vfprintf+0x108>
    6fd2:	83 2d       	mov	r24, r3
    6fd4:	80 68       	ori	r24, 0x80	; 128
    6fd6:	38 2e       	mov	r3, r24
    6fd8:	02 c0       	rjmp	.+4      	; 0x6fde <vfprintf+0x10c>
    6fda:	88 36       	cpi	r24, 0x68	; 104
    6fdc:	41 f4       	brne	.+16     	; 0x6fee <vfprintf+0x11c>
    6fde:	f7 01       	movw	r30, r14
    6fe0:	93 fd       	sbrc	r25, 3
    6fe2:	85 91       	lpm	r24, Z+
    6fe4:	93 ff       	sbrs	r25, 3
    6fe6:	81 91       	ld	r24, Z+
    6fe8:	7f 01       	movw	r14, r30
    6fea:	81 11       	cpse	r24, r1
    6fec:	b3 cf       	rjmp	.-154    	; 0x6f54 <vfprintf+0x82>
    6fee:	98 2f       	mov	r25, r24
    6ff0:	9f 7d       	andi	r25, 0xDF	; 223
    6ff2:	95 54       	subi	r25, 0x45	; 69
    6ff4:	93 30       	cpi	r25, 0x03	; 3
    6ff6:	28 f4       	brcc	.+10     	; 0x7002 <vfprintf+0x130>
    6ff8:	0c 5f       	subi	r16, 0xFC	; 252
    6ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    6ffc:	9f e3       	ldi	r25, 0x3F	; 63
    6ffe:	99 83       	std	Y+1, r25	; 0x01
    7000:	0d c0       	rjmp	.+26     	; 0x701c <vfprintf+0x14a>
    7002:	83 36       	cpi	r24, 0x63	; 99
    7004:	31 f0       	breq	.+12     	; 0x7012 <vfprintf+0x140>
    7006:	83 37       	cpi	r24, 0x73	; 115
    7008:	71 f0       	breq	.+28     	; 0x7026 <vfprintf+0x154>
    700a:	83 35       	cpi	r24, 0x53	; 83
    700c:	09 f0       	breq	.+2      	; 0x7010 <vfprintf+0x13e>
    700e:	55 c0       	rjmp	.+170    	; 0x70ba <vfprintf+0x1e8>
    7010:	20 c0       	rjmp	.+64     	; 0x7052 <vfprintf+0x180>
    7012:	f8 01       	movw	r30, r16
    7014:	80 81       	ld	r24, Z
    7016:	89 83       	std	Y+1, r24	; 0x01
    7018:	0e 5f       	subi	r16, 0xFE	; 254
    701a:	1f 4f       	sbci	r17, 0xFF	; 255
    701c:	88 24       	eor	r8, r8
    701e:	83 94       	inc	r8
    7020:	91 2c       	mov	r9, r1
    7022:	53 01       	movw	r10, r6
    7024:	12 c0       	rjmp	.+36     	; 0x704a <vfprintf+0x178>
    7026:	28 01       	movw	r4, r16
    7028:	f2 e0       	ldi	r31, 0x02	; 2
    702a:	4f 0e       	add	r4, r31
    702c:	51 1c       	adc	r5, r1
    702e:	f8 01       	movw	r30, r16
    7030:	a0 80       	ld	r10, Z
    7032:	b1 80       	ldd	r11, Z+1	; 0x01
    7034:	36 fe       	sbrs	r3, 6
    7036:	03 c0       	rjmp	.+6      	; 0x703e <vfprintf+0x16c>
    7038:	69 2d       	mov	r22, r9
    703a:	70 e0       	ldi	r23, 0x00	; 0
    703c:	02 c0       	rjmp	.+4      	; 0x7042 <vfprintf+0x170>
    703e:	6f ef       	ldi	r22, 0xFF	; 255
    7040:	7f ef       	ldi	r23, 0xFF	; 255
    7042:	c5 01       	movw	r24, r10
    7044:	4e d1       	rcall	.+668    	; 0x72e2 <strnlen>
    7046:	4c 01       	movw	r8, r24
    7048:	82 01       	movw	r16, r4
    704a:	f3 2d       	mov	r31, r3
    704c:	ff 77       	andi	r31, 0x7F	; 127
    704e:	3f 2e       	mov	r3, r31
    7050:	15 c0       	rjmp	.+42     	; 0x707c <vfprintf+0x1aa>
    7052:	28 01       	movw	r4, r16
    7054:	22 e0       	ldi	r18, 0x02	; 2
    7056:	42 0e       	add	r4, r18
    7058:	51 1c       	adc	r5, r1
    705a:	f8 01       	movw	r30, r16
    705c:	a0 80       	ld	r10, Z
    705e:	b1 80       	ldd	r11, Z+1	; 0x01
    7060:	36 fe       	sbrs	r3, 6
    7062:	03 c0       	rjmp	.+6      	; 0x706a <vfprintf+0x198>
    7064:	69 2d       	mov	r22, r9
    7066:	70 e0       	ldi	r23, 0x00	; 0
    7068:	02 c0       	rjmp	.+4      	; 0x706e <vfprintf+0x19c>
    706a:	6f ef       	ldi	r22, 0xFF	; 255
    706c:	7f ef       	ldi	r23, 0xFF	; 255
    706e:	c5 01       	movw	r24, r10
    7070:	2d d1       	rcall	.+602    	; 0x72cc <strnlen_P>
    7072:	4c 01       	movw	r8, r24
    7074:	f3 2d       	mov	r31, r3
    7076:	f0 68       	ori	r31, 0x80	; 128
    7078:	3f 2e       	mov	r3, r31
    707a:	82 01       	movw	r16, r4
    707c:	33 fc       	sbrc	r3, 3
    707e:	19 c0       	rjmp	.+50     	; 0x70b2 <vfprintf+0x1e0>
    7080:	82 2d       	mov	r24, r2
    7082:	90 e0       	ldi	r25, 0x00	; 0
    7084:	88 16       	cp	r8, r24
    7086:	99 06       	cpc	r9, r25
    7088:	a0 f4       	brcc	.+40     	; 0x70b2 <vfprintf+0x1e0>
    708a:	b6 01       	movw	r22, r12
    708c:	80 e2       	ldi	r24, 0x20	; 32
    708e:	90 e0       	ldi	r25, 0x00	; 0
    7090:	33 d1       	rcall	.+614    	; 0x72f8 <fputc>
    7092:	2a 94       	dec	r2
    7094:	f5 cf       	rjmp	.-22     	; 0x7080 <vfprintf+0x1ae>
    7096:	f5 01       	movw	r30, r10
    7098:	37 fc       	sbrc	r3, 7
    709a:	85 91       	lpm	r24, Z+
    709c:	37 fe       	sbrs	r3, 7
    709e:	81 91       	ld	r24, Z+
    70a0:	5f 01       	movw	r10, r30
    70a2:	b6 01       	movw	r22, r12
    70a4:	90 e0       	ldi	r25, 0x00	; 0
    70a6:	28 d1       	rcall	.+592    	; 0x72f8 <fputc>
    70a8:	21 10       	cpse	r2, r1
    70aa:	2a 94       	dec	r2
    70ac:	21 e0       	ldi	r18, 0x01	; 1
    70ae:	82 1a       	sub	r8, r18
    70b0:	91 08       	sbc	r9, r1
    70b2:	81 14       	cp	r8, r1
    70b4:	91 04       	cpc	r9, r1
    70b6:	79 f7       	brne	.-34     	; 0x7096 <vfprintf+0x1c4>
    70b8:	e1 c0       	rjmp	.+450    	; 0x727c <vfprintf+0x3aa>
    70ba:	84 36       	cpi	r24, 0x64	; 100
    70bc:	11 f0       	breq	.+4      	; 0x70c2 <vfprintf+0x1f0>
    70be:	89 36       	cpi	r24, 0x69	; 105
    70c0:	39 f5       	brne	.+78     	; 0x7110 <vfprintf+0x23e>
    70c2:	f8 01       	movw	r30, r16
    70c4:	37 fe       	sbrs	r3, 7
    70c6:	07 c0       	rjmp	.+14     	; 0x70d6 <vfprintf+0x204>
    70c8:	60 81       	ld	r22, Z
    70ca:	71 81       	ldd	r23, Z+1	; 0x01
    70cc:	82 81       	ldd	r24, Z+2	; 0x02
    70ce:	93 81       	ldd	r25, Z+3	; 0x03
    70d0:	0c 5f       	subi	r16, 0xFC	; 252
    70d2:	1f 4f       	sbci	r17, 0xFF	; 255
    70d4:	08 c0       	rjmp	.+16     	; 0x70e6 <vfprintf+0x214>
    70d6:	60 81       	ld	r22, Z
    70d8:	71 81       	ldd	r23, Z+1	; 0x01
    70da:	07 2e       	mov	r0, r23
    70dc:	00 0c       	add	r0, r0
    70de:	88 0b       	sbc	r24, r24
    70e0:	99 0b       	sbc	r25, r25
    70e2:	0e 5f       	subi	r16, 0xFE	; 254
    70e4:	1f 4f       	sbci	r17, 0xFF	; 255
    70e6:	f3 2d       	mov	r31, r3
    70e8:	ff 76       	andi	r31, 0x6F	; 111
    70ea:	3f 2e       	mov	r3, r31
    70ec:	97 ff       	sbrs	r25, 7
    70ee:	09 c0       	rjmp	.+18     	; 0x7102 <vfprintf+0x230>
    70f0:	90 95       	com	r25
    70f2:	80 95       	com	r24
    70f4:	70 95       	com	r23
    70f6:	61 95       	neg	r22
    70f8:	7f 4f       	sbci	r23, 0xFF	; 255
    70fa:	8f 4f       	sbci	r24, 0xFF	; 255
    70fc:	9f 4f       	sbci	r25, 0xFF	; 255
    70fe:	f0 68       	ori	r31, 0x80	; 128
    7100:	3f 2e       	mov	r3, r31
    7102:	2a e0       	ldi	r18, 0x0A	; 10
    7104:	30 e0       	ldi	r19, 0x00	; 0
    7106:	a3 01       	movw	r20, r6
    7108:	33 d1       	rcall	.+614    	; 0x7370 <__ultoa_invert>
    710a:	88 2e       	mov	r8, r24
    710c:	86 18       	sub	r8, r6
    710e:	44 c0       	rjmp	.+136    	; 0x7198 <vfprintf+0x2c6>
    7110:	85 37       	cpi	r24, 0x75	; 117
    7112:	31 f4       	brne	.+12     	; 0x7120 <vfprintf+0x24e>
    7114:	23 2d       	mov	r18, r3
    7116:	2f 7e       	andi	r18, 0xEF	; 239
    7118:	b2 2e       	mov	r11, r18
    711a:	2a e0       	ldi	r18, 0x0A	; 10
    711c:	30 e0       	ldi	r19, 0x00	; 0
    711e:	25 c0       	rjmp	.+74     	; 0x716a <vfprintf+0x298>
    7120:	93 2d       	mov	r25, r3
    7122:	99 7f       	andi	r25, 0xF9	; 249
    7124:	b9 2e       	mov	r11, r25
    7126:	8f 36       	cpi	r24, 0x6F	; 111
    7128:	c1 f0       	breq	.+48     	; 0x715a <vfprintf+0x288>
    712a:	18 f4       	brcc	.+6      	; 0x7132 <vfprintf+0x260>
    712c:	88 35       	cpi	r24, 0x58	; 88
    712e:	79 f0       	breq	.+30     	; 0x714e <vfprintf+0x27c>
    7130:	ae c0       	rjmp	.+348    	; 0x728e <vfprintf+0x3bc>
    7132:	80 37       	cpi	r24, 0x70	; 112
    7134:	19 f0       	breq	.+6      	; 0x713c <vfprintf+0x26a>
    7136:	88 37       	cpi	r24, 0x78	; 120
    7138:	21 f0       	breq	.+8      	; 0x7142 <vfprintf+0x270>
    713a:	a9 c0       	rjmp	.+338    	; 0x728e <vfprintf+0x3bc>
    713c:	e9 2f       	mov	r30, r25
    713e:	e0 61       	ori	r30, 0x10	; 16
    7140:	be 2e       	mov	r11, r30
    7142:	b4 fe       	sbrs	r11, 4
    7144:	0d c0       	rjmp	.+26     	; 0x7160 <vfprintf+0x28e>
    7146:	fb 2d       	mov	r31, r11
    7148:	f4 60       	ori	r31, 0x04	; 4
    714a:	bf 2e       	mov	r11, r31
    714c:	09 c0       	rjmp	.+18     	; 0x7160 <vfprintf+0x28e>
    714e:	34 fe       	sbrs	r3, 4
    7150:	0a c0       	rjmp	.+20     	; 0x7166 <vfprintf+0x294>
    7152:	29 2f       	mov	r18, r25
    7154:	26 60       	ori	r18, 0x06	; 6
    7156:	b2 2e       	mov	r11, r18
    7158:	06 c0       	rjmp	.+12     	; 0x7166 <vfprintf+0x294>
    715a:	28 e0       	ldi	r18, 0x08	; 8
    715c:	30 e0       	ldi	r19, 0x00	; 0
    715e:	05 c0       	rjmp	.+10     	; 0x716a <vfprintf+0x298>
    7160:	20 e1       	ldi	r18, 0x10	; 16
    7162:	30 e0       	ldi	r19, 0x00	; 0
    7164:	02 c0       	rjmp	.+4      	; 0x716a <vfprintf+0x298>
    7166:	20 e1       	ldi	r18, 0x10	; 16
    7168:	32 e0       	ldi	r19, 0x02	; 2
    716a:	f8 01       	movw	r30, r16
    716c:	b7 fe       	sbrs	r11, 7
    716e:	07 c0       	rjmp	.+14     	; 0x717e <vfprintf+0x2ac>
    7170:	60 81       	ld	r22, Z
    7172:	71 81       	ldd	r23, Z+1	; 0x01
    7174:	82 81       	ldd	r24, Z+2	; 0x02
    7176:	93 81       	ldd	r25, Z+3	; 0x03
    7178:	0c 5f       	subi	r16, 0xFC	; 252
    717a:	1f 4f       	sbci	r17, 0xFF	; 255
    717c:	06 c0       	rjmp	.+12     	; 0x718a <vfprintf+0x2b8>
    717e:	60 81       	ld	r22, Z
    7180:	71 81       	ldd	r23, Z+1	; 0x01
    7182:	80 e0       	ldi	r24, 0x00	; 0
    7184:	90 e0       	ldi	r25, 0x00	; 0
    7186:	0e 5f       	subi	r16, 0xFE	; 254
    7188:	1f 4f       	sbci	r17, 0xFF	; 255
    718a:	a3 01       	movw	r20, r6
    718c:	f1 d0       	rcall	.+482    	; 0x7370 <__ultoa_invert>
    718e:	88 2e       	mov	r8, r24
    7190:	86 18       	sub	r8, r6
    7192:	fb 2d       	mov	r31, r11
    7194:	ff 77       	andi	r31, 0x7F	; 127
    7196:	3f 2e       	mov	r3, r31
    7198:	36 fe       	sbrs	r3, 6
    719a:	0d c0       	rjmp	.+26     	; 0x71b6 <vfprintf+0x2e4>
    719c:	23 2d       	mov	r18, r3
    719e:	2e 7f       	andi	r18, 0xFE	; 254
    71a0:	a2 2e       	mov	r10, r18
    71a2:	89 14       	cp	r8, r9
    71a4:	58 f4       	brcc	.+22     	; 0x71bc <vfprintf+0x2ea>
    71a6:	34 fe       	sbrs	r3, 4
    71a8:	0b c0       	rjmp	.+22     	; 0x71c0 <vfprintf+0x2ee>
    71aa:	32 fc       	sbrc	r3, 2
    71ac:	09 c0       	rjmp	.+18     	; 0x71c0 <vfprintf+0x2ee>
    71ae:	83 2d       	mov	r24, r3
    71b0:	8e 7e       	andi	r24, 0xEE	; 238
    71b2:	a8 2e       	mov	r10, r24
    71b4:	05 c0       	rjmp	.+10     	; 0x71c0 <vfprintf+0x2ee>
    71b6:	b8 2c       	mov	r11, r8
    71b8:	a3 2c       	mov	r10, r3
    71ba:	03 c0       	rjmp	.+6      	; 0x71c2 <vfprintf+0x2f0>
    71bc:	b8 2c       	mov	r11, r8
    71be:	01 c0       	rjmp	.+2      	; 0x71c2 <vfprintf+0x2f0>
    71c0:	b9 2c       	mov	r11, r9
    71c2:	a4 fe       	sbrs	r10, 4
    71c4:	0f c0       	rjmp	.+30     	; 0x71e4 <vfprintf+0x312>
    71c6:	fe 01       	movw	r30, r28
    71c8:	e8 0d       	add	r30, r8
    71ca:	f1 1d       	adc	r31, r1
    71cc:	80 81       	ld	r24, Z
    71ce:	80 33       	cpi	r24, 0x30	; 48
    71d0:	21 f4       	brne	.+8      	; 0x71da <vfprintf+0x308>
    71d2:	9a 2d       	mov	r25, r10
    71d4:	99 7e       	andi	r25, 0xE9	; 233
    71d6:	a9 2e       	mov	r10, r25
    71d8:	09 c0       	rjmp	.+18     	; 0x71ec <vfprintf+0x31a>
    71da:	a2 fe       	sbrs	r10, 2
    71dc:	06 c0       	rjmp	.+12     	; 0x71ea <vfprintf+0x318>
    71de:	b3 94       	inc	r11
    71e0:	b3 94       	inc	r11
    71e2:	04 c0       	rjmp	.+8      	; 0x71ec <vfprintf+0x31a>
    71e4:	8a 2d       	mov	r24, r10
    71e6:	86 78       	andi	r24, 0x86	; 134
    71e8:	09 f0       	breq	.+2      	; 0x71ec <vfprintf+0x31a>
    71ea:	b3 94       	inc	r11
    71ec:	a3 fc       	sbrc	r10, 3
    71ee:	10 c0       	rjmp	.+32     	; 0x7210 <vfprintf+0x33e>
    71f0:	a0 fe       	sbrs	r10, 0
    71f2:	06 c0       	rjmp	.+12     	; 0x7200 <vfprintf+0x32e>
    71f4:	b2 14       	cp	r11, r2
    71f6:	80 f4       	brcc	.+32     	; 0x7218 <vfprintf+0x346>
    71f8:	28 0c       	add	r2, r8
    71fa:	92 2c       	mov	r9, r2
    71fc:	9b 18       	sub	r9, r11
    71fe:	0d c0       	rjmp	.+26     	; 0x721a <vfprintf+0x348>
    7200:	b2 14       	cp	r11, r2
    7202:	58 f4       	brcc	.+22     	; 0x721a <vfprintf+0x348>
    7204:	b6 01       	movw	r22, r12
    7206:	80 e2       	ldi	r24, 0x20	; 32
    7208:	90 e0       	ldi	r25, 0x00	; 0
    720a:	76 d0       	rcall	.+236    	; 0x72f8 <fputc>
    720c:	b3 94       	inc	r11
    720e:	f8 cf       	rjmp	.-16     	; 0x7200 <vfprintf+0x32e>
    7210:	b2 14       	cp	r11, r2
    7212:	18 f4       	brcc	.+6      	; 0x721a <vfprintf+0x348>
    7214:	2b 18       	sub	r2, r11
    7216:	02 c0       	rjmp	.+4      	; 0x721c <vfprintf+0x34a>
    7218:	98 2c       	mov	r9, r8
    721a:	21 2c       	mov	r2, r1
    721c:	a4 fe       	sbrs	r10, 4
    721e:	0f c0       	rjmp	.+30     	; 0x723e <vfprintf+0x36c>
    7220:	b6 01       	movw	r22, r12
    7222:	80 e3       	ldi	r24, 0x30	; 48
    7224:	90 e0       	ldi	r25, 0x00	; 0
    7226:	68 d0       	rcall	.+208    	; 0x72f8 <fputc>
    7228:	a2 fe       	sbrs	r10, 2
    722a:	16 c0       	rjmp	.+44     	; 0x7258 <vfprintf+0x386>
    722c:	a1 fc       	sbrc	r10, 1
    722e:	03 c0       	rjmp	.+6      	; 0x7236 <vfprintf+0x364>
    7230:	88 e7       	ldi	r24, 0x78	; 120
    7232:	90 e0       	ldi	r25, 0x00	; 0
    7234:	02 c0       	rjmp	.+4      	; 0x723a <vfprintf+0x368>
    7236:	88 e5       	ldi	r24, 0x58	; 88
    7238:	90 e0       	ldi	r25, 0x00	; 0
    723a:	b6 01       	movw	r22, r12
    723c:	0c c0       	rjmp	.+24     	; 0x7256 <vfprintf+0x384>
    723e:	8a 2d       	mov	r24, r10
    7240:	86 78       	andi	r24, 0x86	; 134
    7242:	51 f0       	breq	.+20     	; 0x7258 <vfprintf+0x386>
    7244:	a1 fe       	sbrs	r10, 1
    7246:	02 c0       	rjmp	.+4      	; 0x724c <vfprintf+0x37a>
    7248:	8b e2       	ldi	r24, 0x2B	; 43
    724a:	01 c0       	rjmp	.+2      	; 0x724e <vfprintf+0x37c>
    724c:	80 e2       	ldi	r24, 0x20	; 32
    724e:	a7 fc       	sbrc	r10, 7
    7250:	8d e2       	ldi	r24, 0x2D	; 45
    7252:	b6 01       	movw	r22, r12
    7254:	90 e0       	ldi	r25, 0x00	; 0
    7256:	50 d0       	rcall	.+160    	; 0x72f8 <fputc>
    7258:	89 14       	cp	r8, r9
    725a:	30 f4       	brcc	.+12     	; 0x7268 <vfprintf+0x396>
    725c:	b6 01       	movw	r22, r12
    725e:	80 e3       	ldi	r24, 0x30	; 48
    7260:	90 e0       	ldi	r25, 0x00	; 0
    7262:	4a d0       	rcall	.+148    	; 0x72f8 <fputc>
    7264:	9a 94       	dec	r9
    7266:	f8 cf       	rjmp	.-16     	; 0x7258 <vfprintf+0x386>
    7268:	8a 94       	dec	r8
    726a:	f3 01       	movw	r30, r6
    726c:	e8 0d       	add	r30, r8
    726e:	f1 1d       	adc	r31, r1
    7270:	80 81       	ld	r24, Z
    7272:	b6 01       	movw	r22, r12
    7274:	90 e0       	ldi	r25, 0x00	; 0
    7276:	40 d0       	rcall	.+128    	; 0x72f8 <fputc>
    7278:	81 10       	cpse	r8, r1
    727a:	f6 cf       	rjmp	.-20     	; 0x7268 <vfprintf+0x396>
    727c:	22 20       	and	r2, r2
    727e:	09 f4       	brne	.+2      	; 0x7282 <vfprintf+0x3b0>
    7280:	4e ce       	rjmp	.-868    	; 0x6f1e <vfprintf+0x4c>
    7282:	b6 01       	movw	r22, r12
    7284:	80 e2       	ldi	r24, 0x20	; 32
    7286:	90 e0       	ldi	r25, 0x00	; 0
    7288:	37 d0       	rcall	.+110    	; 0x72f8 <fputc>
    728a:	2a 94       	dec	r2
    728c:	f7 cf       	rjmp	.-18     	; 0x727c <vfprintf+0x3aa>
    728e:	f6 01       	movw	r30, r12
    7290:	86 81       	ldd	r24, Z+6	; 0x06
    7292:	97 81       	ldd	r25, Z+7	; 0x07
    7294:	02 c0       	rjmp	.+4      	; 0x729a <vfprintf+0x3c8>
    7296:	8f ef       	ldi	r24, 0xFF	; 255
    7298:	9f ef       	ldi	r25, 0xFF	; 255
    729a:	2b 96       	adiw	r28, 0x0b	; 11
    729c:	0f b6       	in	r0, 0x3f	; 63
    729e:	f8 94       	cli
    72a0:	de bf       	out	0x3e, r29	; 62
    72a2:	0f be       	out	0x3f, r0	; 63
    72a4:	cd bf       	out	0x3d, r28	; 61
    72a6:	df 91       	pop	r29
    72a8:	cf 91       	pop	r28
    72aa:	1f 91       	pop	r17
    72ac:	0f 91       	pop	r16
    72ae:	ff 90       	pop	r15
    72b0:	ef 90       	pop	r14
    72b2:	df 90       	pop	r13
    72b4:	cf 90       	pop	r12
    72b6:	bf 90       	pop	r11
    72b8:	af 90       	pop	r10
    72ba:	9f 90       	pop	r9
    72bc:	8f 90       	pop	r8
    72be:	7f 90       	pop	r7
    72c0:	6f 90       	pop	r6
    72c2:	5f 90       	pop	r5
    72c4:	4f 90       	pop	r4
    72c6:	3f 90       	pop	r3
    72c8:	2f 90       	pop	r2
    72ca:	08 95       	ret

000072cc <strnlen_P>:
    72cc:	fc 01       	movw	r30, r24
    72ce:	05 90       	lpm	r0, Z+
    72d0:	61 50       	subi	r22, 0x01	; 1
    72d2:	70 40       	sbci	r23, 0x00	; 0
    72d4:	01 10       	cpse	r0, r1
    72d6:	d8 f7       	brcc	.-10     	; 0x72ce <strnlen_P+0x2>
    72d8:	80 95       	com	r24
    72da:	90 95       	com	r25
    72dc:	8e 0f       	add	r24, r30
    72de:	9f 1f       	adc	r25, r31
    72e0:	08 95       	ret

000072e2 <strnlen>:
    72e2:	fc 01       	movw	r30, r24
    72e4:	61 50       	subi	r22, 0x01	; 1
    72e6:	70 40       	sbci	r23, 0x00	; 0
    72e8:	01 90       	ld	r0, Z+
    72ea:	01 10       	cpse	r0, r1
    72ec:	d8 f7       	brcc	.-10     	; 0x72e4 <strnlen+0x2>
    72ee:	80 95       	com	r24
    72f0:	90 95       	com	r25
    72f2:	8e 0f       	add	r24, r30
    72f4:	9f 1f       	adc	r25, r31
    72f6:	08 95       	ret

000072f8 <fputc>:
    72f8:	0f 93       	push	r16
    72fa:	1f 93       	push	r17
    72fc:	cf 93       	push	r28
    72fe:	df 93       	push	r29
    7300:	fb 01       	movw	r30, r22
    7302:	23 81       	ldd	r18, Z+3	; 0x03
    7304:	21 fd       	sbrc	r18, 1
    7306:	03 c0       	rjmp	.+6      	; 0x730e <fputc+0x16>
    7308:	8f ef       	ldi	r24, 0xFF	; 255
    730a:	9f ef       	ldi	r25, 0xFF	; 255
    730c:	2c c0       	rjmp	.+88     	; 0x7366 <fputc+0x6e>
    730e:	22 ff       	sbrs	r18, 2
    7310:	16 c0       	rjmp	.+44     	; 0x733e <fputc+0x46>
    7312:	46 81       	ldd	r20, Z+6	; 0x06
    7314:	57 81       	ldd	r21, Z+7	; 0x07
    7316:	24 81       	ldd	r18, Z+4	; 0x04
    7318:	35 81       	ldd	r19, Z+5	; 0x05
    731a:	42 17       	cp	r20, r18
    731c:	53 07       	cpc	r21, r19
    731e:	44 f4       	brge	.+16     	; 0x7330 <fputc+0x38>
    7320:	a0 81       	ld	r26, Z
    7322:	b1 81       	ldd	r27, Z+1	; 0x01
    7324:	9d 01       	movw	r18, r26
    7326:	2f 5f       	subi	r18, 0xFF	; 255
    7328:	3f 4f       	sbci	r19, 0xFF	; 255
    732a:	31 83       	std	Z+1, r19	; 0x01
    732c:	20 83       	st	Z, r18
    732e:	8c 93       	st	X, r24
    7330:	26 81       	ldd	r18, Z+6	; 0x06
    7332:	37 81       	ldd	r19, Z+7	; 0x07
    7334:	2f 5f       	subi	r18, 0xFF	; 255
    7336:	3f 4f       	sbci	r19, 0xFF	; 255
    7338:	37 83       	std	Z+7, r19	; 0x07
    733a:	26 83       	std	Z+6, r18	; 0x06
    733c:	14 c0       	rjmp	.+40     	; 0x7366 <fputc+0x6e>
    733e:	8b 01       	movw	r16, r22
    7340:	ec 01       	movw	r28, r24
    7342:	fb 01       	movw	r30, r22
    7344:	00 84       	ldd	r0, Z+8	; 0x08
    7346:	f1 85       	ldd	r31, Z+9	; 0x09
    7348:	e0 2d       	mov	r30, r0
    734a:	19 95       	eicall
    734c:	89 2b       	or	r24, r25
    734e:	e1 f6       	brne	.-72     	; 0x7308 <fputc+0x10>
    7350:	d8 01       	movw	r26, r16
    7352:	16 96       	adiw	r26, 0x06	; 6
    7354:	8d 91       	ld	r24, X+
    7356:	9c 91       	ld	r25, X
    7358:	17 97       	sbiw	r26, 0x07	; 7
    735a:	01 96       	adiw	r24, 0x01	; 1
    735c:	17 96       	adiw	r26, 0x07	; 7
    735e:	9c 93       	st	X, r25
    7360:	8e 93       	st	-X, r24
    7362:	16 97       	sbiw	r26, 0x06	; 6
    7364:	ce 01       	movw	r24, r28
    7366:	df 91       	pop	r29
    7368:	cf 91       	pop	r28
    736a:	1f 91       	pop	r17
    736c:	0f 91       	pop	r16
    736e:	08 95       	ret

00007370 <__ultoa_invert>:
    7370:	fa 01       	movw	r30, r20
    7372:	aa 27       	eor	r26, r26
    7374:	28 30       	cpi	r18, 0x08	; 8
    7376:	51 f1       	breq	.+84     	; 0x73cc <__ultoa_invert+0x5c>
    7378:	20 31       	cpi	r18, 0x10	; 16
    737a:	81 f1       	breq	.+96     	; 0x73dc <__ultoa_invert+0x6c>
    737c:	e8 94       	clt
    737e:	6f 93       	push	r22
    7380:	6e 7f       	andi	r22, 0xFE	; 254
    7382:	6e 5f       	subi	r22, 0xFE	; 254
    7384:	7f 4f       	sbci	r23, 0xFF	; 255
    7386:	8f 4f       	sbci	r24, 0xFF	; 255
    7388:	9f 4f       	sbci	r25, 0xFF	; 255
    738a:	af 4f       	sbci	r26, 0xFF	; 255
    738c:	b1 e0       	ldi	r27, 0x01	; 1
    738e:	3e d0       	rcall	.+124    	; 0x740c <__ultoa_invert+0x9c>
    7390:	b4 e0       	ldi	r27, 0x04	; 4
    7392:	3c d0       	rcall	.+120    	; 0x740c <__ultoa_invert+0x9c>
    7394:	67 0f       	add	r22, r23
    7396:	78 1f       	adc	r23, r24
    7398:	89 1f       	adc	r24, r25
    739a:	9a 1f       	adc	r25, r26
    739c:	a1 1d       	adc	r26, r1
    739e:	68 0f       	add	r22, r24
    73a0:	79 1f       	adc	r23, r25
    73a2:	8a 1f       	adc	r24, r26
    73a4:	91 1d       	adc	r25, r1
    73a6:	a1 1d       	adc	r26, r1
    73a8:	6a 0f       	add	r22, r26
    73aa:	71 1d       	adc	r23, r1
    73ac:	81 1d       	adc	r24, r1
    73ae:	91 1d       	adc	r25, r1
    73b0:	a1 1d       	adc	r26, r1
    73b2:	20 d0       	rcall	.+64     	; 0x73f4 <__ultoa_invert+0x84>
    73b4:	09 f4       	brne	.+2      	; 0x73b8 <__ultoa_invert+0x48>
    73b6:	68 94       	set
    73b8:	3f 91       	pop	r19
    73ba:	2a e0       	ldi	r18, 0x0A	; 10
    73bc:	26 9f       	mul	r18, r22
    73be:	11 24       	eor	r1, r1
    73c0:	30 19       	sub	r19, r0
    73c2:	30 5d       	subi	r19, 0xD0	; 208
    73c4:	31 93       	st	Z+, r19
    73c6:	de f6       	brtc	.-74     	; 0x737e <__ultoa_invert+0xe>
    73c8:	cf 01       	movw	r24, r30
    73ca:	08 95       	ret
    73cc:	46 2f       	mov	r20, r22
    73ce:	47 70       	andi	r20, 0x07	; 7
    73d0:	40 5d       	subi	r20, 0xD0	; 208
    73d2:	41 93       	st	Z+, r20
    73d4:	b3 e0       	ldi	r27, 0x03	; 3
    73d6:	0f d0       	rcall	.+30     	; 0x73f6 <__ultoa_invert+0x86>
    73d8:	c9 f7       	brne	.-14     	; 0x73cc <__ultoa_invert+0x5c>
    73da:	f6 cf       	rjmp	.-20     	; 0x73c8 <__ultoa_invert+0x58>
    73dc:	46 2f       	mov	r20, r22
    73de:	4f 70       	andi	r20, 0x0F	; 15
    73e0:	40 5d       	subi	r20, 0xD0	; 208
    73e2:	4a 33       	cpi	r20, 0x3A	; 58
    73e4:	18 f0       	brcs	.+6      	; 0x73ec <__ultoa_invert+0x7c>
    73e6:	49 5d       	subi	r20, 0xD9	; 217
    73e8:	31 fd       	sbrc	r19, 1
    73ea:	40 52       	subi	r20, 0x20	; 32
    73ec:	41 93       	st	Z+, r20
    73ee:	02 d0       	rcall	.+4      	; 0x73f4 <__ultoa_invert+0x84>
    73f0:	a9 f7       	brne	.-22     	; 0x73dc <__ultoa_invert+0x6c>
    73f2:	ea cf       	rjmp	.-44     	; 0x73c8 <__ultoa_invert+0x58>
    73f4:	b4 e0       	ldi	r27, 0x04	; 4
    73f6:	a6 95       	lsr	r26
    73f8:	97 95       	ror	r25
    73fa:	87 95       	ror	r24
    73fc:	77 95       	ror	r23
    73fe:	67 95       	ror	r22
    7400:	ba 95       	dec	r27
    7402:	c9 f7       	brne	.-14     	; 0x73f6 <__ultoa_invert+0x86>
    7404:	00 97       	sbiw	r24, 0x00	; 0
    7406:	61 05       	cpc	r22, r1
    7408:	71 05       	cpc	r23, r1
    740a:	08 95       	ret
    740c:	9b 01       	movw	r18, r22
    740e:	ac 01       	movw	r20, r24
    7410:	0a 2e       	mov	r0, r26
    7412:	06 94       	lsr	r0
    7414:	57 95       	ror	r21
    7416:	47 95       	ror	r20
    7418:	37 95       	ror	r19
    741a:	27 95       	ror	r18
    741c:	ba 95       	dec	r27
    741e:	c9 f7       	brne	.-14     	; 0x7412 <__ultoa_invert+0xa2>
    7420:	62 0f       	add	r22, r18
    7422:	73 1f       	adc	r23, r19
    7424:	84 1f       	adc	r24, r20
    7426:	95 1f       	adc	r25, r21
    7428:	a0 1d       	adc	r26, r0
    742a:	08 95       	ret

0000742c <_exit>:
    742c:	f8 94       	cli

0000742e <__stop_program>:
    742e:	ff cf       	rjmp	.-2      	; 0x742e <__stop_program>
